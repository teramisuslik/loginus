import { Controller, Get, Post, Put, Delete, Body, Param, UseGuards, Request } from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth } from '@nestjs/swagger';
import { OrganizationsService } from './organizations.service';
import type { CreateOrganizationDto, UpdateOrganizationDto } from './organizations.service';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { CurrentUser } from '../auth/decorators/current-user.decorator';

@ApiTags('organizations')
@Controller('organizations')
@UseGuards(JwtAuthGuard)
@ApiBearerAuth()
export class OrganizationsController {
  constructor(private organizationsService: OrganizationsService) {}

  @Post()
  @ApiOperation({ summary: '–°–æ–∑–¥–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é' })
  @ApiResponse({ status: 201, description: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞' })
  @ApiResponse({ status: 403, description: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' })
  async createOrganization(
    @Body() dto: CreateOrganizationDto,
    @CurrentUser() user: any,
  ) {
    return this.organizationsService.createOrganization(dto, user.userId);
  }

  @Get()
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' })
  @ApiResponse({ status: 200, description: '–°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π' })
  async getUserOrganizations(@CurrentUser() user: any) {
    return this.organizationsService.getUserOrganizations(user.userId);
  }

  @Get(':id')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –ø–æ ID' })
  @ApiResponse({ status: 200, description: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞' })
  @ApiResponse({ status: 404, description: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' })
  async getOrganization(@Param('id') id: string) {
    return this.organizationsService.getOrganizationById(id);
  }

  @Get(':id/roles')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã organization_roles)' })
  @ApiResponse({ status: 200, description: '–°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏' })
  async getOrganizationRoles(
    @Param('id') organizationId: string,
    @CurrentUser() user: any,
  ) {
    console.log(`üîç [OrganizationsController] GET /organizations/${organizationId}/roles called by user ${user.userId}`);
    try {
      const roles = await this.organizationsService.getOrganizationRoles(organizationId, user.userId);
      console.log(`üîç [OrganizationsController] Returning ${roles.length} roles:`, roles.map(r => r.name));
      return roles;
    } catch (error) {
      console.error(`‚ùå [OrganizationsController] Error getting roles:`, error);
      throw error;
    }
  }

  @Put(':id')
  @ApiOperation({ summary: '–û–±–Ω–æ–≤–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é' })
  @ApiResponse({ status: 200, description: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞' })
  @ApiResponse({ status: 403, description: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' })
  @ApiResponse({ status: 404, description: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' })
  async updateOrganization(
    @Param('id') id: string,
    @Body() dto: UpdateOrganizationDto,
    @CurrentUser() user: any,
  ) {
    return this.organizationsService.updateOrganization(id, dto, user.userId);
  }

  @Delete(':id')
  @ApiOperation({ summary: '–£–¥–∞–ª–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é' })
  @ApiResponse({ status: 200, description: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞' })
  @ApiResponse({ status: 403, description: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' })
  @ApiResponse({ status: 404, description: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' })
  async deleteOrganization(
    @Param('id') id: string,
    @CurrentUser() user: any,
  ) {
    await this.organizationsService.deleteOrganization(id, user.userId);
    return { message: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞' };
  }

  @Get(':id/members')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏' })
  @ApiResponse({ status: 200, description: '–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤' })
  async getOrganizationMembers(@Param('id') id: string) {
    return this.organizationsService.getOrganizationMembers(id);
  }

  @Post(':id/members')
  @ApiOperation({ summary: '–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é' })
  @ApiResponse({ status: 201, description: '–£—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω' })
  @ApiResponse({ status: 403, description: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' })
  async addMemberToOrganization(
    @Param('id') organizationId: string,
    @Body() body: { userId: string; roleName: string },
    @CurrentUser() user: any,
  ) {
    return this.organizationsService.addMemberToOrganization(
      organizationId,
      body.userId,
      body.roleName,
      user.userId,
    );
  }

  @Put(':id/members/:userId/role')
  @ApiOperation({ summary: '–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏' })
  @ApiResponse({ status: 200, description: '–†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞' })
  @ApiResponse({ status: 403, description: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' })
  async changeMemberRole(
    @Param('id') organizationId: string,
    @Param('userId') userId: string,
    @Body() body: { roleName: string },
    @CurrentUser() user: any,
  ) {
    return this.organizationsService.changeMemberRole(
      organizationId,
      userId,
      body.roleName,
      user.userId,
    );
  }

  @Delete(':id/members/:userId')
  @ApiOperation({ summary: '–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏' })
  @ApiResponse({ status: 200, description: '–£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω' })
  @ApiResponse({ status: 403, description: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' })
  async removeMemberFromOrganization(
    @Param('id') organizationId: string,
    @Param('userId') userId: string,
    @CurrentUser() user: any,
  ) {
    await this.organizationsService.removeMemberFromOrganization(
      organizationId,
      userId,
      user.userId,
    );
    return { message: '–£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏' };
  }
}