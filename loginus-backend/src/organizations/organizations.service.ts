import { Injectable, NotFoundException, ForbiddenException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Organization } from './entities/organization.entity';
import { OrganizationRole } from './entities/organization-role.entity';
import { OrganizationMembership } from './entities/organization-membership.entity';
import { User } from '../users/entities/user.entity';
import { UserRoleAssignment } from '../users/entities/user-role-assignment.entity';
import { Role } from '../rbac/entities/role.entity';
import { RoleHierarchyService } from '../rbac/role-hierarchy.service';
import { Team } from '../teams/entities/team.entity';
import { TeamRole } from '../teams/entities/team-role.entity';
import { TeamMembership } from '../teams/entities/team-membership.entity';

export interface CreateOrganizationDto {
  name: string;
  settings?: Record<string, any>;
}

export interface UpdateOrganizationDto {
  name?: string;
  settings?: Record<string, any>;
}

@Injectable()
export class OrganizationsService {
  constructor(
    @InjectRepository(Organization)
    private orgRepo: Repository<Organization>,
    @InjectRepository(OrganizationRole)
    private orgRoleRepo: Repository<OrganizationRole>,
    @InjectRepository(OrganizationMembership)
    private orgMembershipRepo: Repository<OrganizationMembership>,
    @InjectRepository(User)
    private usersRepo: Repository<User>,
    @InjectRepository(UserRoleAssignment)
    private userRoleAssignmentRepo: Repository<UserRoleAssignment>,
    @InjectRepository(Role)
    private rolesRepo: Repository<Role>,
    @InjectRepository(Team)
    private teamRepo: Repository<Team>,
    @InjectRepository(TeamRole)
    private teamRoleRepo: Repository<TeamRole>,
    @InjectRepository(TeamMembership)
    private teamMembershipRepo: Repository<TeamMembership>,
    private roleHierarchyService: RoleHierarchyService,
  ) {}

  /**
   * –°–æ–∑–¥–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
   */
  async createOrganization(
    dto: CreateOrganizationDto,
    creatorId: string,
  ): Promise<Organization> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ
    const canCreate = await this.roleHierarchyService.canCreateTeams(creatorId, '');
    if (!canCreate) {
      throw new ForbiddenException('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏');
    }

    // –°–æ–∑–¥–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
    const organization = this.orgRepo.create({
      ...dto,
      createdBy: creatorId,
    });

    const savedOrg = await this.orgRepo.save(organization);

    // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–æ–ª–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    await this.createSystemRoles(savedOrg.id);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–∫ super_admin
    await this.addMemberToOrganization(savedOrg.id, creatorId, 'super_admin', creatorId);

    return savedOrg;
  }

  /**
   * –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ –≤ organization_roles –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
   */
  private async copyGlobalRolesToOrganization(organizationId: string): Promise<void> {
    console.log(`üîß [OrganizationsService] copyGlobalRolesToOrganization called for organization ${organizationId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏
    const globalRoles = await this.rolesRepo.find({
      where: { isGlobal: true },
      relations: ['permissions'],
    });

    console.log(`üîß [OrganizationsService] Found ${globalRoles.length} global roles to copy`);

    // –£—Ä–æ–≤–Ω–∏ —Ä–æ–ª–µ–π
    const ROLE_LEVELS: Record<string, number> = {
      super_admin: 100,
      admin: 80,
      manager: 60,
      editor: 40,
      viewer: 20,
    };

    // –ö–æ–ø–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ä–æ–ª—å –≤ organization_roles
    for (const globalRole of globalRoles) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ä–æ–ª–∏
        const existingRole = await this.orgRoleRepo.findOne({
          where: { organizationId, name: globalRole.name },
        });

        if (existingRole) {
          console.log(`‚ö†Ô∏è [OrganizationsService] Role ${globalRole.name} already exists in organization ${organizationId}`);
          continue;
        }

        const orgRole = this.orgRoleRepo.create({
          name: globalRole.name,
          description: globalRole.description || '',
          organizationId,
          permissions: globalRole.permissions?.map(p => p.name) || [],
          level: ROLE_LEVELS[globalRole.name] || 0,
          isSystem: globalRole.isSystem || false,
        });

        const savedRole = await this.orgRoleRepo.save(orgRole);
        console.log(`‚úÖ [OrganizationsService] Copied role ${savedRole.name} (level ${savedRole.level}) for organization ${organizationId}`);
      } catch (error) {
        console.error(`‚ùå [OrganizationsService] Error copying role ${globalRole.name}:`, error);
        throw error;
      }
    }

    console.log(`‚úÖ [OrganizationsService] All ${globalRoles.length} global roles copied to organization ${organizationId}`);
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–æ–ª–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
   */
  private async createSystemRoles(organizationId: string): Promise<void> {
    const systemRoles = [
      {
        name: 'super_admin',
        description: '–°—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏',
        permissions: ['organizations.manage', 'teams.create', 'teams.manage', 'users.invite', 'users.manage', 'roles.manage'],
        level: 100,
      },
      {
        name: 'admin',
        description: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏',
        permissions: ['teams.create', 'teams.manage', 'users.invite', 'users.manage'],
        level: 80,
      },
      {
        name: 'manager',
        description: '–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏',
        permissions: ['teams.manage', 'users.invite', 'users.manage'],
        level: 60,
      },
      {
        name: 'editor',
        description: '–†–µ–¥–∞–∫—Ç–æ—Ä –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏',
        permissions: ['organizations.read', 'teams.read'],
        level: 40,
      },
      {
        name: 'viewer',
        description: '–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏',
        permissions: ['organizations.read'],
        level: 20,
      },
    ];

    for (const roleData of systemRoles) {
      const role = this.orgRoleRepo.create({
        ...roleData,
        organizationId,
        isSystem: true,
      });
      await this.orgRoleRepo.save(role);
    }
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
   */
  async addMemberToOrganization(
    organizationId: string,
    userId: string,
    roleName: string,
    invitedBy: string,
  ): Promise<OrganizationMembership> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–∫—Ä–æ–º–µ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–µ–±—è)
    if (userId !== invitedBy) {
      const canInvite = await this.roleHierarchyService.canInviteUsers(invitedBy, { organizationId });
      if (!canInvite) {
        throw new ForbiddenException('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é');
      }
    }

    // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–ª—å
    const role = await this.orgRoleRepo.findOne({
      where: { name: roleName, organizationId },
    });

    if (!role) {
      throw new NotFoundException(`–†–æ–ª—å ${roleName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
    const existingMembership = await this.orgMembershipRepo.findOne({
      where: { userId, organizationId },
    });

    if (existingMembership) {
      throw new ForbiddenException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏');
    }

    // –°–æ–∑–¥–∞–µ–º —á–ª–µ–Ω—Å—Ç–≤–æ
    const membership = this.orgMembershipRepo.create({
      userId,
      organizationId,
      roleId: role.id,
      invitedBy,
    });

    return this.orgMembershipRepo.save(membership);
  }

  /**
   * –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
   */
  async changeMemberRole(
    organizationId: string,
    userId: string,
    newRoleName: string,
    changedBy: string,
  ): Promise<OrganizationMembership | null> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏
    const canManage = await this.roleHierarchyService.canManageUser(changedBy, userId, { organizationId });
    if (!canManage) {
      throw new ForbiddenException('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏');
    }

    // –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—É—é —Ä–æ–ª—å
    const newRole = await this.orgRoleRepo.findOne({
      where: { name: newRoleName, organizationId },
    });

    if (!newRole) {
      throw new NotFoundException(`–†–æ–ª—å ${newRoleName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏`);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å
    await this.orgMembershipRepo.update(
      { userId, organizationId },
      { roleId: newRole.id },
    );

    const membership = await this.orgMembershipRepo.findOne({
      where: { userId, organizationId },
      relations: ['role', 'user'],
    });
    return membership || null;
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
   */
  async removeMemberFromOrganization(
    organizationId: string,
    userId: string,
    removedBy: string,
  ): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
    const canManage = await this.roleHierarchyService.canManageUser(removedBy, userId, { organizationId });
    if (!canManage) {
      throw new ForbiddenException('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞');
    }

    // –£–¥–∞–ª—è–µ–º –∏–∑ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã (organization_memberships) —á–µ—Ä–µ–∑ SQL –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
    try {
      const deleteResult = await this.orgMembershipRepo.manager.query(
        'DELETE FROM organization_memberships WHERE "userId" = $1 AND "organizationId" = $2',
        [userId, organizationId]
      );
      console.log(`‚úÖ Removed user ${userId} from organization ${organizationId} (organization_memberships), deleted rows: ${deleteResult[1] || 0}`);
    } catch (error: any) {
      console.error(`‚ùå Error removing from organization_memberships: ${error.message}`);
      throw error;
    }

    // –£–¥–∞–ª—è–µ–º –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã (user_organizations)
    try {
      await this.orgMembershipRepo.manager.query(
        'DELETE FROM user_organizations WHERE "userId" = $1 AND "organizationId" = $2',
        [userId, organizationId]
      );
      console.log(`‚úÖ Removed user ${userId} from organization ${organizationId} (user_organizations)`);
    } catch (error: any) {
      console.warn(`‚ö†Ô∏è Could not remove from user_organizations (table may not exist): ${error.message}`);
    }

    // –£–¥–∞–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π –¥–ª—è —ç—Ç–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (user_role_assignments)
    try {
      await this.orgMembershipRepo.manager.query(
        'DELETE FROM user_role_assignments WHERE "userId" = $1 AND "organizationId" = $2',
        [userId, organizationId]
      );
      console.log(`‚úÖ Removed user ${userId} role assignments for organization ${organizationId} (user_role_assignments)`);
    } catch (error: any) {
      console.warn(`‚ö†Ô∏è Could not remove from user_role_assignments: ${error.message}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
   */
  async getOrganizationMembers(organizationId: string): Promise<OrganizationMembership[]> {
    return this.orgMembershipRepo.find({
      where: { organizationId },
      relations: ['user', 'role', 'inviter'],
    });
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserOrganizations(userId: string): Promise<Organization[]> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–º
    const user = await this.usersRepo.findOne({
      where: { id: userId },
      relations: ['userRoleAssignments', 'userRoleAssignments.role'],
    });

    const isSuperAdmin = user?.userRoleAssignments?.some(
      assignment => assignment.role?.name === 'super_admin' && !assignment.organizationId && !assignment.teamId
    );

    if (isSuperAdmin) {
      // –°—É–ø–µ—Ä–∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
      return this.orgRepo.find({
        relations: ['teams', 'memberships', 'memberships.user', 'creator'],
      });
    }

    // –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    const memberships = await this.orgMembershipRepo.find({
      where: { userId },
      relations: ['organization', 'organization.teams', 'organization.memberships', 'organization.memberships.user', 'organization.creator', 'role'],
    });

    return memberships.map(membership => membership.organization);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –ø–æ ID
   */
  async getOrganizationById(id: string): Promise<Organization> {
    const organization = await this.orgRepo.findOne({
      where: { id },
      relations: ['teams', 'memberships', 'memberships.user', 'memberships.role'],
    });

    if (!organization) {
      throw new NotFoundException('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    return organization;
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
   */
  async updateOrganization(
    id: string,
    dto: UpdateOrganizationDto,
    updatedBy: string,
  ): Promise<Organization> {
    const organization = await this.getOrganizationById(id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    const userRole = await this.roleHierarchyService.getUserEffectiveRole(updatedBy, { organizationId: id });
    if (!['super_admin', 'admin'].includes(userRole.role)) {
      throw new ForbiddenException('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏');
    }

    await this.orgRepo.update(id, dto);
    return this.getOrganizationById(id);
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
   */
  async deleteOrganization(id: string, deletedBy: string): Promise<void> {
    console.log(`üóëÔ∏è Starting deletion of organization ${id} by user ${deletedBy}`);
    
    const organization = await this.getOrganizationById(id);
    console.log(`üóëÔ∏è Found organization: ${organization.name}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
    const userRole = await this.roleHierarchyService.getUserEffectiveRole(deletedBy, { organizationId: id });
    console.log(`üóëÔ∏è User role for deletion: ${userRole.role}`);
    
    if (!['super_admin', 'admin', 'manager'].includes(userRole.role)) {
      console.log(`üóëÔ∏è Access denied for user ${deletedBy} with role ${userRole.role}`);
      throw new ForbiddenException('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏');
    }

    console.log(`üóëÔ∏è Access granted, proceeding with deletion`);

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    // 1. –£–¥–∞–ª—è–µ–º —á–ª–µ–Ω—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    console.log(`üóëÔ∏è Deleting organization memberships...`);
    await this.orgMembershipRepo.delete({ organizationId: id });

    // 2. –£–¥–∞–ª—è–µ–º —Ä–æ–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    console.log(`üóëÔ∏è Deleting organization roles...`);
    await this.orgRoleRepo.delete({ organizationId: id });

    // 3. –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–æ–Ω–∏ —É–¥–∞–ª—è—Ç —Å–≤–æ–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ –∫–∞—Å–∫–∞–¥)
    console.log(`üóëÔ∏è Finding teams in organization...`);
    const teams = await this.teamRepo.find({ where: { organizationId: id } });
    console.log(`üóëÔ∏è Found ${teams.length} teams to delete`);
    
    for (const team of teams) {
      console.log(`üóëÔ∏è Deleting team ${team.id} (${team.name})`);
      // –£–¥–∞–ª—è–µ–º —á–ª–µ–Ω—Å—Ç–≤–æ –≤ –∫–æ–º–∞–Ω–¥–µ (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)
      await this.teamMembershipRepo.delete({ teamId: team.id });
      // –£–¥–∞–ª—è–µ–º —Ä–æ–ª–∏ –∫–æ–º–∞–Ω–¥—ã
      await this.teamRoleRepo.delete({ teamId: team.id });
      // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã ManyToMany (user_teams)
      await this.teamRepo.query('DELETE FROM user_teams WHERE team_id = $1', [team.id]);
      // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
      await this.teamRepo.delete(team.id);
    }

    // 4. –£–¥–∞–ª—è–µ–º —Å–∞–º—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
    console.log(`üóëÔ∏è Deleting organization ${id}...`);
    await this.orgRepo.delete(id);
    console.log(`üóëÔ∏è Organization ${id} deleted successfully`);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
   */
  async getOrganizationRoles(organizationId: string, userId: string): Promise<any[]> {
    console.log(`üîç [OrganizationsService] getOrganizationRoles called for org ${organizationId}, user ${userId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –∏–∑ organization_roles –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    let allRoles = await this.orgRoleRepo.find({
      where: { organizationId },
      order: { level: 'DESC' },
    });

    console.log(`üîç [OrganizationsService] Found ${allRoles.length} roles in organization_roles for organization ${organizationId}`);
    
    if (allRoles.length > 0) {
      console.log(`üîç [OrganizationsService] Role names found:`, allRoles.map(r => `${r.name} (level: ${r.level})`));
    } else {
      console.log(`‚ö†Ô∏è [OrganizationsService] No roles found in organization_roles for ${organizationId}, checking if organization exists...`);
      const org = await this.orgRepo.findOne({ where: { id: organizationId } });
      console.log(`üîç [OrganizationsService] Organization exists: ${!!org}`);
      
      // –ï—Å–ª–∏ —Ä–æ–ª–µ–π –Ω–µ—Ç - –∑–∞–ø–æ–ª–Ω—è–µ–º –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π
      console.log(`‚ö†Ô∏è [OrganizationsService] No roles in organization_roles, copying from global roles...`);
      try {
        await this.copyGlobalRolesToOrganization(organizationId);
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–ª–∏ —Å–Ω–æ–≤–∞
        allRoles = await this.orgRoleRepo.find({
          where: { organizationId },
          order: { level: 'DESC' },
        });
        console.log(`‚úÖ [OrganizationsService] Copied and loaded ${allRoles.length} roles from global roles`);
        if (allRoles.length > 0) {
          console.log(`üîç [OrganizationsService] Role names after copy:`, allRoles.map(r => `${r.name} (level: ${r.level})`));
        } else {
          console.error(`‚ùå [OrganizationsService] After copy: still no roles found! Something went wrong.`);
        }
      } catch (error) {
        console.error(`‚ùå [OrganizationsService] Error copying roles:`, error);
        throw error;
      }
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–æ–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π getAvailableRolesForInvite
    const rolesForFilter = allRoles.map(role => ({
      name: role.name,
      level: role.level,
      id: role.id,
      description: role.description || '',
    }));
    
    console.log(`üîç [OrganizationsService] Prepared ${rolesForFilter.length} roles for filtering:`, rolesForFilter.map(r => `${r.name} (level ${r.level})`));
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–æ–ª–∏ –ø–æ —É—Ä–æ–≤–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const filteredRoles = await this.roleHierarchyService.getAvailableRolesForInvite(
      userId,
      { organizationId },
      rolesForFilter,
    );
    
    console.log(`üîç [OrganizationsService] Returning ${filteredRoles.length} available roles (after filtering)`);
    console.log(`üîç [OrganizationsService] Role names:`, filteredRoles.map(r => r.name));
    
    return filteredRoles;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (legacy –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   */
  async getGlobalRolesFromRolesTable(userId: string): Promise<any[]> {
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ getOrganizationRoles –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ
    return [];
  }
}