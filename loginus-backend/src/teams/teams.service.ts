import { Injectable, NotFoundException, ForbiddenException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Team } from './entities/team.entity';
import { TeamRole } from './entities/team-role.entity';
import { TeamMembership } from './entities/team-membership.entity';
import { User } from '../users/entities/user.entity';
import { OrganizationMembership } from '../organizations/entities/organization-membership.entity';
import { Role } from '../rbac/entities/role.entity';
import { RoleHierarchyService } from '../rbac/role-hierarchy.service';

export interface CreateTeamDto {
  name: string;
  description?: string;
  organizationId: string;
}

export interface UpdateTeamDto {
  name?: string;
  description?: string;
}

@Injectable()
export class TeamsService {
  constructor(
    @InjectRepository(Team)
    private teamRepo: Repository<Team>,
    @InjectRepository(TeamRole)
    private teamRoleRepo: Repository<TeamRole>,
    @InjectRepository(TeamMembership)
    private teamMembershipRepo: Repository<TeamMembership>,
    @InjectRepository(User)
    private usersRepo: Repository<User>,
    @InjectRepository(OrganizationMembership)
    private orgMembershipRepo: Repository<OrganizationMembership>,
    @InjectRepository(Role)
    private rolesRepo: Repository<Role>,
    private roleHierarchyService: RoleHierarchyService,
  ) {}

  /**
   * –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
   */
  async createTeam(
    dto: CreateTeamDto,
    creatorId: string,
  ): Promise<Team> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    const canCreate = await this.roleHierarchyService.canCreateTeams(creatorId, dto.organizationId);
    if (!canCreate) {
      throw new ForbiddenException('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –≤ —ç—Ç–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏');
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    const team = this.teamRepo.create({
      ...dto,
      createdBy: creatorId,
    });

    const savedTeam = await this.teamRepo.save(team);
    console.log(`‚úÖ Team created: ${savedTeam.name} (ID: ${savedTeam.id})`);

    // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–æ–ª–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
    console.log(`üîß About to create system roles for team: ${savedTeam.id}`);
    await this.createSystemRoles(savedTeam.id);
    console.log(`‚úÖ System roles creation completed for team: ${savedTeam.id}`);

    // –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π - —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    console.log(`‚úÖ Team created empty: ${savedTeam.name} (ID: ${savedTeam.id})`);

    return savedTeam;
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–æ–ª–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
   */
  private async createSystemRoles(teamId: string): Promise<void> {
    console.log(`üîß Creating system roles for team: ${teamId}`);
    
    const systemRoles = [
      {
        name: 'super_admin',
        description: '–°—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã',
        permissions: ['teams.manage', 'users.invite', 'users.manage', 'users.remove', 'roles.manage'],
        level: 100,
      },
      {
        name: 'admin',
        description: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã',
        permissions: ['teams.manage', 'users.invite', 'users.manage', 'users.remove'],
        level: 80,
      },
      {
        name: 'manager',
        description: '–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–º–∞–Ω–¥—ã',
        permissions: ['teams.manage', 'users.invite', 'users.manage'],
        level: 60,
      },
      {
        name: 'editor',
        description: '–†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã',
        permissions: ['teams.read', 'content.create', 'content.edit'],
        level: 40,
      },
      {
        name: 'viewer',
        description: '–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã',
        permissions: ['teams.read'],
        level: 20,
      },
    ];

    for (const roleData of systemRoles) {
      console.log(`üîß Creating role: ${roleData.name} for team: ${teamId}`);
      const role = this.teamRoleRepo.create({
        ...roleData,
        teamId,
        isSystem: true,
      });
      const savedRole = await this.teamRoleRepo.save(role);
      console.log(`‚úÖ Role created: ${savedRole.name} (ID: ${savedRole.id})`);
    }
    
    console.log(`‚úÖ System roles created for team: ${teamId}`);
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É
   */
  async addMemberToTeam(
    teamId: string,
    userId: string,
    roleName: string,
    invitedBy: string,
  ): Promise<TeamMembership> {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    const team = await this.teamRepo.findOne({
      where: { id: teamId },
      relations: ['organization'],
    });

    if (!team) {
      throw new NotFoundException('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    const canInvite = await this.roleHierarchyService.canInviteUsers(invitedBy, { 
      organizationId: team.organizationId || undefined,
      teamId,
    });
    if (!canInvite) {
      throw new ForbiddenException('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—É');
    }

    // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–ª—å
    const role = await this.teamRoleRepo.findOne({
      where: { name: roleName, teamId },
    });

    if (!role) {
      throw new NotFoundException(`–†–æ–ª—å ${roleName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–º–∞–Ω–¥–µ`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
    const existingMembership = await this.teamMembershipRepo.findOne({
      where: { userId, teamId },
    });

    if (existingMembership) {
      throw new ForbiddenException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–æ–º–∞–Ω–¥—ã');
    }

    // –°–æ–∑–¥–∞–µ–º —á–ª–µ–Ω—Å—Ç–≤–æ –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ (team_memberships)
    const membership = this.teamMembershipRepo.create({
      userId,
      teamId,
      roleId: role.id,
      invitedBy,
    });

    const savedMembership = await this.teamMembershipRepo.save(membership);

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É (user_teams)
    await this.teamRepo
      .createQueryBuilder()
      .insert()
      .into('user_teams')
      .values({
        user_id: userId,
        team_id: teamId,
      })
      .execute();

    console.log(`‚úÖ Added user ${userId} to team ${teamId} in both systems`);
    
    return savedMembership;
  }

  /**
   * –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã
   */
  async changeMemberRole(
    teamId: string,
    userId: string,
    newRoleName: string,
    changedBy: string,
  ): Promise<TeamMembership | null> {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    const team = await this.teamRepo.findOne({
      where: { id: teamId },
      relations: ['organization'],
    });

    if (!team) {
      throw new NotFoundException('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏
    const canManage = await this.roleHierarchyService.canManageUser(changedBy, userId, { 
      organizationId: team.organizationId || undefined,
      teamId,
    });
    if (!canManage) {
      throw new ForbiddenException('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏');
    }

    // –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—É—é —Ä–æ–ª—å
    const newRole = await this.teamRoleRepo.findOne({
      where: { name: newRoleName, teamId },
    });

    if (!newRole) {
      throw new NotFoundException(`–†–æ–ª—å ${newRoleName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–º–∞–Ω–¥–µ`);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å
    await this.teamMembershipRepo.update(
      { userId, teamId },
      { roleId: newRole.id },
    );

    const membership = await this.teamMembershipRepo.findOne({
      where: { userId, teamId },
      relations: ['role', 'user'],
    });
    return membership || null;
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
   */
  async removeMemberFromTeam(
    teamId: string,
    userId: string,
    removedBy: string,
  ): Promise<void> {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    const team = await this.teamRepo.findOne({
      where: { id: teamId },
      relations: ['organization'],
    });

    if (!team) {
      throw new NotFoundException('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
    const canManage = await this.roleHierarchyService.canManageUser(removedBy, userId, { 
      organizationId: team.organizationId || undefined,
      teamId,
    });
    if (!canManage) {
      throw new ForbiddenException('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞');
    }

    // –£–¥–∞–ª—è–µ–º –∏–∑ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã (team_memberships)
    await this.teamMembershipRepo.delete({ userId, teamId });
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã (user_teams)
    await this.teamRepo
      .createQueryBuilder()
      .delete()
      .from('user_teams')
      .where('user_id = :userId', { userId })
      .andWhere('team_id = :teamId', { teamId })
      .execute();
    
    console.log(`‚úÖ Removed user ${userId} from team ${teamId} from both systems`);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —è–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã + —á–ª–µ–Ω–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ —è–≤–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã)
   */
  async getTeamMembers(teamId: string): Promise<{ team: any; members: any[] }> {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
    const team = await this.teamRepo.findOne({
      where: { id: teamId },
      relations: ['organization', 'creator'],
    });

    if (!team) {
      return { team: null, members: [] };
    }

    // 1. –ü–æ–ª—É—á–∞–µ–º —è–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    const teamMemberships = await this.teamMembershipRepo.find({
      where: { teamId },
      relations: ['user', 'role', 'inviter'],
    });

    // 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    const orgMemberships = team.organizationId ? await this.orgMembershipRepo.find({
      where: { organizationId: team.organizationId },
      relations: ['user', 'role'],
    }) : [];

    // 3. ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —è–≤–Ω—ã—Ö —á–ª–µ–Ω–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    // –ß–ª–µ–Ω—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ù–ï –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —è–≤–Ω—ã–º–∏ —á–ª–µ–Ω–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã
    const membersMap = new Map();

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —è–≤–Ω—ã—Ö —á–ª–µ–Ω–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    teamMemberships.forEach(membership => {
      membersMap.set(membership.user.id, {
        id: membership.user.id,
        email: membership.user.email,
        firstName: membership.user.firstName,
        lastName: membership.user.lastName,
        role: membership.role,
        joinedAt: membership.createdAt,
        inviter: membership.inviter,
        source: 'team'
      });
    });

    return {
      team: team,
      members: Array.from(membersMap.values())
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserTeams(userId: string): Promise<Team[]> {
    const memberships = await this.teamMembershipRepo.find({
      where: { userId },
      relations: ['team', 'role'],
    });

    return memberships.map(membership => membership.team);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * –í–∫–ª—é—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
   */
  async getAccessibleTeams(userId: string): Promise<Team[]> {
    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
      const userMemberships = await this.teamMembershipRepo.find({
        where: { userId },
        relations: ['team', 'team.organization', 'role'],
      });

      const userTeams = userMemberships.map(membership => membership.team);

      // 2. –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ —á–µ—Ä–µ–∑ OrganizationMembership
      const orgMemberships = await this.teamRepo
        .createQueryBuilder('team')
        .leftJoin('team.organization', 'organization')
        .leftJoin('organization.memberships', 'orgMembership')
        .where('orgMembership.userId = :userId', { userId })
        .getMany();

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      const allTeams = [...userTeams, ...orgMemberships];
      const uniqueTeams = allTeams.filter((team, index, self) => 
        index === self.findIndex(t => t.id === team.id)
      );

      return uniqueTeams;
    } catch (error) {
      console.error('Error in getAccessibleTeams:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      return this.getUserTeams(userId);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–æ ID
   */
  async getTeamById(id: string): Promise<Team> {
    const team = await this.teamRepo.findOne({
      where: { id },
      relations: ['organization', 'memberships', 'memberships.user', 'memberships.role'],
    });

    if (!team) {
      throw new NotFoundException('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    return team;
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
   */
  async updateTeam(
    id: string,
    dto: UpdateTeamDto,
    updatedBy: string,
  ): Promise<Team> {
    const team = await this.getTeamById(id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    const userRole = await this.roleHierarchyService.getUserEffectiveRole(updatedBy, { 
      organizationId: team.organizationId || undefined,
      teamId: id,
    });
    if (!['super_admin', 'admin', 'manager'].includes(userRole.role)) {
      throw new ForbiddenException('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã');
    }

    await this.teamRepo.update(id, dto);
    return this.getTeamById(id);
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
   */
  async deleteTeam(id: string, deletedBy: string): Promise<void> {
    const team = await this.getTeamById(id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
    const userRole = await this.roleHierarchyService.getUserEffectiveRole(deletedBy, { 
      organizationId: team.organizationId || undefined,
      teamId: id,
    });
    if (!['super_admin', 'admin', 'manager'].includes(userRole.role)) {
      throw new ForbiddenException('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã');
    }

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã
    // 1. –£–¥–∞–ª—è–µ–º —á–ª–µ–Ω—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–º–∞–Ω–¥–µ (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)
    await this.teamMembershipRepo.delete({ teamId: id });

    // 2. –£–¥–∞–ª—è–µ–º —Ä–æ–ª–∏ –∫–æ–º–∞–Ω–¥—ã
    await this.teamRoleRepo.delete({ teamId: id });

    // 3. –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã ManyToMany (user_teams)
    await this.teamRepo.query('DELETE FROM user_teams WHERE team_id = $1', [id]);

    // 4. –£–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É
    await this.teamRepo.delete(id);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
   */
  async getOrganizationTeams(organizationId: string): Promise<Team[]> {
    return this.teamRepo.find({
      where: { organizationId },
      relations: ['memberships', 'memberships.user', 'memberships.role'],
    });
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª–∏ –∫–æ–º–∞–Ω–¥—ã
   */
  async getTeamRolesFromRolesTable(teamId: string, userId: string): Promise<any[]> {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–æ–ª–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã team_roles –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
    const allRoles = await this.teamRoleRepo.find({
      where: { teamId },
      order: { level: 'DESC' },
    });

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–æ–ª–∏ –ø–æ —É—Ä–æ–≤–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return this.roleHierarchyService.getAvailableRolesForInvite(
      userId,
      { teamId },
      allRoles,
    ) as Promise<any[]>;
  }

  async getTeamRoles(teamId: string, userId?: string): Promise<TeamRole[]> {
    const allRoles = await this.teamRoleRepo.find({
      where: { teamId },
      order: { level: 'DESC' }, // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é (–æ—Ç –≤—ã—Å—à–µ–≥–æ –∫ –Ω–∏–∑—à–µ–º—É)
    });

    // –ï—Å–ª–∏ userId –Ω–µ —É–∫–∞–∑–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ä–æ–ª–∏
    if (!userId) {
      return allRoles;
    }

    // –ï—Å–ª–∏ userId —É–∫–∞–∑–∞–Ω, —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ä–æ–ª–∏ –ø–æ —É—Ä–æ–≤–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return this.roleHierarchyService.getAvailableRolesForInvite(
      userId,
      { teamId },
      allRoles,
    ) as Promise<TeamRole[]>;
  }
}