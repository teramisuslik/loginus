import { Injectable, NotFoundException, BadRequestException, ForbiddenException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { ConfigService } from '@nestjs/config';
import { Invitation, InvitationStatus, InvitationType } from './entities/invitation.entity';
import { User } from '../../../users/entities/user.entity';
import { UserRoleAssignment } from '../../../users/entities/user-role-assignment.entity';
import { Role } from '../../../rbac/entities/role.entity';
import { Team } from '../../../teams/entities/team.entity';
import { TeamRole } from '../../../teams/entities/team-role.entity';
import { TeamMembership } from '../../../teams/entities/team-membership.entity';
import { Organization } from '../../../organizations/entities/organization.entity';
import { OrganizationRole } from '../../../organizations/entities/organization-role.entity';
import { OrganizationMembership } from '../../../organizations/entities/organization-membership.entity';
import { CreateInvitationDto } from './dto/create-invitation.dto';
import { AcceptInvitationDto } from './dto/accept-invitation.dto';
import { InvitationResponseDto } from './dto/invitation-response.dto';
import { EmailService } from '../../email.service';
import { UsersService } from '../../../users/users.service';
import { RbacService } from '../../../rbac/rbac.service';
// import { UserRoleAssignmentService } from '../../../users/user-role-assignment.service';
import { NotificationsService } from '../../../notifications/notifications.service';
import { NotificationType } from '../../../notifications/entities/notification.entity';
import * as crypto from 'crypto';

@Injectable()
export class InvitationsService {
  constructor(
    @InjectRepository(Invitation)
    private invitationsRepo: Repository<Invitation>,
    @InjectRepository(User)
    private usersRepo: Repository<User>,
    @InjectRepository(UserRoleAssignment)
    private userRoleAssignmentRepo: Repository<UserRoleAssignment>,
    @InjectRepository(Role)
    private rolesRepo: Repository<Role>,
    @InjectRepository(Team)
    private teamsRepo: Repository<Team>,
    @InjectRepository(TeamRole)
    private teamRoleRepo: Repository<TeamRole>,
    @InjectRepository(TeamMembership)
    private teamMembershipRepo: Repository<TeamMembership>,
    @InjectRepository(Organization)
    private organizationsRepo: Repository<Organization>,
    @InjectRepository(OrganizationRole)
    private orgRoleRepo: Repository<OrganizationRole>,
    @InjectRepository(OrganizationMembership)
    private orgMembershipRepo: Repository<OrganizationMembership>,
    private configService: ConfigService,
    private emailService: EmailService,
    private usersService: UsersService,
    private rbacService: RbacService,
    // private userRoleAssignmentService: UserRoleAssignmentService,
    private notificationsService: NotificationsService,
  ) {}

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
   */
  async createInvitation(
    invitedById: string,
    dto: CreateInvitationDto,
  ): Promise<InvitationResponseDto> {
    // –£–±—Ä–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ - —Ç–µ–ø–µ—Ä—å –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è

    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω roleName, –Ω–∞—Ö–æ–¥–∏–º roleId –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã/–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    let roleId = dto.roleId;
    console.log(`üîç Creating invitation with roleName: ${dto.roleName}, roleId: ${dto.roleId}, type: ${dto.type}, teamId: ${dto.teamId}`);
    
    if (dto.roleName && !dto.roleId) {
      if (dto.type === InvitationType.TEAM && dto.teamId) {
        // –ò—â–µ–º —Ä–æ–ª—å –∫–æ–º–∞–Ω–¥—ã –ø–æ –∏–º–µ–Ω–∏
        console.log(`üîç Searching for team role: ${dto.roleName} in team: ${dto.teamId}`);
        const teamRole = await this.teamRoleRepo.findOne({
          where: { name: dto.roleName, teamId: dto.teamId }
        });
        console.log(`üîç Team role found:`, teamRole);
        if (teamRole) {
          roleId = teamRole.id;
          console.log(`‚úÖ Role ID found: ${roleId}`);
        } else {
          console.log(`‚ùå Role '${dto.roleName}' not found in team ${dto.teamId}`);
          throw new BadRequestException(`–†–æ–ª—å '${dto.roleName}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–º–∞–Ω–¥–µ`);
        }
      } else if (dto.type === InvitationType.ORGANIZATION && dto.organizationId) {
        // –ò—â–µ–º —Ä–æ–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –∏–º–µ–Ω–∏
        console.log(`üîç Searching for organization role: ${dto.roleName} in organization: ${dto.organizationId}`);
        const orgRole = await this.orgRoleRepo.findOne({
          where: { name: dto.roleName, organizationId: dto.organizationId }
        });
        console.log(`üîç Organization role found:`, orgRole);
        if (orgRole) {
          roleId = orgRole.id;
          console.log(`‚úÖ Role ID found: ${roleId}`);
        } else {
          console.log(`‚ùå Role '${dto.roleName}' not found in organization ${dto.organizationId}`);
          throw new BadRequestException(`–†–æ–ª—å '${dto.roleName}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏`);
        }
      }
    }
    
    console.log(`üîç Final roleId: ${roleId}`);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let existingUser: User | null = null;
    let identifier = '';

    if (dto.email) {
      identifier = dto.email;
      existingUser = await this.usersRepo.findOne({ where: { email: dto.email } });
    } else if (dto.githubUsername) {
      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç—Ä–æ–≥–æ –ø–æ –ø–æ–ª—é githubUsername –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      identifier = dto.githubUsername;
      existingUser = await this.usersRepo.findOne({ where: { githubUsername: dto.githubUsername } });
      
      if (existingUser) {
        console.log(`üîç Found existing user for GitHub username ${dto.githubUsername}: ${existingUser.email}`);
        console.log(`üîç OAuth metadata exists: ${!!existingUser.oauthMetadata?.github}`);
        console.log(`üîç AccessToken exists: ${!!existingUser.oauthMetadata?.github?.accessToken}`);
      }
    } else if (dto.telegramUsername) {
      identifier = dto.telegramUsername;
      // –ü–æ–∏—Å–∫ –ø–æ Telegram username –≤ messengerMetadata
      const users = await this.usersRepo.find();
      existingUser = users.find(user => {
        const telegramMeta = (user.messengerMetadata as any)?.telegram;
        return telegramMeta?.username === dto.telegramUsername;
      }) || null;
    }

    if (!identifier) {
      throw new BadRequestException('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å email, GitHub username, –∏–ª–∏ Telegram username');
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º email –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:
    // 1. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω email –≤ DTO - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    // 2. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π email - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    // 3. –î–ª—è GitHub: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π email –∏–∑ GitHub API
    // 4. –ò–Ω–∞—á–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Å–µ–≤–¥–æ-email
    let invitationEmail: string;
    if (dto.email) {
      invitationEmail = dto.email;
    } else if (existingUser) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ email
      if (existingUser.email && !existingUser.email.includes('@github.local') && !existingUser.email.includes('@telegram.local')) {
        // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π email - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        invitationEmail = existingUser.email;
        console.log(`‚úÖ Using existing real email: ${invitationEmail}`);
      } else if (dto.githubUsername && existingUser.email && existingUser.email.includes('@github.local')) {
        // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Å–µ–≤–¥–æ-email –¥–ª—è GitHub - –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π
        console.log(`üîç User has pseudo-email ${existingUser.email}, trying to get real email from GitHub...`);
        const realEmail = await this.getRealEmailFromGitHub(existingUser);
        if (realEmail && !realEmail.includes('@github.local')) {
          invitationEmail = realEmail;
          // –û–±–Ω–æ–≤–ª—è–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
          existingUser.email = realEmail;
          await this.usersRepo.save(existingUser);
          console.log(`‚úÖ Got and updated real email from GitHub: ${realEmail}`);
        } else {
          // –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π email - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Å–µ–≤–¥–æ-email
          invitationEmail = existingUser.email;
          console.log(`‚ö†Ô∏è Could not get real email from GitHub, using pseudo-email: ${invitationEmail}`);
        }
      } else {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Å–µ–≤–¥–æ-email
        invitationEmail = dto.githubUsername ? `${dto.githubUsername}@github.local` : `${dto.telegramUsername}@telegram.local`;
        console.log(`‚ÑπÔ∏è Generated pseudo-email: ${invitationEmail}`);
      }
    } else {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Å–µ–≤–¥–æ-email
      invitationEmail = dto.githubUsername ? `${dto.githubUsername}@github.local` : `${dto.telegramUsername}@telegram.local`;
      console.log(`‚ÑπÔ∏è User not found, generated pseudo-email: ${invitationEmail}`);
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é/–∫–æ–º–∞–Ω–¥—É
    if (existingUser) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —á–ª–µ–Ω–æ–º
      if (dto.type === InvitationType.ORGANIZATION && existingUser.organizations?.some(org => org.id === dto.organizationId)) {
        throw new BadRequestException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —á–ª–µ–Ω–æ–º —ç—Ç–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏');
      }
      if (dto.type === InvitationType.TEAM && existingUser.teams?.some(team => team.id === dto.teamId)) {
        throw new BadRequestException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —á–ª–µ–Ω–æ–º —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const token = crypto.randomBytes(32).toString('hex');
      const expiresInDays = dto.expiresInDays || 7;
      const expiresAt = new Date();
      expiresAt.setDate(expiresAt.getDate() + expiresInDays);

      // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
      const invitation = this.invitationsRepo.create({
        email: invitationEmail,
        type: dto.type,
        organizationId: dto.organizationId,
        teamId: dto.teamId,
        role: roleId || undefined,
        invitedById,
        token,
        expiresAt,
        status: InvitationStatus.PENDING,
      });

      await this.invitationsRepo.save(invitation);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
      try {
        await this.notificationsService.createNotification(
          existingUser.id,
          NotificationType.INVITATION,
          dto.type === InvitationType.ORGANIZATION 
            ? '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é' 
            : '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É',
          `–í—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –≤ ${dto.type === InvitationType.ORGANIZATION ? '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é' : '–∫–æ–º–∞–Ω–¥—É'}. –ü—Ä–∏–º–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.`,
          { invitationId: invitation.id }
        );
      } catch (error) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—Ç–∞–±–ª–∏—Ü–∞ notifications –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç):', error.message);
      }

      const frontendUrl = this.configService.get<string>('FRONTEND_URL');
      const invitationLink = `${frontendUrl}/dashboard?invitation=${token}`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Å–µ–≤–¥–æ-email, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π email –∏–∑ GitHub
      try {
        let emailToSend = existingUser.email;
        
        // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Å–µ–≤–¥–æ-email –¥–ª—è GitHub, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π
        if (dto.githubUsername && existingUser.email && existingUser.email.includes('@github.local')) {
          console.log(`üîç Trying to get real email for existing user with pseudo-email ${existingUser.email}`);
          const realEmail = await this.getRealEmailFromGitHub(existingUser);
          if (realEmail && !realEmail.includes('@github.local')) {
            emailToSend = realEmail;
            // –û–±–Ω–æ–≤–ª—è–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
            existingUser.email = realEmail;
            await this.usersRepo.save(existingUser);
            // –û–±–Ω–æ–≤–ª—è–µ–º email –≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏
            invitation.email = realEmail;
            await this.invitationsRepo.save(invitation);
            console.log(`‚úÖ Updated invitation email to real email: ${realEmail}`);
          }
        }
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ email –æ—Ç–∫–ª—é—á–µ–Ω–∞
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π email
        if (emailToSend && !emailToSend.includes('@github.local') && !emailToSend.includes('@telegram.local')) {
          // await this.sendInvitationEmail(invitation, existingUser.id);
          console.log(`‚ÑπÔ∏è Email sending disabled (invitation created for ${emailToSend})`);
        } else {
          console.log(`‚ÑπÔ∏è User ${existingUser.email} has pseudo-email, invitation notification sent via system`);
        }
      } catch (error) {
        console.error('‚ùå Error sending invitation email for existing user:', error);
        // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
      }

      return {
        id: invitation.id,
        email: invitation.email,
        type: invitation.type,
        organizationId: invitation.organizationId,
        teamId: invitation.teamId,
        status: invitation.status,
        role: invitation.role,
        invitedById: invitation.invitedById,
        acceptedById: invitation.acceptedById,
        token: invitation.token,
        expiresAt: invitation.expiresAt,
        acceptedAt: invitation.acceptedAt,
        createdAt: invitation.createdAt,
        updatedAt: invitation.updatedAt,
        invitationLink,
      };
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    const existingInvitation = await this.invitationsRepo.findOne({
      where: {
        email: invitationEmail,
        status: InvitationStatus.PENDING,
      },
    });
    if (existingInvitation) {
      throw new BadRequestException(`–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è ${identifier} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    const token = crypto.randomBytes(32).toString('hex');

    // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
    const expiresInDays = dto.expiresInDays || 7;
    const expiresAt = new Date();
    expiresAt.setDate(expiresAt.getDate() + expiresInDays);

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    const invitation = this.invitationsRepo.create({
      email: invitationEmail,
      type: dto.type,
      organizationId: dto.organizationId,
      teamId: dto.teamId,
      role: roleId || undefined,
      invitedById,
      token,
      expiresAt,
      status: InvitationStatus.PENDING,
    });

    await this.invitationsRepo.save(invitation);

    console.log('üîç Invitation saved, about to send notification...');
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    try {
      if (dto.email) {
        // await this.sendInvitationEmail(invitation, invitedById);
        console.log('‚ÑπÔ∏è Email sending disabled (invitation created, link available in response)');
      } else if (dto.telegramUsername) {
        await this.sendInvitationTelegram(invitation, dto.telegramUsername, invitedById);
        console.log('‚úÖ Telegram invitation sent successfully');
      } else if (dto.githubUsername) {
        // GitHub –Ω–µ –∏–º–µ–µ—Ç –ø—Ä—è–º–æ–≥–æ API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        // Email –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É –Ω–µ–≥–æ —Ç–æ–ª—å–∫–æ –ø—Å–µ–≤–¥–æ-email
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ GitHub
        console.log(`‚ÑπÔ∏è GitHub user ${dto.githubUsername} will see invitation on next GitHub login`);
      }
    } catch (error) {
      console.error('‚ùå Error sending invitation notification:', error);
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    const frontendUrl = this.configService.get<string>('FRONTEND_URL');
    const invitationLink = `${frontendUrl}/invitation?token=${token}`;

    return {
      id: invitation.id,
      email: invitation.email,
      type: invitation.type,
      organizationId: invitation.organizationId,
      teamId: invitation.teamId,
      status: invitation.status,
      role: invitation.role,
      invitedById: invitation.invitedById,
      acceptedById: invitation.acceptedById,
      token: invitation.token,
      expiresAt: invitation.expiresAt,
      acceptedAt: invitation.acceptedAt,
      createdAt: invitation.createdAt,
      updatedAt: invitation.updatedAt,
      invitationLink,
    };
  }

  /**
   * –ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
   */
  async acceptInvitation(dto: AcceptInvitationDto): Promise<{ 
    success: boolean; 
    userId?: string; 
    redirectTo?: string;
    message?: string;
  }> {
    console.log(`üîç Starting invitation acceptance for token: ${dto.token}`);
    
    const invitation = await this.invitationsRepo.findOne({
      where: { token: dto.token },
      relations: ['invitedBy'],
    });
    
    console.log(`üîç Invitation found:`, invitation);

    if (!invitation) {
      throw new NotFoundException('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    if (invitation.status !== InvitationStatus.PENDING) {
      throw new BadRequestException('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
    }

    if (invitation.expiresAt && invitation.expiresAt < new Date()) {
      invitation.status = InvitationStatus.EXPIRED;
      await this.invitationsRepo.save(invitation);
      throw new BadRequestException('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    let user = await this.usersService.findByEmail(invitation.email);
    
    if (!user) {
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      user = await this.usersService.create({
        email: invitation.email,
        passwordHash: dto.password ? await this.hashPassword(dto.password) : null,
      });
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email}`);
    } else {
      console.log(`‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é/–∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã —á–ª–µ–Ω—Å—Ç–≤–∞
    if (invitation.organizationId) {
      console.log(`üîç Adding user ${user.email} to organization ${invitation.organizationId}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —á–ª–µ–Ω–æ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
      const existingOrgMembership = await this.orgMembershipRepo.findOne({
        where: {
          userId: user.id,
          organizationId: invitation.organizationId
        }
      });

      if (!existingOrgMembership) {
        // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–ª—å –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º roleId –∏–∑ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –±–∞–∑–æ–≤—É—é —Ä–æ–ª—å)
        let roleId = invitation.role;
        if (!roleId) {
          const defaultRole = await this.orgRoleRepo.findOne({
            where: { 
              organizationId: invitation.organizationId,
              name: 'member'
            }
          });
          roleId = defaultRole?.id;
        }

        if (roleId) {
          const orgMembership = this.orgMembershipRepo.create({
            userId: user.id,
            organizationId: invitation.organizationId,
            roleId: roleId,
            invitedBy: invitation.invitedById,
            joinedAt: new Date()
          });
          await this.orgMembershipRepo.save(orgMembership);
          console.log(`‚úÖ User ${user.email} added to organization ${invitation.organizationId} with role ${roleId}`);
        } else {
          console.log(`‚ö†Ô∏è No role found for organization ${invitation.organizationId}`);
        }
      } else {
        console.log(`‚ÑπÔ∏è User ${user.email} is already a member of organization ${invitation.organizationId}`);
      }
    }

    if (invitation.teamId) {
      console.log(`üîç Adding user ${user.email} to team ${invitation.teamId}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —á–ª–µ–Ω–æ–º –∫–æ–º–∞–Ω–¥—ã
      const existingTeamMembership = await this.teamMembershipRepo.findOne({
        where: {
          userId: user.id,
          teamId: invitation.teamId
        }
      });

      if (!existingTeamMembership) {
        // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–ª—å –¥–ª—è –∫–æ–º–∞–Ω–¥—ã - —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ä–æ–ª—å –ø–æ –∏–º–µ–Ω–∏ –∏–∑ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        let roleId: string | null = null;
        
        if (invitation.role) {
          // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏–∑ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ—ë –∏–º—è
          const invitationRole = await this.rolesRepo.findOne({
            where: { id: invitation.role }
          });
          
          if (invitationRole) {
            // –ò—â–µ–º —Ä–æ–ª—å —Å —Ç–∞–∫–∏–º –∂–µ –∏–º–µ–Ω–µ–º –≤ —Ü–µ–ª–µ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ
            const teamRole = await this.teamRoleRepo.findOne({
              where: { 
                teamId: invitation.teamId,
                name: invitationRole.name
              }
            });
            roleId = teamRole?.id || null;
            console.log(`üîç Looking for role '${invitationRole.name}' in team ${invitation.teamId}: ${roleId ? 'found' : 'not found'}`);
          }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∏–º–µ–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (!roleId) {
          const defaultRole = await this.teamRoleRepo.findOne({
            where: { 
              teamId: invitation.teamId,
              name: 'member'
            }
          });
          roleId = defaultRole?.id || null;
          console.log(`üîç Using default 'member' role for team ${invitation.teamId}: ${roleId ? 'found' : 'not found'}`);
        }

        if (roleId) {
          const teamMembership = this.teamMembershipRepo.create({
            userId: user.id,
            teamId: invitation.teamId,
            roleId: roleId,
            invitedBy: invitation.invitedById,
            joinedAt: new Date()
          });
          await this.teamMembershipRepo.save(teamMembership);
          console.log(`‚úÖ User ${user.email} added to team ${invitation.teamId} with role ${roleId}`);
        } else {
          console.log(`‚ö†Ô∏è No role found for team ${invitation.teamId}`);
        }
      } else {
        console.log(`‚ÑπÔ∏è User ${user.email} is already a member of team ${invitation.teamId}`);
      }
    }

    // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å –∏–∑ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞) –∏–ª–∏ –±–∞–∑–æ–≤—É—é —Ä–æ–ª—å
    if (invitation.role) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ —Ä–æ–ª—å
      const existingAssignment = await this.userRoleAssignmentRepo.findOne({
        where: {
          userId: user.id,
          roleId: invitation.role,
          organizationId: invitation.organizationId,
          teamId: invitation.teamId
        }
      });

      if (!existingAssignment) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–¥–ª—è –∫–æ–º–∞–Ω–¥ –∏—â–µ–º –≤ team_roles, –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –≤ organization_roles)
        let roleExists = false;
        console.log(`üîç Checking role existence for roleId: ${invitation.role}, teamId: ${invitation.teamId}, organizationId: ${invitation.organizationId}`);
        
        if (invitation.teamId) {
          const teamRole = await this.teamRoleRepo.findOne({ where: { id: invitation.role } });
          console.log(`üîç Team role found:`, teamRole);
          roleExists = !!teamRole;
        } else if (invitation.organizationId) {
          const orgRole = await this.orgRoleRepo.findOne({ where: { id: invitation.role } });
          console.log(`üîç Organization role found:`, orgRole);
          roleExists = !!orgRole;
        } else {
          const globalRole = await this.rolesRepo.findOne({ where: { id: invitation.role } });
          console.log(`üîç Global role found:`, globalRole);
          roleExists = !!globalRole;
        }

        console.log(`üîç Role exists: ${roleExists}`);

        if (roleExists) {
          if (invitation.teamId) {
            const roleObj = await this.teamRoleRepo.findOne({ where: { id: invitation.role } });
            if (roleObj) {
              const userRoleAssignment = this.userRoleAssignmentRepo.create({
                teamId: invitation.teamId,
                userId: user.id,
                teamRoleId: roleObj.id,
              });
              await this.userRoleAssignmentRepo.save(userRoleAssignment);
            }
          } else if (invitation.organizationId) {
            const roleObj = await this.orgRoleRepo.findOne({ where: { id: invitation.role } });
            if (roleObj) {
              const userRoleAssignment = this.userRoleAssignmentRepo.create({
                organizationId: invitation.organizationId,
                userId: user.id,
                organizationRoleId: roleObj.id,
              });
              await this.userRoleAssignmentRepo.save(userRoleAssignment);
            }
          } else {
            const roleObj = await this.rolesRepo.findOne({ where: { id: invitation.role } });
            if (roleObj) {
              const userRoleAssignment = this.userRoleAssignmentRepo.create({
                userId: user.id,
                roleId: roleObj.id,
              });
              await this.userRoleAssignmentRepo.save(userRoleAssignment);
            }
          }
          console.log(`‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å –∏–∑ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è ${user.email}`);
        } else {
          console.log(`‚ö†Ô∏è –†–æ–ª—å —Å ID ${invitation.role} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏`);
        }
      } else {
        console.log(`‚ÑπÔ∏è –†–æ–ª—å –∏–∑ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.email}`);
      }
    } else {
      // –ï—Å–ª–∏ –≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —Ä–æ–ª—å, –Ω–∞–∑–Ω–∞—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Ä–æ–ª—å "viewer"
      const viewerRole = await this.rolesRepo.findOne({ where: { name: 'viewer' } });
      if (viewerRole) {
        const existingViewerAssignment = await this.userRoleAssignmentRepo.findOne({
          where: { userId: user.id, roleId: viewerRole.id },
        });

        if (!existingViewerAssignment) {
          const userRoleAssignment = this.userRoleAssignmentRepo.create({
          organizationId: invitation.organizationId,
          teamId: invitation.teamId,
            userId: user.id,
            roleId: viewerRole.id,
          });
          await this.userRoleAssignmentRepo.save(userRoleAssignment);
          console.log(`‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∞ –±–∞–∑–æ–≤–∞—è —Ä–æ–ª—å viewer –¥–ª—è ${user.email}`);
        }
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    invitation.status = InvitationStatus.ACCEPTED;
    invitation.acceptedById = user.id;
    invitation.acceptedAt = new Date();
    await this.invitationsRepo.save(invitation);

    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} –ø—Ä–∏–Ω—è–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç ${invitation.invitedBy.email}`);

    const frontendUrl = this.configService.get<string>('FRONTEND_URL');
    
    return { 
      success: true, 
      userId: user.id,
      redirectTo: `${frontendUrl}/dashboard?tab=invitations`,
      message: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–∞–∑–¥–µ–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π...'
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ –µ–º—É)
   */
  async getUserInvitations(userId: string): Promise<InvitationResponseDto[]> {
    // –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ GitHub username
    const user = await this.usersRepo.findOne({ where: { id: userId } });
    if (!user) {
      return [];
    }

    // –ò—â–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–æ GitHub username (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const queryBuilder = this.invitationsRepo
      .createQueryBuilder('invitation')
      .leftJoinAndSelect('invitation.organization', 'organization')
      .leftJoinAndSelect('invitation.team', 'team')
      .leftJoinAndSelect('invitation.invitedBy', 'invitedBy')
      .where('invitation.email = :email', { email: user.email });

    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å GitHub username, —Ç–∞–∫–∂–µ –∏—â–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ –ø—Å–µ–≤–¥–æ-email
    if (user.githubUsername) {
      const githubPseudoEmail = `${user.githubUsername}@github.local`;
      queryBuilder.orWhere('invitation.email = :githubEmail', { githubEmail: githubPseudoEmail });
    }

    const invitations = await queryBuilder
      .orderBy('invitation.createdAt', 'DESC')
      .getMany();

    const frontendUrl = this.configService.get<string>('FRONTEND_URL');

    return invitations.map(invitation => ({
      id: invitation.id,
      email: invitation.email,
      type: invitation.type,
      organizationId: invitation.organizationId,
      teamId: invitation.teamId,
      status: invitation.status,
      role: invitation.role,
      invitedById: invitation.invitedById,
      acceptedById: invitation.acceptedById,
      token: invitation.token,
      expiresAt: invitation.expiresAt,
      acceptedAt: invitation.acceptedAt,
      createdAt: invitation.createdAt,
      updatedAt: invitation.updatedAt,
      invitationLink: `${frontendUrl}/dashboard?invitation=${invitation.token}`,
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ/–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–∏–≥–ª–∞—à–∞—é—â–µ–º
      targetName: invitation.type === 'team' ? invitation.team?.name : invitation.organization?.name,
      roleName: (invitation.role as any)?.name || invitation.role || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      inviterName: invitation.invitedBy?.email || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      inviterEmail: invitation.invitedBy?.email || null,
    }));
  }

  /**
   * –û—Ç–º–µ–Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
   */
  async cancelInvitation(userId: string, invitationId: string): Promise<void> {
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    const invitation = await this.invitationsRepo.findOne({
      where: { id: invitationId },
      relations: ['organization', 'team'],
    });

    if (!invitation) {
      throw new NotFoundException('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    if (invitation.status === InvitationStatus.DECLINED || invitation.status === InvitationStatus.EXPIRED) {
      throw new BadRequestException('–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–µ –∏–ª–∏ –∏—Å—Ç–µ–∫—à–µ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    const canCancel = await this.checkCancelInvitationPermissions(userId, invitation);
    if (!canCancel) {
      throw new ForbiddenException('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
    }

    // –ï—Å–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ, –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã/–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    if (invitation.status === InvitationStatus.ACCEPTED && invitation.acceptedById) {
      const acceptedUser = await this.usersRepo.findOne({
        where: { id: invitation.acceptedById },
        relations: ['teams'],
      });

      if (acceptedUser) {
        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –±—ã–ª–æ –≤ –∫–æ–º–∞–Ω–¥—É
        if (invitation.type === InvitationType.TEAM && invitation.teamId) {
          await this.usersRepo
            .createQueryBuilder()
            .relation(User, 'teams')
            .of(acceptedUser.id)
            .remove(invitation.teamId);
        }

        // –°–≤—è–∑–∏ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ ManyToMany relations
        // –ù–µ –Ω—É–∂–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å teamId –∏ organizationId, —Ç–∞–∫ –∫–∞–∫ –∏—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ User entity
      }
    }

    // –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await this.invitationsRepo.remove(invitation);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–º–µ–Ω—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
   * –í–ê–ñ–ù–û: –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø—Ä–∞–≤
   */
  private async checkCancelInvitationPermissions(userId: string, invitation: Invitation): Promise<boolean> {
    // –£–±—Ä–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ - —Ç–µ–ø–µ—Ä—å –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Ç–º–µ–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    return true;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π (–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
   */
  async getSentInvitations(userId: string): Promise<InvitationResponseDto[]> {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º raw SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å TypeORM
    console.log('üîç getSentInvitations called with userId:', userId, 'type:', typeof userId);
    const invitations = await this.invitationsRepo.query(`
      SELECT 
        i.*,
        o.name as "organization_name",
        t.name as "team_name",
        COALESCE(tr.name, or_role.name, gr.name) as "role_name",
        u.email as "inviter_email",
        '' as "inviter_first_name",
        '' as "inviter_last_name"
      FROM invitations i
      LEFT JOIN organizations o ON i."organizationId" = o.id
      LEFT JOIN teams t ON i."teamId" = t.id
      LEFT JOIN team_roles tr ON tr.id::text = i.role AND i.type = 'team'
      LEFT JOIN organization_roles or_role ON or_role.id::text = i.role AND i.type = 'organization'
      LEFT JOIN roles gr ON gr.id::text = i.role
      LEFT JOIN users u ON i."invitedById" = u.id
      WHERE i."invitedById" = $1
      ORDER BY i."created_at" DESC
    `, [userId]);
    console.log('üîç getSentInvitations result:', invitations.length);

    const frontendUrl = this.configService.get<string>('FRONTEND_URL');

    return invitations.map((invitation: any) => ({
      id: invitation.id,
      email: invitation.email,
      type: invitation.type,
      organizationId: invitation.organizationId,
      teamId: invitation.teamId,
      status: invitation.status,
      role: invitation.role,
      invitedById: invitation.invitedById,
      acceptedById: invitation.acceptedById,
      token: invitation.token,
      expiresAt: invitation.expires_at,
      acceptedAt: invitation.accepted_at,
      createdAt: invitation.created_at,
      updatedAt: invitation.updated_at,
      invitationLink: `${frontendUrl}/dashboard?invitation=${invitation.token}`,
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ/–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–∏–≥–ª–∞—à–∞—é—â–µ–º –∏–∑ raw SQL
      targetName: invitation.type === 'team' ? invitation.team_name : invitation.organization_name,
      roleName: invitation.role_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      inviterName: invitation.inviter_first_name || invitation.inviter_last_name 
        ? `${invitation.inviter_first_name || ''} ${invitation.inviter_last_name || ''}`.trim() 
        : null,
      inviterEmail: invitation.inviter_email || null,
    }));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
   * –í–ê–ñ–ù–û: –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø—Ä–∞–≤
   */
  private async checkInvitationPermissions(
    userId: string,
    type: InvitationType,
    organizationId?: string,
    teamId?: string,
  ): Promise<boolean> {
    // –£–±—Ä–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ - —Ç–µ–ø–µ—Ä—å –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    return true;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot
   */
  private async sendInvitationTelegram(invitation: Invitation, telegramUsername: string, invitedById?: string): Promise<void> {
    const botToken = this.configService.get<string>('TELEGRAM_BOT_TOKEN');
    if (!botToken) {
      console.error('‚ùå TELEGRAM_BOT_TOKEN not configured, cannot send Telegram invitation');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ Telegram username
    const users = await this.usersRepo.find();
    const targetUser = users.find(user => {
      const telegramMeta = (user.messengerMetadata as any)?.telegram;
      return telegramMeta?.username === telegramUsername.replace('@', '');
    });

    if (!targetUser) {
      console.error(`‚ùå User with Telegram username ${telegramUsername} not found`);
      return;
    }

    const telegramMeta = (targetUser.messengerMetadata as any)?.telegram;
    const chatId = telegramMeta?.userId;
    
    if (!chatId) {
      console.error(`‚ùå Telegram chatId not found for user ${telegramUsername}`);
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≥–ª–∞—à–∞—é—â–µ–º
    let inviterName = '–ö–æ–ª–ª–µ–≥–∞';
    if (invitedById) {
      const inviter = await this.usersRepo.findOne({ where: { id: invitedById } });
      if (inviter) {
        inviterName = inviter.firstName && inviter.lastName 
          ? `${inviter.firstName} ${inviter.lastName}` 
          : inviter.email || '–ö–æ–ª–ª–µ–≥–∞';
      }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
    const frontendUrl = this.configService.get<string>('FRONTEND_URL');
    const invitationLink = `${frontendUrl}/invitation?token=${invitation.token}`;

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏/–∫–æ–º–∞–Ω–¥–µ
    let invitationTarget = '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é';
    if (invitation.type === InvitationType.ORGANIZATION && invitation.organizationId) {
      const org = await this.organizationsRepo.findOne({ where: { id: invitation.organizationId } });
      invitationTarget = org ? `–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é "${org.name}"` : '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é';
    } else if (invitation.type === InvitationType.TEAM && invitation.teamId) {
      const team = await this.teamsRepo.findOne({ where: { id: invitation.teamId } });
      invitationTarget = team ? `–∫–æ–º–∞–Ω–¥—É "${team.name}"` : '–∫–æ–º–∞–Ω–¥—É';
    }

    const message = `üëã –ü—Ä–∏–≤–µ—Ç!\n\n${inviterName} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –≤ ${invitationTarget}.\n\n–î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n${invitationLink}`;

    try {
      const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: 'HTML',
        }),
      });

      const result = await response.json();
      if (!result.ok) {
        console.error('‚ùå Telegram API error:', result);
        throw new Error(`Telegram API error: ${result.description || 'Unknown error'}`);
      }

      console.log(`‚úÖ Telegram invitation sent to ${telegramUsername} (chatId: ${chatId})`);
    } catch (error) {
      console.error('‚ùå Error sending Telegram invitation:', error);
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ email —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º
   */
  private async sendInvitationEmail(invitation: Invitation, invitedById?: string): Promise<void> {
    console.log('üîç sendInvitationEmail called for:', invitation.email);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å relations –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    const fullInvitation = await this.invitationsRepo.findOne({
      where: { id: invitation.id },
      relations: ['organization', 'team', 'team.organization', 'invitedBy']
    });
    
    if (!fullInvitation) {
      console.error('‚ùå Invitation not found for email sending');
      return;
    }
    
    console.log('üîç Full invitation data:', {
      email: fullInvitation.email,
      type: fullInvitation.type,
      organizationId: fullInvitation.organizationId,
      teamId: fullInvitation.teamId,
      hasOrganization: !!fullInvitation.organization,
      hasTeam: !!fullInvitation.team,
      organizationName: fullInvitation.organization?.name,
      teamName: fullInvitation.team?.name,
      teamOrgName: fullInvitation.team?.organization?.name,
      invitedById: fullInvitation.invitedById,
      hasInvitedBy: !!fullInvitation.invitedBy,
      invitedByEmail: fullInvitation.invitedBy?.email,
      passedInvitedById: invitedById
    });
    
    const frontendUrl = this.configService.get<string>('FRONTEND_URL');
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≥–ª–∞—à–∞—é—â–µ–º
    let inviterName = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
    let inviterEmail = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π invitedById
    if (invitedById) {
      try {
        const inviter = await this.usersRepo.findOne({ where: { id: invitedById } });
        if (inviter) {
          inviterName = inviter.email || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
          inviterEmail = inviter.email || '';
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–≥–ª–∞—à–∞—é—â–µ–º –ø–æ invitedById:', error);
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ invitedById, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ fullInvitation.invitedBy
    if (inviterEmail === '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' && fullInvitation.invitedBy) {
      try {
        inviterName = fullInvitation.invitedBy.email || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
        inviterEmail = fullInvitation.invitedBy.email || '';
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–≥–ª–∞—à–∞—é—â–µ–º —á–µ—Ä–µ–∑ fullInvitation.invitedBy:', error);
      }
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ fullInvitation.invitedById
    if (inviterEmail === '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' && fullInvitation.invitedById) {
      try {
        const inviter = await this.usersRepo.findOne({ where: { id: fullInvitation.invitedById } });
        if (inviter) {
          inviterName = inviter.email || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
          inviterEmail = inviter.email || '';
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–≥–ª–∞—à–∞—é—â–µ–º –ø–æ fullInvitation.invitedById:', error);
      }
    }
    
    console.log('üîç Final inviter info:', {
      inviterName,
      inviterEmail,
      invitedById,
      fullInvitationInvitedById: fullInvitation.invitedById,
      hasInvitedByRelation: !!fullInvitation.invitedBy
    });
    
    // –°—Å—ã–ª–∫–∞ –≤–µ–¥–µ—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ (–≤–≤–æ–¥ email)
    const loginUrl = `${frontendUrl}`;

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏/–∫–æ–º–∞–Ω–¥–µ
    let invitationTarget = '';
    let organizationName = '';
    let teamName = '';
    
    if (fullInvitation.type === InvitationType.ORGANIZATION && fullInvitation.organization) {
      invitationTarget = `–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é "${fullInvitation.organization.name}"`;
      organizationName = fullInvitation.organization.name;
    } else if (fullInvitation.type === InvitationType.TEAM && fullInvitation.team) {
      invitationTarget = `–∫–æ–º–∞–Ω–¥—É "${fullInvitation.team.name}"`;
      teamName = fullInvitation.team.name;
      // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
      if (fullInvitation.team.organization) {
        organizationName = fullInvitation.team.organization.name;
      }
    }

    const subject = `–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ ${invitationTarget} - Loginus`;
    const html = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
        <div style="text-align: center; margin-bottom: 30px;">
          <h1 style="color: #667eea; margin: 0;">Loginus</h1>
          <p style="color: #64748b; margin: 5px 0;">–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π</p>
        </div>
        
        <div style="background: #f8fafc; padding: 25px; border-radius: 12px; margin: 20px 0;">
          <h2 style="color: #1e293b; margin-top: 0;">üéâ –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏!</h2>
          <p style="color: #475569; font-size: 16px; line-height: 1.6;">
            –ü—Ä–∏–≤–µ—Ç!
          </p>
          <p style="color: #475569; font-size: 16px; line-height: 1.6;">
            <strong>${inviterName}</strong> –ø—Ä–∏–≥–ª–∞—Å–∏–ª –≤–∞—Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ ${invitationTarget} –≤ —Å–∏—Å—Ç–µ–º–µ Loginus.
          </p>
          
          <div style="background: #e2e8f0; padding: 15px; border-radius: 8px; margin: 20px 0;">
            <p style="color: #1e293b; font-weight: 600; margin: 0 0 10px 0;">–î–µ—Ç–∞–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:</p>
            <ul style="color: #475569; margin: 0; padding-left: 20px;">
              <li><strong>–ü—Ä–∏–≥–ª–∞—à–∞—é—â–∏–π:</strong> ${inviterName}</li>
              ${organizationName ? `<li><strong>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</strong> ${organizationName}</li>` : ''}
              ${teamName ? `<li><strong>–ö–æ–º–∞–Ω–¥–∞:</strong> ${teamName}</li>` : ''}
              <li><strong>Email –ø—Ä–∏–≥–ª–∞—à–∞—é—â–µ–≥–æ:</strong> ${inviterEmail}</li>
            </ul>
          </div>
        </div>

        <div style="text-align: center; margin: 30px 0;">
          <a href="${loginUrl}" 
             style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                    color: white; 
                    padding: 15px 30px; 
                    text-decoration: none; 
                    border-radius: 8px; 
                    font-weight: 600; 
                    font-size: 16px; 
                    display: inline-block;
                    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);">
            –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
          </a>
        </div>
        
        <div style="background: #fef3c7; padding: 15px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #f59e0b;">
          <p style="color: #92400e; margin: 0; font-size: 14px;">
            <strong>üí° –í–∞–∂–Ω–æ:</strong> –°—Å—ã–ª–∫–∞ –≤–µ–¥–µ—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É. –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
          </p>
        </div>

        <div style="background: #f1f5f9; padding: 20px; border-radius: 8px; margin: 20px 0;">
          <h3 style="color: #1e293b; margin-top: 0; font-size: 18px;">üìã –ß—Ç–æ –¥–∞–ª—å—à–µ?</h3>
          <ul style="color: #475569; line-height: 1.6; margin: 0; padding-left: 20px;">
            <li><strong>–ï—Å–ª–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç:</strong> –í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"</li>
            <li><strong>–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞:</strong> –í—ã –ø–µ—Ä–µ–π–¥–µ—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∞ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–∞–¥–µ—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"</li>
          </ul>
        </div>

        <div style="border-top: 1px solid #e2e8f0; padding-top: 20px; margin-top: 30px;">
          <p style="color: #64748b; font-size: 14px; margin: 5px 0;">
            <strong>‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</strong> –¥–æ ${fullInvitation.expiresAt?.toLocaleDateString('ru-RU', { 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric',
              hour: '2-digit',
              minute: '2-digit'
            })}
          </p>
          <p style="color: #64748b; font-size: 14px; margin: 5px 0;">
            <strong>üîó –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞:</strong> <a href="${loginUrl}" style="color: #667eea;">${loginUrl}</a>
          </p>
        </div>

        <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e2e8f0;">
          <p style="color: #94a3b8; font-size: 12px; margin: 0;">
            –ï—Å–ª–∏ –≤—ã –Ω–µ –æ–∂–∏–¥–∞–ª–∏ —ç—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
          </p>
        </div>
      </div>
    `;

    await this.emailService.sendEmail({
      to: fullInvitation.email,
      subject,
      html,
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–º–Ω–æ–π —Å—Å—ã–ª–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
   */
  async handleInvitationLink(token: string): Promise<{
    invitation: any;
    redirectTo: string;
    isAuthenticated: boolean;
    message: string;
  }> {
    const invitation = await this.invitationsRepo.findOne({
      where: { token },
      relations: ['organization', 'team', 'invitedBy'],
    });

    if (!invitation) {
      throw new NotFoundException('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    if (invitation.status !== InvitationStatus.PENDING) {
      throw new BadRequestException('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
    }

    if (invitation.expiresAt && invitation.expiresAt < new Date()) {
      invitation.status = InvitationStatus.EXPIRED;
      await this.invitationsRepo.save(invitation);
      throw new BadRequestException('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
    const existingUser = await this.usersService.findByEmail(invitation.email);

    const frontendUrl = this.configService.get<string>('FRONTEND_URL');

    if (existingUser) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ä–∞–∑–¥–µ–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
      return {
        invitation: {
          id: invitation.id,
          email: invitation.email,
          type: invitation.type,
          organization: invitation.organization?.name,
          team: invitation.team?.name,
          invitedBy: invitation.invitedBy?.email || '',
          expiresAt: invitation.expiresAt,
        },
        redirectTo: `${frontendUrl}/dashboard?tab=invitations&token=${token}`,
        isAuthenticated: true,
        message: '–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–∞–∑–¥–µ–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π...',
      };
    } else {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
      return {
        invitation: {
          id: invitation.id,
          email: invitation.email,
          type: invitation.type,
          organization: invitation.organization?.name,
          team: invitation.team?.name,
          invitedBy: invitation.invitedBy?.email || '',
          expiresAt: invitation.expiresAt,
        },
        redirectTo: `${frontendUrl}/register?invite=${token}`,
        isAuthenticated: false,
        message: '–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...',
      };
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (–±–µ–∑ email)
   */
  async createInternalInvitation(
    invitedById: string,
    dto: CreateInvitationDto,
  ): Promise<InvitationResponseDto> {
    // –£–±—Ä–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ - —Ç–µ–ø–µ—Ä—å –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è

    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω roleName, –Ω–∞—Ö–æ–¥–∏–º roleId –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã/–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    let roleId = dto.roleId;
    if (dto.roleName && !dto.roleId) {
      if (dto.type === InvitationType.TEAM && dto.teamId) {
        const teamRole = await this.teamRoleRepo.findOne({
          where: { name: dto.roleName, teamId: dto.teamId }
        });
        if (teamRole) {
          roleId = teamRole.id;
        } else {
          throw new BadRequestException(`–†–æ–ª—å '${dto.roleName}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–º–∞–Ω–¥–µ`);
        }
      } else if (dto.type === InvitationType.ORGANIZATION && dto.organizationId) {
        const orgRole = await this.orgRoleRepo.findOne({
          where: { name: dto.roleName, organizationId: dto.organizationId }
        });
        if (orgRole) {
          roleId = orgRole.id;
        } else {
          throw new BadRequestException(`–†–æ–ª—å '${dto.roleName}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏`);
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
    const existingUser = await this.usersRepo.findOne({ where: { email: dto.email } });
    if (existingUser) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ë–î –Ω–∞–ø—Ä—è–º—É—é
      const invitation = await this.createInvitationForExistingUser(invitedById, dto);
      
      // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º ID –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
      await this.createInvitationNotification(existingUser.id, invitedById, dto, invitation.id);
      
      return invitation;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    const existingInvitation = await this.invitationsRepo.findOne({
      where: {
        email: dto.email,
        status: InvitationStatus.PENDING,
      },
    });
    if (existingInvitation) {
      throw new BadRequestException('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ email —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    const token = crypto.randomBytes(32).toString('hex');

    // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
    const expiresInDays = dto.expiresInDays || 7;
    const expiresAt = new Date();
    expiresAt.setDate(expiresAt.getDate() + expiresInDays);

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    const invitation = this.invitationsRepo.create({
      email: dto.email,
      type: dto.type,
      organizationId: dto.organizationId,
      teamId: dto.teamId,
      role: roleId || undefined,
      invitedById,
      token,
      expiresAt,
      status: InvitationStatus.PENDING,
    });

    await this.invitationsRepo.save(invitation);

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ createInternalInvitation

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    const frontendUrl = this.configService.get<string>('FRONTEND_URL');
    const invitationLink = `${frontendUrl}/invitation?token=${token}`;

    return {
      id: invitation.id,
      email: invitation.email,
      type: invitation.type,
      organizationId: invitation.organizationId,
      teamId: invitation.teamId,
      status: invitation.status,
      role: invitation.role,
      invitedById: invitation.invitedById,
      acceptedById: invitation.acceptedById,
      token: invitation.token,
      expiresAt: invitation.expiresAt,
      acceptedAt: invitation.acceptedAt,
      createdAt: invitation.createdAt,
      updatedAt: invitation.updatedAt,
      invitationLink,
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –¥–ª—è –∫–æ–º–∞–Ω–¥—ã/–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
   */
  async getInvitationsForEntity(
    userId: string,
    type: InvitationType,
    entityId: string,
  ): Promise<InvitationResponseDto[]> {
    // –£–±—Ä–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ - —Ç–µ–ø–µ—Ä—å –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è

    const whereCondition = type === InvitationType.ORGANIZATION 
      ? { organizationId: entityId }
      : { teamId: entityId };

    const invitations = await this.invitationsRepo.find({
      where: whereCondition,
      order: { createdAt: 'DESC' },
    });

    const frontendUrl = this.configService.get<string>('FRONTEND_URL');

    return invitations.map(invitation => ({
      id: invitation.id,
      email: invitation.email,
      type: invitation.type,
      organizationId: invitation.organizationId,
      teamId: invitation.teamId,
      status: invitation.status,
      role: invitation.role,
      invitedById: invitation.invitedById,
      acceptedById: invitation.acceptedById,
      token: invitation.token,
      expiresAt: invitation.expiresAt,
      acceptedAt: invitation.acceptedAt,
      createdAt: invitation.createdAt,
      updatedAt: invitation.updatedAt,
      invitationLink: `${frontendUrl}/invitation?token=${invitation.token}`,
    }));
  }

  /**
   * –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
   */
  private async hashPassword(password: string): Promise<string> {
    const bcrypt = await import('bcrypt');
    const salt = await bcrypt.genSalt(12);
    return bcrypt.hash(password, salt);
  }

  /**
   * –ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  async acceptInvitationFromNotification(
    userId: string,
    invitationId: string,
  ): Promise<{ success: boolean; message: string }> {
    console.log(`üéØ ACCEPT_INVITATION_FROM_NOTIFICATION: userId=${userId}, invitationId=${invitationId}`);
    
    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ ID
    const invitation = await this.invitationsRepo.findOne({
      where: { id: invitationId },
      relations: ['invitedBy'],
    });

    if (!invitation) {
      console.log(`‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ${invitationId}`);
      throw new NotFoundException('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    console.log(`üìß –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: ${invitation.email}, teamId: ${invitation.teamId}, roleId: ${invitation.role}`);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await this.usersRepo.findOne({ where: { id: userId } });
    if (!user) {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: ${userId}`);
      throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    console.log(`üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é/–∫–æ–º–∞–Ω–¥—É
    let alreadyMember = false;
    if (invitation.organizationId) {
      const existingOrgMembership = await this.orgMembershipRepo.findOne({
        where: {
          userId: user.id,
          organizationId: invitation.organizationId
        }
      });
      alreadyMember = !!existingOrgMembership;
    } else if (invitation.teamId) {
      const existingTeamMembership = await this.teamMembershipRepo.findOne({
        where: {
          userId: user.id,
          teamId: invitation.teamId
        }
      });
      alreadyMember = !!existingTeamMembership;
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞)
    if (alreadyMember) {
      console.log(`‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —á–ª–µ–Ω–æ–º`);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ ACCEPTED
      if (invitation.status !== InvitationStatus.ACCEPTED) {
        invitation.status = InvitationStatus.ACCEPTED;
        invitation.acceptedById = user.id;
        invitation.acceptedAt = new Date();
        await this.invitationsRepo.save(invitation);
      }
      return { 
        success: true, 
        message: `–í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ ${invitation.type === InvitationType.TEAM ? '–∫–æ–º–∞–Ω–¥–µ' : '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'}` 
      };
    }

    // –ï—Å–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ PENDING –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω - —ç—Ç–æ –æ—à–∏–±–∫–∞
    if (invitation.status !== InvitationStatus.PENDING) {
      console.log(`‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${invitation.status}`);
      throw new BadRequestException('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
    }

    if (invitation.expiresAt && invitation.expiresAt < new Date()) {
      invitation.status = InvitationStatus.EXPIRED;
      await this.invitationsRepo.save(invitation);
      console.log(`‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ`);
      throw new BadRequestException('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ');
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É memberships
    if (invitation.organizationId) {
      console.log(`üè¢ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é: ${invitation.organizationId}`);
      
      // –î–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º roleId –Ω–∞–ø—Ä—è–º—É—é, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
      let roleId: string | null = invitation.role || null;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
      if (roleId) {
        const orgRole = await this.orgRoleRepo.findOne({
          where: { 
            id: roleId,
            organizationId: invitation.organizationId
          }
        });
        
        if (!orgRole) {
          console.log(`‚ö†Ô∏è Role ${roleId} does not belong to org ${invitation.organizationId}, using default`);
          roleId = null;
        } else {
          console.log(`‚úÖ Found org role: ${orgRole.name} for org ${invitation.organizationId}`);
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ä–æ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      if (!roleId) {
        const defaultRole = await this.orgRoleRepo.findOne({
          where: { 
            organizationId: invitation.organizationId,
            name: 'member'
          }
        });
        roleId = defaultRole?.id || null;
        console.log(`üîç Using default 'member' role for org ${invitation.organizationId}: ${roleId ? 'found' : 'not found'}`);
      }

      if (roleId) {
        const orgMembership = this.orgMembershipRepo.create({
          userId: user.id,
          organizationId: invitation.organizationId,
          roleId: roleId,
          invitedBy: invitation.invitedById,
        });
        await this.orgMembershipRepo.save(orgMembership);
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —Å —Ä–æ–ª—å—é ${roleId}`);
      } else {
        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ä–æ–ª—å –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏`);
      }
    }
    
    if (invitation.teamId) {
      console.log(`üë• –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–∞–Ω–¥—É: ${invitation.teamId}`);
      
      // –î–ª—è –∫–æ–º–∞–Ω–¥—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º roleId –Ω–∞–ø—Ä—è–º—É—é, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ID –∫–æ–º–∞–Ω–¥—ã
      let roleId: string | null = invitation.role || null;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ
      if (roleId) {
        const teamRole = await this.teamRoleRepo.findOne({
          where: { 
            id: roleId,
            teamId: invitation.teamId
          }
        });
        
        if (!teamRole) {
          console.log(`‚ö†Ô∏è Role ${roleId} does not belong to team ${invitation.teamId}, using default`);
          roleId = null;
        } else {
          console.log(`‚úÖ Found team role: ${teamRole.name} for team ${invitation.teamId}`);
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ä–æ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      if (!roleId) {
        const defaultRole = await this.teamRoleRepo.findOne({
          where: { 
            teamId: invitation.teamId,
            name: 'member'
          }
        });
        roleId = defaultRole?.id || null;
        console.log(`üîç Using default 'member' role for team ${invitation.teamId}: ${roleId ? 'found' : 'not found'}`);
      }

      if (roleId) {
        const teamMembership = this.teamMembershipRepo.create({
          userId: user.id,
          teamId: invitation.teamId,
          roleId: roleId,
          invitedBy: invitation.invitedById,
        });
        await this.teamMembershipRepo.save(teamMembership);
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É —Å —Ä–æ–ª—å—é ${roleId}`);
      } else {
        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ä–æ–ª—å –¥–ª—è –∫–æ–º–∞–Ω–¥—ã`);
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    invitation.status = InvitationStatus.ACCEPTED;
    invitation.acceptedById = user.id;
    invitation.acceptedAt = new Date();
    await this.invitationsRepo.save(invitation);

    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ
    await this.notificationsService.createNotification(
      invitation.invitedById,
      NotificationType.INVITATION,
      '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ',
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} –ø—Ä–∏–Ω—è–ª –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ ${invitation.type === InvitationType.TEAM ? '–∫–æ–º–∞–Ω–¥—É' : '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é'}`,
      {
        invitationId: invitation.id,
        acceptedBy: user.email,
        type: invitation.type === InvitationType.TEAM ? 'team' : 'organization',
        status: 'accepted'
      }
    );

    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–Ω—è–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–æ–º, —á—Ç–æ –æ–Ω –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è
    await this.notificationsService.createNotification(
      user.id,
      NotificationType.INVITATION,
      '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ',
      `–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ ${invitation.type === InvitationType.TEAM ? '–∫–æ–º–∞–Ω–¥–µ' : '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'}`,
      {
        invitationId: invitation.id,
        type: invitation.type === InvitationType.TEAM ? 'team' : 'organization',
        status: 'accepted'
      }
    );

    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} –ø—Ä–∏–Ω—è–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç ${invitation.invitedBy.email}`);

    return { 
      success: true, 
      message: `–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ ${invitation.type === InvitationType.TEAM ? '–∫–æ–º–∞–Ω–¥–µ' : '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'}` 
    };
  }

  /**
   * –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  async declineInvitationFromNotification(
    userId: string,
    invitationId: string,
  ): Promise<{ success: boolean; message: string }> {
    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ ID
    const invitation = await this.invitationsRepo.findOne({
      where: { id: invitationId },
    });

    if (!invitation) {
      throw new NotFoundException('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    if (invitation.status !== InvitationStatus.PENDING) {
      throw new BadRequestException('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const user = await this.usersRepo.findOne({ where: { id: userId } });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    invitation.status = InvitationStatus.DECLINED;
    invitation.acceptedById = userId;
    invitation.acceptedAt = new Date();
    await this.invitationsRepo.save(invitation);

    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ
    if (user) {
      await this.notificationsService.createNotification(
        invitation.invitedById,
        NotificationType.INVITATION,
        '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ',
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ ${invitation.type === InvitationType.TEAM ? '–∫–æ–º–∞–Ω–¥—É' : '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é'}`,
        {
          invitationId: invitation.id,
          declinedBy: user.email,
          type: invitation.type === InvitationType.TEAM ? 'team' : 'organization',
          status: 'declined'
        }
      );

      // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.notificationsService.createNotification(
        user.id,
        NotificationType.INVITATION,
        '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ',
        `–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ ${invitation.type === InvitationType.TEAM ? '–∫–æ–º–∞–Ω–¥—É' : '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é'}`,
        {
          invitationId: invitation.id,
          type: invitation.type === InvitationType.TEAM ? 'team' : 'organization',
          status: 'declined'
        }
      );
    }

    console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ ${invitationId}`);

    return { 
      success: true, 
      message: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ' 
    };
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
   */
  async updateInvitationStatus(
    invitationId: string,
    status: InvitationStatus,
    acceptedById?: string,
  ): Promise<void> {
    const invitation = await this.invitationsRepo.findOne({
      where: { id: invitationId },
    });

    if (!invitation) {
      throw new NotFoundException('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    invitation.status = status;
    if (acceptedById) {
      invitation.acceptedById = acceptedById;
      invitation.acceptedAt = new Date();
    }
    
    await this.invitationsRepo.save(invitation);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ)
   */
  private async createInvitationForExistingUser(
    invitedById: string,
    dto: CreateInvitationDto,
  ): Promise<InvitationResponseDto> {
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω roleName, –Ω–∞—Ö–æ–¥–∏–º roleId –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã/–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    let roleId = dto.roleId;
    if (dto.roleName && !dto.roleId) {
      if (dto.type === InvitationType.TEAM && dto.teamId) {
        const teamRole = await this.teamRoleRepo.findOne({
          where: { name: dto.roleName, teamId: dto.teamId }
        });
        if (teamRole) {
          roleId = teamRole.id;
        } else {
          throw new BadRequestException(`–†–æ–ª—å '${dto.roleName}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–º–∞–Ω–¥–µ`);
        }
      } else if (dto.type === InvitationType.ORGANIZATION && dto.organizationId) {
        const orgRole = await this.orgRoleRepo.findOne({
          where: { name: dto.roleName, organizationId: dto.organizationId }
        });
        if (orgRole) {
          roleId = orgRole.id;
        } else {
          throw new BadRequestException(`–†–æ–ª—å '${dto.roleName}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏`);
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    const existingInvitation = await this.invitationsRepo.findOne({
      where: {
        email: dto.email,
        status: InvitationStatus.PENDING,
      },
    });
    if (existingInvitation) {
      throw new BadRequestException('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ email —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    const token = crypto.randomBytes(32).toString('hex');

    // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
    const expiresInDays = dto.expiresInDays || 7;
    const expiresAt = new Date();
    expiresAt.setDate(expiresAt.getDate() + expiresInDays);

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    const invitation = this.invitationsRepo.create({
      email: dto.email,
      type: dto.type,
      organizationId: dto.organizationId,
      teamId: dto.teamId,
      role: roleId || undefined,
      invitedById,
      token,
      expiresAt,
      status: InvitationStatus.PENDING,
    });

    await this.invitationsRepo.save(invitation);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞
    // await this.sendInvitationEmail(invitation, invitedById);
    console.log('‚ÑπÔ∏è Email sending disabled (invitation created)');

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    const frontendUrl = this.configService.get<string>('FRONTEND_URL');
    const invitationLink = `${frontendUrl}/invitation?token=${token}`;

    return {
      id: invitation.id,
      email: invitation.email,
      type: invitation.type,
      organizationId: invitation.organizationId,
      teamId: invitation.teamId,
      status: invitation.status,
      role: invitation.role,
      invitedById: invitation.invitedById,
      acceptedById: invitation.acceptedById,
      token: invitation.token,
      expiresAt: invitation.expiresAt,
      acceptedAt: invitation.acceptedAt,
      createdAt: invitation.createdAt,
      updatedAt: invitation.updatedAt,
      invitationLink,
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ email –∏–∑ GitHub –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async getRealEmailFromGitHub(user: User): Promise<string | null> {
    try {
      console.log(`üîç getRealEmailFromGitHub called for user: ${user.email}`);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å email –∏–∑ oauthMetadata, –µ—Å–ª–∏ –µ—Å—Ç—å accessToken
      if (user.oauthMetadata?.github?.accessToken) {
        const accessToken = user.oauthMetadata.github.accessToken;
        console.log(`üîç Found accessToken, length: ${accessToken.length}`);
        
        try {
          // –ü—Ä–æ–±—É–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Å—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π)
          let response = await fetch('https://api.github.com/user/emails', {
            headers: {
              'Authorization': `Bearer ${accessToken}`,
              'Accept': 'application/vnd.github.v3+json',
            },
          });

          // –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ —Å Bearer, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
          if (!response.ok && response.status === 401) {
            console.log(`‚ö†Ô∏è Bearer format failed, trying token format...`);
            response = await fetch('https://api.github.com/user/emails', {
              headers: {
                'Authorization': `token ${accessToken}`,
                'Accept': 'application/vnd.github.v3+json',
              },
            });
          }

          if (response.ok) {
            const emailData = await response.json();
            console.log(`üîç GitHub API returned ${emailData.length} emails`);
            const primaryEmail = emailData.find((email: any) => email.primary)?.email;
            if (primaryEmail) {
              console.log(`‚úÖ Got real email from GitHub API: ${primaryEmail}`);
              return primaryEmail;
            } else {
              // –ï—Å–ª–∏ primary –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π verified email
              const verifiedEmail = emailData.find((email: any) => email.verified)?.email;
              if (verifiedEmail) {
                console.log(`‚úÖ Got verified email from GitHub API: ${verifiedEmail}`);
                return verifiedEmail;
              }
            }
          } else {
            const errorText = await response.text();
            console.warn(`‚ö†Ô∏è GitHub API returned ${response.status}: ${response.statusText}, body: ${errorText}`);
          }
        } catch (error) {
          console.warn(`‚ö†Ô∏è Error fetching email from GitHub API:`, error.message);
          console.warn(`‚ö†Ô∏è Error stack:`, error.stack);
        }
      } else {
        console.log(`‚ö†Ô∏è No accessToken found in oauthMetadata for user ${user.email}`);
      }
      
      return null;
    } catch (error) {
      console.error('Error in getRealEmailFromGitHub:', error);
      return null;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async createInvitationNotification(
    userId: string,
    invitedById: string,
    dto: CreateInvitationDto,
    invitationId?: string,
  ): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingNotifications = await this.notificationsService.getUserNotifications(userId);
    const hasActiveInvitation = existingNotifications.some(notification => 
      notification.type === NotificationType.INVITATION && 
      notification.data?.type === (dto.type === InvitationType.TEAM ? 'team' : 'organization') &&
      !notification.isRead
    );

    if (hasActiveInvitation) {
      console.log('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–∞');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≥–ª–∞—à–∞—é—â–µ–º
    const inviter = await this.usersRepo.findOne({ where: { id: invitedById } });
    const inviterName = inviter ? `${inviter.firstName || ''} ${inviter.lastName || ''}`.trim() || inviter.email : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ/–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    let teamName: string | undefined;
    let organizationName: string | undefined;

    if (dto.type === InvitationType.TEAM && dto.teamId) {
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const team = await this.teamsRepo.findOne({ where: { id: dto.teamId } });
      teamName = team?.name || '–ö–æ–º–∞–Ω–¥–∞';
    }

    if (dto.type === InvitationType.ORGANIZATION && dto.organizationId) {
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const organization = await this.organizationsRepo.findOne({ where: { id: dto.organizationId } });
      organizationName = organization?.name || '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è';
    }

    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await this.notificationsService.createInvitationNotification(userId, {
      invitationId: invitationId || 'internal-invitation', // ID –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏–ª–∏ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö
      inviterName: inviterName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
      teamName,
      organizationName,
      type: dto.type === InvitationType.TEAM ? 'team' : 'organization',
    });
  }

}