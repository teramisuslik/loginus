import { Controller, Post, Get, Delete, Body, Param, UseGuards, Query } from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth } from '@nestjs/swagger';
import { InvitationsService } from './invitations.service';
import { CreateInvitationDto } from './dto/create-invitation.dto';
import { AcceptInvitationDto } from './dto/accept-invitation.dto';
import { InvitationResponseDto } from './dto/invitation-response.dto';
import { InvitationType } from './entities/invitation.entity';
import { JwtAuthGuard } from '../../guards/jwt-auth.guard';
import { CurrentUser } from '../../decorators/current-user.decorator';
import { RequirePermissions } from '../../decorators/permissions.decorator';
import { Public } from '../../decorators/public.decorator';

@ApiTags('invitations')
@Controller('invitations')
@UseGuards(JwtAuthGuard)
@ApiBearerAuth()
export class InvitationsController {
  constructor(private invitationsService: InvitationsService) {}

  @Post()
  @ApiOperation({ summary: '–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (—Å email)' })
  @ApiResponse({ status: 201, description: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ', type: InvitationResponseDto })
  @ApiResponse({ status: 403, description: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' })
  @ApiResponse({ status: 400, description: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' })
  async createInvitation(
    @CurrentUser() user: any,
    @Body() dto: CreateInvitationDto,
  ): Promise<InvitationResponseDto> {
    return this.invitationsService.createInvitation(user.userId, dto);
  }

  @Post('internal')
  @ApiOperation({ summary: '–°–æ–∑–¥–∞—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–±–µ–∑ email)' })
  @ApiResponse({ status: 201, description: '–í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ', type: InvitationResponseDto })
  @ApiResponse({ status: 403, description: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' })
  @ApiResponse({ status: 400, description: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' })
  async createInternalInvitation(
    @CurrentUser() user: any,
    @Body() dto: CreateInvitationDto,
  ): Promise<InvitationResponseDto> {
    return this.invitationsService.createInternalInvitation(user.userId, dto);
  }

  @Get('handle')
  @ApiOperation({ summary: '–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–º–Ω–æ–π —Å—Å—ã–ª–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è' })
  @ApiResponse({ status: 200, description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏' })
  @ApiResponse({ status: 404, description: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' })
  @ApiResponse({ status: 400, description: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ' })
  async handleInvitationLink(
    @Query('token') token: string,
  ): Promise<{ 
    invitation: any; 
    redirectTo: string; 
    isAuthenticated: boolean;
    message: string;
  }> {
    return this.invitationsService.handleInvitationLink(token);
  }

  @Post('accept')
  @Public()
  @ApiOperation({ summary: '–ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ' })
  @ApiResponse({ status: 200, description: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ' })
  @ApiResponse({ status: 404, description: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' })
  @ApiResponse({ status: 400, description: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ' })
  async acceptInvitation(@Body() dto: AcceptInvitationDto): Promise<{ success: boolean; userId?: string }> {
    return this.invitationsService.acceptInvitation(dto);
  }

  @Get('my')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å –º–æ–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è' })
  @ApiResponse({ status: 200, description: '–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π', type: [InvitationResponseDto] })
  async getMyInvitations(@CurrentUser() user: any): Promise<InvitationResponseDto[]> {
    return this.invitationsService.getUserInvitations(user.userId);
  }

  @Get('sent')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è' })
  @ApiResponse({ status: 200, description: '–°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π', type: [InvitationResponseDto] })
  async getSentInvitations(@CurrentUser() user: any): Promise<InvitationResponseDto[]> {
    return this.invitationsService.getSentInvitations(user.userId);
  }

  @Get('entity/:type/:id')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã/–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏' })
  @ApiResponse({ status: 200, description: '–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π', type: [InvitationResponseDto] })
  @ApiResponse({ status: 403, description: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' })
  async getInvitationsForEntity(
    @CurrentUser() user: any,
    @Param('type') type: 'team' | 'organization',
    @Param('id') entityId: string,
  ): Promise<InvitationResponseDto[]> {
    const invitationType = type === 'team' ? InvitationType.TEAM : InvitationType.ORGANIZATION;
    return this.invitationsService.getInvitationsForEntity(user.userId, invitationType, entityId);
  }

  @Delete(':id')
  @ApiOperation({ summary: '–û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ' })
  @ApiResponse({ status: 200, description: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ' })
  @ApiResponse({ status: 404, description: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' })
  @ApiResponse({ status: 400, description: '–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ' })
  async cancelInvitation(
    @CurrentUser() user: any,
    @Param('id') invitationId: string,
  ): Promise<{ message: string }> {
    await this.invitationsService.cancelInvitation(user.userId, invitationId);
    return { message: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ' };
  }

  @Post('accept-notification/:id')
  @ApiOperation({ summary: '–ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ' })
  @ApiResponse({ status: 200, description: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ' })
  @ApiResponse({ status: 404, description: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' })
  @ApiResponse({ status: 400, description: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ' })
  async acceptInvitationFromNotification(
    @CurrentUser() user: any,
    @Param('id') invitationId: string,
  ): Promise<{ success: boolean; message: string }> {
    console.log(`üéØ CONTROLLER: acceptInvitationFromNotification called with userId=${user.userId}, invitationId=${invitationId}`);
    return this.invitationsService.acceptInvitationFromNotification(user.userId, invitationId);
  }

  @Post('decline-notification/:id')
  @ApiOperation({ summary: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ' })
  @ApiResponse({ status: 200, description: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ' })
  @ApiResponse({ status: 404, description: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' })
  @ApiResponse({ status: 400, description: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ' })
  async declineInvitationFromNotification(
    @CurrentUser() user: any,
    @Param('id') invitationId: string,
  ): Promise<{ success: boolean; message: string }> {
    return this.invitationsService.declineInvitationFromNotification(user.userId, invitationId);
  }
}