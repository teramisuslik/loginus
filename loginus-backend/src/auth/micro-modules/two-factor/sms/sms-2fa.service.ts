import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, MoreThan } from 'typeorm';
import { TwoFactorCode } from '../../../entities/two-factor-code.entity';
import { User } from '../../../../users/entities/user.entity';
import { SmsService } from '../../../sms.service';

@Injectable()
export class SmsTwoFactorService {
  constructor(
    @InjectRepository(TwoFactorCode)
    private twoFactorCodeRepo: Repository<TwoFactorCode>,
    @InjectRepository(User)
    private userRepo: Repository<User>,
    private smsService: SmsService,
  ) {}

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ 2FA –∫–æ–¥–∞ –Ω–∞ SMS
   */
  async sendSmsCode(userId: string, phone: string): Promise<{ success: boolean; message: string }> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
      const canSend = await this.checkRateLimit(userId, 'sms');
      if (!canSend) {
        return {
          success: false,
          message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        };
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
      const code = this.generateCode();
      const expiresAt = new Date(Date.now() + 10 * 60 * 1000); // 10 –º–∏–Ω—É—Ç

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥
      await this.twoFactorCodeRepo.save({
        userId,
        code,
        type: 'sms' as any,
        expiresAt,
        contact: phone,
        status: 'pending' as any,
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS
      const smsResult = await this.smsService.sendSmsMessage(phone, `–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${code}`);
      
      if (!smsResult.success) {
        return {
          success: false,
          message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS',
        };
      }

      console.log(`üì± 2FA –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ SMS: ${phone}`);

      return {
        success: true,
        message: '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ SMS',
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ 2FA –∫–æ–¥–∞ –Ω–∞ SMS:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞',
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ 2FA –∫–æ–¥–∞
   */
  async verifySmsCode(userId: string, code: string): Promise<{ success: boolean; message: string }> {
    try {
      const codeRecord = await this.twoFactorCodeRepo.findOne({
        where: {
          userId,
          code,
          type: 'sms' as any,
          status: 'pending' as any,
        },
      });

      if (!codeRecord) {
        return {
          success: false,
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥',
        };
      }

      if (codeRecord.expiresAt < new Date()) {
        return {
          success: false,
          message: '–ö–æ–¥ –∏—Å—Ç–µ–∫',
        };
      }

      // –û—Ç–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
      await this.twoFactorCodeRepo.update(codeRecord.id, { status: 'used' as any });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.userRepo.update(userId, { phoneVerified: true });

      console.log(`‚úÖ SMS 2FA –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

      return {
        success: true,
        message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ 2FA –∫–æ–¥–∞:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞',
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
   */
  private async checkRateLimit(userId: string, method: string): Promise<boolean> {
    const oneMinuteAgo = new Date(Date.now() - 60 * 1000);
    
    const recentCodes = await this.twoFactorCodeRepo.count({
      where: {
        userId,
        type: method as any,
        createdAt: MoreThan(oneMinuteAgo),
      },
    });

    return recentCodes < 3; // –ú–∞–∫—Å–∏–º—É–º 3 –∫–æ–¥–∞ –≤ –º–∏–Ω—É—Ç—É
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 6-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞
   */
  private generateCode(): string {
    return Math.floor(100000 + Math.random() * 900000).toString();
  }
}
