import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, MoreThan } from 'typeorm';
import { TwoFactorCode, TwoFactorType } from '../../../entities/two-factor-code.entity';
import { User } from '../../../../users/entities/user.entity';
import { EmailService } from '../../../email.service';
import { AuthMethodType } from '../../../enums/auth-method-type.enum';

@Injectable()
export class GitHubTwoFactorService {
  constructor(
    @InjectRepository(TwoFactorCode)
    private twoFactorCodeRepo: Repository<TwoFactorCode>,
    @InjectRepository(User)
    private userRepo: Repository<User>,
    private emailService: EmailService,
  ) {}

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ 2FA –∫–æ–¥–∞ –Ω–∞ email –∏–∑ GitHub –ø—Ä–æ—Ñ–∏–ª—è
   * –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ email –∏–∑ GitHub –ø—Ä–æ—Ñ–∏–ª—è (oauthMetadata.github)
   */
  async sendGitHubCode(userId: string): Promise<{ success: boolean; message: string }> {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await this.userRepo.findOne({
        where: { id: userId },
      });

      if (!user) {
        return {
          success: false,
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ GITHUB –º–µ—Ç–æ–¥ –ø—Ä–∏–≤—è–∑–∞–Ω
      const hasGitHubMethod = user.availableAuthMethods?.includes(AuthMethodType.GITHUB) || false;
      if (!hasGitHubMethod) {
        return {
          success: false,
          message: 'GitHub –º–µ—Ç–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É',
        };
      }

      // –ü–æ–ª—É—á–∞–µ–º email –∏–∑ GitHub –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ oauthMetadata
      let githubEmail: string | null = null;

      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å email –∏–∑ oauthMetadata.github
      if (user.oauthMetadata?.github) {
        const githubMetadata = user.oauthMetadata.github;
        
        // –ï—Å–ª–∏ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å accessToken, –ø–æ–ª—É—á–∞–µ–º email —á–µ—Ä–µ–∑ GitHub API
        if (githubMetadata.accessToken) {
          try {
            console.log(`üîç [sendGitHubCode] –ü–æ–ª—É—á–∞–µ–º email —á–µ—Ä–µ–∑ GitHub API –¥–ª—è userId ${userId}`);
            const emailData = await this.getGitHubEmails(githubMetadata.accessToken);
            console.log(`üîç [sendGitHubCode] GitHub API –≤–µ—Ä–Ω—É–ª ${emailData.length} email(–æ–≤)`);
            
            // –ò—â–µ–º primary email
            const primaryEmail = emailData.find((email: any) => email.primary)?.email;
            if (primaryEmail) {
              githubEmail = primaryEmail;
              console.log(`‚úÖ [sendGitHubCode] –ù–∞–π–¥–µ–Ω primary email: ${primaryEmail}`);
            } else {
              // –ï—Å–ª–∏ primary –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π verified email
              const verifiedEmail = emailData.find((email: any) => email.verified)?.email;
              if (verifiedEmail) {
                githubEmail = verifiedEmail;
                console.log(`‚úÖ [sendGitHubCode] –ù–∞–π–¥–µ–Ω verified email: ${verifiedEmail}`);
              } else {
                // –ï—Å–ª–∏ verified —Ç–æ–∂–µ –Ω–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π email
                const firstEmail = emailData[0]?.email;
                if (firstEmail) {
                  githubEmail = firstEmail;
                  console.log(`‚ö†Ô∏è [sendGitHubCode] –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π email (–Ω–µ verified): ${firstEmail}`);
                }
              }
            }
          } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å email —á–µ—Ä–µ–∑ GitHub API:', error);
            console.warn('‚ö†Ô∏è Error details:', error.message || error);
          }
        } else {
          console.warn(`‚ö†Ô∏è [sendGitHubCode] accessToken –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ oauthMetadata.github –¥–ª—è userId ${userId}`);
        }
      } else {
        console.warn(`‚ö†Ô∏è [sendGitHubCode] oauthMetadata.github –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è userId ${userId}`);
      }

      // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ email —á–µ—Ä–µ–∑ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º email –∏–∑ user.email (–µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—Å–µ–≤–¥–æ-email)
      if (!githubEmail && user.email && !user.email.includes('@github.local')) {
        githubEmail = user.email;
        console.log(`‚úÖ [sendGitHubCode] –ò—Å–ø–æ–ª—å–∑—É–µ–º email –∏–∑ user.email: ${githubEmail}`);
      }

      // –ï—Å–ª–∏ email –≤—Å–µ –µ—â–µ –ø—Å–µ–≤–¥–æ-email, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π
      if (githubEmail && githubEmail.includes('@github.local')) {
        console.warn(`‚ö†Ô∏è [sendGitHubCode] –ü–æ–ª—É—á–µ–Ω –ø—Å–µ–≤–¥–æ-email ${githubEmail}, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —á–µ—Ä–µ–∑ API`);
        if (user.oauthMetadata?.github?.accessToken) {
          try {
            const emailData = await this.getGitHubEmails(user.oauthMetadata.github.accessToken);
            const realEmail = emailData.find((email: any) => email.verified)?.email || emailData.find((email: any) => email.primary)?.email || emailData[0]?.email;
            if (realEmail && !realEmail.includes('@github.local')) {
              githubEmail = realEmail;
              // –û–±–Ω–æ–≤–ª—è–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
              user.email = realEmail;
              await this.userRepo.save(user);
              console.log(`‚úÖ [sendGitHubCode] –û–±–Ω–æ–≤–ª–µ–Ω email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π: ${realEmail}`);
            }
          } catch (error) {
            console.error('‚ùå [sendGitHubCode] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ email:', error);
          }
        }
      }

      if (!githubEmail || githubEmail.includes('@github.local')) {
        console.error(`‚ùå [sendGitHubCode] Email –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Å–µ–≤–¥–æ-email –¥–ª—è userId ${userId}, user.email=${user.email}`);
        return {
          success: false,
          message: 'Email –∏–∑ GitHub –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ GitHub –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∏ email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –Ω–∞ GitHub.',
        };
      }

      // –í–ê–ñ–ù–û: –î–ª—è nFA –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–æ–≤, —Ç–∞–∫ –∫–∞–∫ –∫–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
      // Rate limit –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω–æ–π 2FA (–Ω–µ nFA)
      // –î–ª—è nFA –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ –∫–æ–¥–æ–≤, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —á–∞—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—Ö–æ–¥–∞

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
      const code = this.generateCode();
      const expiresAt = new Date(Date.now() + 10 * 60 * 1000); // 10 –º–∏–Ω—É—Ç

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–æ–º GITHUB
      await this.twoFactorCodeRepo.save({
        userId,
        code,
        type: TwoFactorType.GITHUB,
        expiresAt,
        contact: githubEmail,
        status: 'pending' as any,
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å –∫–æ–¥–æ–º –Ω–∞ email –∏–∑ GitHub –ø—Ä–æ—Ñ–∏–ª—è
      console.log(`üìß [sendGitHubCode] –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ email: ${githubEmail}`);
      try {
        await this.emailService.sendVerificationCode(githubEmail, code, 'github');
        console.log(`‚úÖ [sendGitHubCode] Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${githubEmail}`);
      } catch (emailError) {
        console.error(`‚ùå [sendGitHubCode] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: ${emailError.message}`);
        // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –∫–æ–¥ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        return {
          success: false,
          message: `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: ${emailError.message}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP —Å–µ—Ä–≤–µ—Ä–∞.`,
        };
      }

      return {
        success: true,
        message: '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email –∏–∑ GitHub –ø—Ä–æ—Ñ–∏–ª—è',
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ 2FA –∫–æ–¥–∞ –Ω–∞ GitHub email:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞',
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ 2FA –∫–æ–¥–∞
   */
  async verifyGitHubCode(userId: string, code: string): Promise<{ success: boolean; message: string }> {
    try {
      const codeRecord = await this.twoFactorCodeRepo.findOne({
        where: {
          userId,
          code,
          type: TwoFactorType.GITHUB,
          status: 'pending' as any,
        },
      });

      if (!codeRecord) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
        const allCodes = await this.twoFactorCodeRepo.find({
          where: {
            userId,
            code,
            type: TwoFactorType.GITHUB,
          },
          order: { verifiedAt: 'DESC' },
        });
        
        if (allCodes.length > 0) {
          const foundCode = allCodes[0];
          
          if (foundCode.status === 'used') {
            // –ï—Å–ª–∏ –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –Ω–µ–¥–∞–≤–Ω–æ (–≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç), —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –≤–∞–ª–∏–¥–Ω—ã–º –¥–ª—è nFA
            const tenMinutesAgo = new Date(Date.now() - 10 * 60 * 1000);
            if (foundCode.verifiedAt && foundCode.verifiedAt > tenMinutesAgo) {
              console.log(`‚úÖ [verifyGitHubCode] –ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω, –Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –Ω–µ–¥–∞–≤–Ω–æ - —Ä–∞–∑—Ä–µ—à–∞–µ–º`);
              return {
                success: true,
                message: '–ö–æ–¥ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
              };
            }
            return {
              success: false,
              message: '–ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω',
            };
          }
        }
        
        return {
          success: false,
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥',
        };
      }

      if (codeRecord.expiresAt < new Date()) {
        return {
          success: false,
          message: '–ö–æ–¥ –∏—Å—Ç–µ–∫',
        };
      }

      // –û—Ç–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      await this.twoFactorCodeRepo.update(codeRecord.id, { 
        status: 'used' as any,
        verifiedAt: new Date()
      });

      console.log(`‚úÖ GitHub 2FA –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

      return {
        success: true,
        message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ 2FA –∫–æ–¥–∞:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞',
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ email –∏–∑ GitHub —á–µ—Ä–µ–∑ API
   */
  private async getGitHubEmails(accessToken: string): Promise<any[]> {
    try {
      // –ü—Ä–æ–±—É–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (Bearer –∏ token)
      let response = await fetch('https://api.github.com/user/emails', {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Accept': 'application/vnd.github.v3+json',
        },
      });

      // –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ —Å Bearer, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç token
      if (!response.ok && response.status === 401) {
        console.log(`‚ö†Ô∏è Bearer format failed, trying token format...`);
        response = await fetch('https://api.github.com/user/emails', {
        headers: {
          'Authorization': `token ${accessToken}`,
          'Accept': 'application/vnd.github.v3+json',
        },
      });
      }

      if (!response.ok) {
        const errorText = await response.text().catch(() => 'Unknown error');
        throw new Error(`GitHub API error: ${response.status} ${response.statusText} - ${errorText}`);
      }

      return await response.json();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è email –∏–∑ GitHub:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
   * –£–ë–†–ê–ù–û –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è nFA - –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–¥–æ–≤
   * –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Ç–æ–º—É —á—Ç–æ –ø—Ä–∏ nFA –∫–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
   */
  private async checkRateLimit(userId: string, method: string): Promise<boolean> {
    // –î–ª—è nFA –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true –≤—Å–µ–≥–¥–∞
    // Rate limit –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω–æ–π 2FA, –Ω–æ –≤ nFA —ç—Ç–æ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ
    return true;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 6-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞
   */
  private generateCode(): string {
    return Math.floor(100000 + Math.random() * 900000).toString();
  }
}
