import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, MoreThan } from 'typeorm';
import { TwoFactorCode } from '../../../entities/two-factor-code.entity';
import { User } from '../../../../users/entities/user.entity';
import { EmailService } from '../../../email.service';
import { JwtService } from '@nestjs/jwt';
import { v4 as uuidv4 } from 'uuid';
import { RefreshToken } from '../../../entities/refresh-token.entity';
import { ConfigService } from '@nestjs/config';
import * as crypto from 'crypto';
import { AuthMethodType } from '../../../enums/auth-method-type.enum';

@Injectable()
export class EmailTwoFactorService {
  constructor(
    @InjectRepository(TwoFactorCode)
    private twoFactorCodeRepo: Repository<TwoFactorCode>,
    @InjectRepository(User)
    private userRepo: Repository<User>,
    @InjectRepository(RefreshToken)
    private refreshTokenRepo: Repository<RefreshToken>,
    private emailService: EmailService,
    private jwtService: JwtService,
    private configService: ConfigService,
  ) {}

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ 2FA –∫–æ–¥–∞ –Ω–∞ email
   * –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ email, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤—è–∑–∞–Ω –∫ EMAIL –º–µ—Ç–æ–¥—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  async sendEmailCode(userId: string, email?: string): Promise<{ success: boolean; message: string }> {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await this.userRepo.findOne({
        where: { id: userId },
      });

      if (!user) {
        return {
          success: false,
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ EMAIL –º–µ—Ç–æ–¥ –ø—Ä–∏–≤—è–∑–∞–Ω
      const hasEmailMethod = user.availableAuthMethods?.includes(AuthMethodType.EMAIL) || false;
      if (!hasEmailMethod) {
        return {
          success: false,
          message: 'EMAIL –º–µ—Ç–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É',
        };
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º email –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤—è–∑–∞–Ω –∫ EMAIL –º–µ—Ç–æ–¥—É)
      const userEmail = user.email;
      
      // –í–ê–ñ–ù–û: –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ OAuth, email –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Å–µ–≤–¥–æ-email (@telegram.local, @github.local)
      // –î–ª—è nFA –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ä–µ–∞–ª—å–Ω—ã–π email - –ø—Ä–æ–±—É–µ–º GitHub API –µ—Å–ª–∏ –µ—Å—Ç—å accessToken
      let targetEmail = userEmail;
      let isPseudoEmail = userEmail?.includes('@telegram.local') || userEmail?.includes('@github.local') || !user.emailVerified;
      
      if (isPseudoEmail) {
        console.log(`üìß –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Å–µ–≤–¥–æ-email –∏–ª–∏ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π email: ${userEmail}, –∏—â–µ–º —Ä–µ–∞–ª—å–Ω—ã–π email`);
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π email –∏–∑ GitHub –µ—Å–ª–∏ –µ—Å—Ç—å accessToken
        const githubMetadata = (user.oauthMetadata as any)?.github;
        if (githubMetadata?.accessToken) {
          try {
            console.log(`üìß –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å email —á–µ—Ä–µ–∑ GitHub API –¥–ª—è userId ${userId}`);
            const response = await fetch('https://api.github.com/user/emails', {
              headers: {
                'Authorization': `Bearer ${githubMetadata.accessToken}`,
                'Accept': 'application/vnd.github.v3+json',
              },
            });
            
            if (!response.ok && response.status === 401) {
              // –ü—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
              const retryResponse = await fetch('https://api.github.com/user/emails', {
                headers: {
                  'Authorization': `token ${githubMetadata.accessToken}`,
                  'Accept': 'application/vnd.github.v3+json',
                },
              });
              
              if (retryResponse.ok) {
                const emailData = await retryResponse.json();
                const primaryEmail = emailData.find((e: any) => e.primary)?.email || emailData.find((e: any) => e.verified)?.email || emailData[0]?.email;
                if (primaryEmail && !primaryEmail.includes('.local')) {
                  targetEmail = primaryEmail;
                  console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π email –∏–∑ GitHub API: ${targetEmail}`);
                }
              }
            } else if (response.ok) {
              const emailData = await response.json();
              const primaryEmail = emailData.find((e: any) => e.primary)?.email || emailData.find((e: any) => e.verified)?.email || emailData[0]?.email;
              if (primaryEmail && !primaryEmail.includes('.local')) {
                targetEmail = primaryEmail;
                console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π email –∏–∑ GitHub API: ${targetEmail}`);
              }
            }
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è email –∏–∑ GitHub API:`, error);
          }
        }
        
        // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –ø—Å–µ–≤–¥–æ-email –∏ –ø–µ—Ä–µ–¥–∞–Ω –≤–∞–ª–∏–¥–Ω—ã–π email –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
        if ((targetEmail?.includes('.local') || !targetEmail) && email && email.includes('@') && !email.includes('.local')) {
          targetEmail = email;
          console.log(`üìß –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π email –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º: ${targetEmail}`);
        }
      }
      
      // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ email –≤—Å–µ –µ—â–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
      if (!targetEmail || targetEmail.includes('.local')) {
        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–∞–ª—å–Ω—ã–π email –¥–ª—è userId ${userId}, userEmail=${userEmail}, targetEmail=${targetEmail}`);
        return {
          success: false,
          message: 'Email –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∏–ª–∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –Ω—É–∂–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π email –∞–¥—Ä–µ—Å. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ GitHub –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∏ email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –Ω–∞ GitHub.',
        };
      }

      // –í–ê–ñ–ù–û: –î–ª—è nFA –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–æ–≤, —Ç–∞–∫ –∫–∞–∫ –∫–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
      // Rate limit –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω–æ–π 2FA (–Ω–µ nFA)
      // –î–ª—è nFA –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ –∫–æ–¥–æ–≤, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —á–∞—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—Ö–æ–¥–∞

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
      const code = this.generateCode();
      const expiresAt = new Date(Date.now() + 10 * 60 * 1000); // 10 –º–∏–Ω—É—Ç

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥
      await this.twoFactorCodeRepo.save({
        userId,
        code,
        type: 'email' as any,
        expiresAt,
        contact: targetEmail,
        status: 'pending' as any,
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å –∫–æ–¥–æ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π email
      try {
        await this.emailService.sendVerificationCode(targetEmail, code);
        console.log(`üìß 2FA –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email: ${targetEmail}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –Ω–∞ ${targetEmail}:`, error);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º - –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –¥–∞–∂–µ –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å (SMTP –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
        // –ù–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º success=false —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–Ω–∞–ª —á—Ç–æ –∫–æ–¥ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        return {
          success: false,
          message: `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –Ω–∞ ${targetEmail}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`,
        };
      }

      return {
        success: true,
        message: '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email',
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ 2FA –∫–æ–¥–∞ –Ω–∞ email:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞',
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ 2FA –∫–æ–¥–∞
   */
  async verifyEmailCode(userId: string, code: string): Promise<{ success: boolean; message: string }> {
    try {
      const codeRecord = await this.twoFactorCodeRepo.findOne({
        where: {
          userId,
          code,
          type: 'email' as any,
          status: 'pending' as any,
        },
      });

      if (!codeRecord) {
        return {
          success: false,
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥',
        };
      }

      if (codeRecord.expiresAt < new Date()) {
        return {
          success: false,
          message: '–ö–æ–¥ –∏—Å—Ç–µ–∫',
        };
      }

      // –û—Ç–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      await this.twoFactorCodeRepo.update(codeRecord.id, { 
        status: 'used' as any,
        verifiedAt: new Date()
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.userRepo.update(userId, { emailVerified: true });

      console.log(`‚úÖ Email 2FA –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

      return {
        success: true,
        message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ 2FA –∫–æ–¥–∞:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞',
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
   * –£–ë–†–ê–ù–û –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è nFA - –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–¥–æ–≤
   * –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Ç–æ–º—É —á—Ç–æ –ø—Ä–∏ nFA –∫–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
   */
  private async checkRateLimit(userId: string, method: string): Promise<boolean> {
    // –î–ª—è nFA –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true –≤—Å–µ–≥–¥–∞
    // Rate limit –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω–æ–π 2FA, –Ω–æ –≤ nFA —ç—Ç–æ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ
    return true;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 6-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞
   */
  private generateCode(): string {
    return Math.floor(100000 + Math.random() * 900000).toString();
  }

  /**
   * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
   */
  async findUserByEmail(email: string): Promise<User | null> {
    console.log(`üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email: ${email}`);
    const user = await this.userRepo.findOne({
      where: { email },
      relations: ['organizations', 'teams'],
    });
    console.log(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: ${user ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
    return user;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async generateTokensForUser(user: User): Promise<{ accessToken: string; refreshToken: string }> {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Access Token
    const permissions = user.userRoleAssignments?.flatMap(assignment => 
      assignment.role?.permissions?.map(p => p.name) || []
    ) || [];
    const accessToken = this.jwtService.sign({
      sub: user.id,
      email: user.email,
      organizationId: user.organizations?.[0]?.id || null,
      teamId: user.teams?.[0]?.id || null,
      roles: user.userRoleAssignments?.map(a => a.role?.name).filter(Boolean) || [],
      permissions,
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Refresh Token
    const refreshToken = uuidv4();
    const expiresAt = new Date();
    expiresAt.setDate(expiresAt.getDate() + 7); // +7 –¥–Ω–µ–π

    await this.refreshTokenRepo.save({
      token: refreshToken,
      userId: user.id,
      expiresAt,
      isRevoked: false,
    });

    return { accessToken, refreshToken };
  }
}
