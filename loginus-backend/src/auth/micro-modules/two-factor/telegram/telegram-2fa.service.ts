import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, MoreThan } from 'typeorm';
import { TwoFactorCode, TwoFactorType } from '../../../entities/two-factor-code.entity';
import { User } from '../../../../users/entities/user.entity';
import { SmsService } from '../../../sms.service';
import { AuthMethodType } from '../../../enums/auth-method-type.enum';

@Injectable()
export class TelegramTwoFactorService {
  constructor(
    @InjectRepository(TwoFactorCode)
    private twoFactorCodeRepo: Repository<TwoFactorCode>,
    @InjectRepository(User)
    private userRepo: Repository<User>,
    private smsService: SmsService,
  ) {}

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ 2FA –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram
   * –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ Telegram –ø–æ chatId/userId –∏–∑ messengerMetadata
   */
  async sendTelegramCode(userId: string, telegramChatId?: string): Promise<{ success: boolean; message: string }> {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await this.userRepo.findOne({
        where: { id: userId },
      });

      if (!user) {
        return {
          success: false,
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ PHONE_TELEGRAM –º–µ—Ç–æ–¥ –ø—Ä–∏–≤—è–∑–∞–Ω
      const hasTelegramMethod = user.availableAuthMethods?.includes(AuthMethodType.PHONE_TELEGRAM) || false;
      if (!hasTelegramMethod) {
        return {
          success: false,
          message: 'Telegram –º–µ—Ç–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É',
        };
      }

      // –ü–æ–ª—É—á–∞–µ–º telegram chatId –∏–∑ messengerMetadata
      const telegramMetadata = user.messengerMetadata?.telegram;
      if (!telegramMetadata) {
        return {
          success: false,
          message: 'Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É',
        };
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º chatId –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (–º–æ–∂–µ—Ç –±—ã—Ç—å userId, —Ç–∞–∫ –∫–∞–∫ chatId –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)
      // –í–ê–ñ–ù–û: chatId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –¥–ª—è Telegram API
      const rawChatId = telegramChatId || telegramMetadata.userId?.toString() || telegramMetadata.userId;
      if (!rawChatId) {
        return {
          success: false,
          message: 'Telegram chatId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞',
        };
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
      const targetChatId = typeof rawChatId === 'string' ? parseInt(rawChatId, 10) : rawChatId;
      
      if (isNaN(targetChatId)) {
        console.error(`‚ùå [sendTelegramCode] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chatId: ${rawChatId}`);
        return {
          success: false,
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram chatId',
        };
      }

      // –í–ê–ñ–ù–û: –î–ª—è nFA –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–æ–≤, —Ç–∞–∫ –∫–∞–∫ –∫–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
      // Rate limit –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω–æ–π 2FA (–Ω–µ nFA)
      // –î–ª—è nFA –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ –∫–æ–¥–æ–≤, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —á–∞—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—Ö–æ–¥–∞

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
      const code = this.generateCode();
      const expiresAt = new Date(Date.now() + 10 * 60 * 1000); // 10 –º–∏–Ω—É—Ç

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–æ–º TELEGRAM
      console.log(`üíæ [sendTelegramCode] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –≤ –ë–î: code=${code}, type=${TwoFactorType.TELEGRAM}, userId=${userId}`);
      const savedCode = await this.twoFactorCodeRepo.save({
        userId,
        code,
        type: TwoFactorType.TELEGRAM,
        expiresAt,
        contact: targetChatId.toString(), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–∏–ø—É
        status: 'pending' as any,
      });
      console.log(`‚úÖ [sendTelegramCode] –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î —Å ID: ${savedCode.id}, code: ${savedCode.code}, status: ${savedCode.status}`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram
      // –í–ê–ñ–ù–û: Telegram Bot –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º
      // –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è —á–µ—Ä–µ–∑ Telegram Login Widget
      console.log(`üí¨ [sendTelegramCode] –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –≤ Telegram –¥–ª—è userId ${userId}`);
      console.log(`üí¨ [sendTelegramCode] chatId (—Ç–∏–ø: ${typeof targetChatId}): ${targetChatId}`);
      console.log(`üí¨ [sendTelegramCode] Messenger metadata: ${JSON.stringify(telegramMetadata)}`);
      console.log(`üí¨ [sendTelegramCode] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥: ${code}`);
      
      const message = `üîê –í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è Loginus: ${code}\n\n‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç.\n\nüí° –≠—Ç–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.`;
      console.log(`üí¨ [sendTelegramCode] –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–¥–ª–∏–Ω–∞: ${message.length}): ${message.substring(0, 100)}...`);
      
      // –ü–µ—Ä–µ–¥–∞–µ–º chatId –∫–∞–∫ —Å—Ç—Ä–æ–∫—É, —Ç–∞–∫ –∫–∞–∫ sendTelegramMessage –æ–∂–∏–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É
      const telegramResult = await this.smsService.sendTelegramMessage(
        targetChatId.toString(), 
        message
      );
      
      console.log(`üí¨ [sendTelegramCode] –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: ${JSON.stringify(telegramResult)}`);
      
      if (!telegramResult.success) {
        console.error(`‚ùå [sendTelegramCode] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: ${telegramResult.message}`);
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Ç–µ–º, —á—Ç–æ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (telegramResult.message.includes('chat not found') || telegramResult.message.includes('bot was blocked')) {
          return {
            success: false,
            message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å —á–µ—Ä–µ–∑ Telegram Login Widget –∏–ª–∏ –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.',
          };
        }
        return {
          success: false,
          message: `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: ${telegramResult.message}`,
        };
      }

      console.log(`‚úÖ [sendTelegramCode] 2FA –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram (chatId: ${targetChatId}, userId: ${userId})`);

      return {
        success: true,
        message: '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram',
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ 2FA –∫–æ–¥–∞ –≤ Telegram:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞',
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ 2FA –∫–æ–¥–∞
   */
  async verifyTelegramCode(userId: string, code: string): Promise<{ success: boolean; message: string }> {
    try {
      console.log(`üîç [verifyTelegramCode] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –¥–ª—è userId: ${userId}, code: ${code}`);
      console.log(`üîç [verifyTelegramCode] –ò—â–µ–º –∫–æ–¥ —Å —Ç–∏–ø–æ–º: ${TwoFactorType.TELEGRAM}`);
      
      const codeRecord = await this.twoFactorCodeRepo.findOne({
        where: {
          userId,
          code,
          type: TwoFactorType.TELEGRAM,
          status: 'pending' as any,
        },
      });

      console.log(`üîç [verifyTelegramCode] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: ${codeRecord ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);

      if (!codeRecord) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫
        const allCodes = await this.twoFactorCodeRepo.find({
          where: {
            userId,
            code,
            type: TwoFactorType.TELEGRAM,
          },
          order: { verifiedAt: 'DESC' },
        });
        
        console.log(`üîç [verifyTelegramCode] –í—Å–µ –∫–æ–¥—ã —Å —Ç–∞–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º: ${allCodes.length}`);
        if (allCodes.length > 0) {
          const foundCode = allCodes[0];
          console.log(`üîç [verifyTelegramCode] –ù–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–¥ - status: ${foundCode.status}, expiresAt: ${foundCode.expiresAt}, verifiedAt: ${foundCode.verifiedAt}, now: ${new Date()}`);
          
          if (foundCode.status === 'used') {
            // –ï—Å–ª–∏ –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –Ω–µ–¥–∞–≤–Ω–æ (–≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç), —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –≤–∞–ª–∏–¥–Ω—ã–º –¥–ª—è nFA
            const tenMinutesAgo = new Date(Date.now() - 10 * 60 * 1000);
            if (foundCode.verifiedAt && foundCode.verifiedAt > tenMinutesAgo) {
              console.log(`‚úÖ [verifyTelegramCode] –ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω, –Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –Ω–µ–¥–∞–≤–Ω–æ - —Ä–∞–∑—Ä–µ—à–∞–µ–º`);
              return {
                success: true,
                message: '–ö–æ–¥ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
              };
            }
            console.log(`‚ö†Ô∏è [verifyTelegramCode] –ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–∞–≤–Ω–æ`);
            return {
              success: false,
              message: '–ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω',
            };
          }
          
          if (foundCode.expiresAt < new Date()) {
            console.log(`‚ö†Ô∏è [verifyTelegramCode] –ö–æ–¥ –∏—Å—Ç–µ–∫`);
            return {
              success: false,
              message: '–ö–æ–¥ –∏—Å—Ç–µ–∫',
            };
          }
        }
        
        return {
          success: false,
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥',
        };
      }

      if (codeRecord.expiresAt < new Date()) {
        return {
          success: false,
          message: '–ö–æ–¥ –∏—Å—Ç–µ–∫',
        };
      }

      // –û—Ç–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      await this.twoFactorCodeRepo.update(codeRecord.id, { 
        status: 'used' as any,
        verifiedAt: new Date()
      });

      console.log(`‚úÖ Telegram 2FA –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

      return {
        success: true,
        message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ 2FA –∫–æ–¥–∞:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞',
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
   * –£–ë–†–ê–ù–û –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è nFA - –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–¥–æ–≤
   * –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Ç–æ–º—É —á—Ç–æ –ø—Ä–∏ nFA –∫–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
   */
  private async checkRateLimit(userId: string, method: string): Promise<boolean> {
    // –î–ª—è nFA –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true –≤—Å–µ–≥–¥–∞
    // Rate limit –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω–æ–π 2FA, –Ω–æ –≤ nFA —ç—Ç–æ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ
    return true;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 6-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞
   */
  private generateCode(): string {
    return Math.floor(100000 + Math.random() * 900000).toString();
  }
}
