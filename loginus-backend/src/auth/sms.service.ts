import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';

@Injectable()
export class SmsService {
  private smsruApiId: string;
  private smsaeroEmail: string;
  private smsaeroApiKey: string;
  private telegramBotToken: string;
  private telegramChatId: string;

  constructor(private configService: ConfigService) {
    this.smsruApiId = this.configService.get('SMSRU_API_ID', '');
    this.smsaeroEmail = this.configService.get('SMSAERO_EMAIL', '');
    this.smsaeroApiKey = this.configService.get('SMSAERO_API_KEY', '');
    this.telegramBotToken = this.configService.get('TELEGRAM_BOT_TOKEN', '');
    this.telegramChatId = this.configService.get('TELEGRAM_CHAT_ID', '');
    
    console.log('üì± SmsService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:');
    console.log(`   SmsAero Email: ${this.smsaeroEmail ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'} (${this.smsaeroEmail})`);
    console.log(`   SmsAero API Key: ${this.smsaeroApiKey ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'} (${this.smsaeroApiKey ? this.smsaeroApiKey.substring(0, 10) + '...' : '–ø—É—Å—Ç–æ'})`);
    console.log(`   Telegram Bot Token: ${this.telegramBotToken ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'} (${this.telegramBotToken ? this.telegramBotToken.substring(0, 10) + '...' : '–ø—É—Å—Ç–æ'})`);
    console.log(`   Telegram Chat ID: ${this.telegramChatId ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'} (${this.telegramChatId})`);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ SMS
   * –ü—Ä–æ–±—É–µ—Ç SmsAero, –∑–∞—Ç–µ–º Telegram, –∑–∞—Ç–µ–º fallback
   */
  async sendVerificationCode(phone: string, code: string): Promise<void> {
    const message = `Loginus: –í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${code}. –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç.`;
    
    // 1. –ü—Ä–æ–±—É–µ–º SmsAero
    if (this.smsaeroEmail && this.smsaeroApiKey) {
      try {
        await this.sendSmsViaSmsaero(phone, message);
        console.log(`üì± SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ SmsAero –Ω–∞ ${phone}`);
        console.log(`   –ö–æ–¥: ${code}`);
        return;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS —á–µ—Ä–µ–∑ SmsAero:', error.message);
      }
    }

    // 2. –ü—Ä–æ–±—É–µ–º Telegram (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω)
    // if (this.telegramBotToken && this.telegramChatId) {
    //   try {
    //     await this.sendSmsViaTelegram(phone, message, code);
    //     console.log(`üì± SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram –Ω–∞ ${phone}`);
    //     console.log(`   –ö–æ–¥: ${code}`);
    //     return;
    //   } catch (error) {
    //     console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS —á–µ—Ä–µ–∑ Telegram:', error.message);
    //   }
    // }

    // 3. Fallback
    this.fallbackSms(phone, code);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ SmsAero API
   */
  private async sendSmsViaSmsaero(phone: string, message: string): Promise<void> {
    const email = this.smsaeroEmail;
    const apiKey = this.smsaeroApiKey;
    const from = this.configService.get('SMSAERO_FROM', 'Loginus');
    
    const formattedPhone = this.formatPhoneForSmsaero(phone);
    
    // SmsAero API v1 - –∏—Å–ø–æ–ª—å–∑—É–µ–º GET –∑–∞–ø—Ä–æ—Å —Å MD5 —Ö–µ—à–µ–º –ø–∞—Ä–æ–ª—è
    const crypto = require('crypto');
    const passwordHash = crypto.createHash('md5').update(apiKey).digest('hex');
    
    console.log(`üì± –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —á–µ—Ä–µ–∑ SmsAero:`);
    console.log(`   Email: ${email}`);
    console.log(`   Password: ${apiKey ? apiKey.substring(0, 4) + '****' : '–ø—É—Å—Ç–æ'}`);
    console.log(`   MD5 Hash: ${passwordHash}`);
    console.log(`   Phone: ${formattedPhone}`);
    console.log(`   Message: ${message}`);
    console.log(`   From: ${from}`);
    console.log(`   URL: https://gate.smsaero.ru/send/?user=${email}&password=${passwordHash}&to=${formattedPhone}&text=${encodeURIComponent(message)}&from=${from}&answer=json`);
    
    const params = new URLSearchParams({
      user: email,
      password: passwordHash,
      to: formattedPhone,
      text: message,
      from: from,
      answer: 'json'
    });
    
    const response = await fetch(`https://gate.smsaero.ru/send/?${params}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      }
    });

    const result = await response.json();
    
    console.log(`üì± SmsAero –æ—Ç–≤–µ—Ç: ${JSON.stringify(result, null, 2)}`);
    
    if (!result.success) {
      throw new Error(`SmsAero error: ${result.message || 'Unknown error'}`);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram Bot
   */
  private async sendSmsViaTelegram(phone: string, message: string, code: string): Promise<void> {
    const botToken = this.telegramBotToken;
    const chatId = this.telegramChatId;
    
    const telegramMessage = `üì± SMS –¥–ª—è ${phone}\n\n${message}\n\nüîê –ö–æ–¥: ${code}`;
    
    console.log(`üì± –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —á–µ—Ä–µ–∑ Telegram:`);
    console.log(`   Bot Token: ${botToken.substring(0, 10)}...`);
    console.log(`   Chat ID: ${chatId}`);
    console.log(`   Phone: ${phone}`);
    console.log(`   Code: ${code}`);
    
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: telegramMessage,
        parse_mode: 'HTML'
      })
    });

    const result = await response.json();
    
    console.log(`üì± Telegram –æ—Ç–≤–µ—Ç: ${JSON.stringify(result, null, 2)}`);
    
    if (!result.ok) {
      throw new Error(`Telegram error: ${result.description || 'Unknown error'}`);
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è SmsAero
   */
  private formatPhoneForSmsaero(phone: string): string {
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    let digits = phone.replace(/\D/g, '');
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
    if (digits.startsWith('8')) {
      digits = '7' + digits.substring(1);
    }
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +7, —É–±–∏—Ä–∞–µ–º +
    if (digits.startsWith('7')) {
      return digits;
    }
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7, –¥–æ–±–∞–≤–ª—è–µ–º 7
    if (!digits.startsWith('7')) {
      return '7' + digits;
    }
    
    return digits;
  }

  /**
   * Fallback SMS (–≤ –∫–æ–Ω—Å–æ–ª—å)
   */
  private fallbackSms(phone: string, code: string): void {
    console.log('üì± ===== FALLBACK SMS (SmsAero –∏ Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã) =====');
    console.log(`   To: ${phone}`);
    console.log(`   Message: Loginus: –í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${code}. –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç.`);
    console.log(`   Code: ${code}`);
    console.log('üì± ============================================================');
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   */
  validatePhoneNumber(phone: string): boolean {
    const phoneRegex = /^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$/;
    return phoneRegex.test(phone);
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   */
  formatPhoneNumber(phone: string): string {
    const digits = phone.replace(/\D/g, '');
    
    if (digits.startsWith('8')) {
      return '+7' + digits.substring(1);
    }
    
    if (digits.startsWith('7')) {
      return '+' + digits;
    }
    
    if (!digits.startsWith('7') && !digits.startsWith('8')) {
      return '+7' + digits;
    }
    
    return '+' + digits;
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö SMS —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  async testAllServices(phone: string, code: string): Promise<void> {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö SMS —Å–µ—Ä–≤–∏—Å–æ–≤...');
    console.log(`   SmsAero Email: "${this.smsaeroEmail}"`);
    console.log(`   SmsAero API Key: "${this.smsaeroApiKey ? this.smsaeroApiKey.substring(0, 10) + '...' : '–ø—É—Å—Ç–æ'}"`);
    console.log(`   Telegram Bot Token: "${this.telegramBotToken ? this.telegramBotToken.substring(0, 10) + '...' : '–ø—É—Å—Ç–æ'}"`);
    console.log(`   Telegram Chat ID: "${this.telegramChatId}"`);
    
    // –¢–µ—Å—Ç SmsAero
    if (this.smsaeroEmail && this.smsaeroApiKey) {
      try {
        await this.sendSmsViaSmsaero(phone, `–¢–µ—Å—Ç SmsAero: ${code}`);
        console.log('‚úÖ SmsAero —Ä–∞–±–æ—Ç–∞–µ—Ç');
      } catch (error) {
        console.log('‚ùå SmsAero –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', error.message);
      }
    } else {
      console.log('‚ö†Ô∏è SmsAero –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    // –¢–µ—Å—Ç Telegram
    if (this.telegramBotToken && this.telegramChatId) {
      try {
        await this.sendSmsViaTelegram(phone, `–¢–µ—Å—Ç Telegram: ${code}`, code);
        console.log('‚úÖ Telegram —Ä–∞–±–æ—Ç–∞–µ—Ç');
      } catch (error) {
        console.log('‚ùå Telegram –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', error.message);
      }
    } else {
      console.log('‚ö†Ô∏è Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram
   * –í–ê–ñ–ù–û: –ë–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
   * 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º —Ä–∞–Ω–µ–µ
   * 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è —á–µ—Ä–µ–∑ Telegram Login Widget (–≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è)
   */
  async sendTelegramMessage(chatId: string, message: string): Promise<{ success: boolean; message: string }> {
    if (!this.telegramBotToken) {
      console.error('‚ùå [sendTelegramMessage] Telegram Bot Token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return { success: false, message: 'Telegram Bot Token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' };
    }

    try {
      console.log(`üì§ [sendTelegramMessage] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram`);
      console.log(`üì§ [sendTelegramMessage] chatId: ${chatId} (—Ç–∏–ø: ${typeof chatId})`);
      console.log(`üì§ [sendTelegramMessage] message –¥–ª–∏–Ω–∞: ${message?.length || 0}`);
      console.log(`üì§ [sendTelegramMessage] message preview: ${message?.substring(0, 100) || 'EMPTY'}...`);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º chatId –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–æ–º (Telegram API –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–∞)
      let numericChatId: number | string = chatId;
      if (typeof chatId === 'string' && /^\d+$/.test(chatId)) {
        numericChatId = parseInt(chatId, 10);
      }
      
      const requestBody = {
        chat_id: numericChatId,
        text: message,
      };
      
      console.log(`üì§ [sendTelegramMessage] Request body: ${JSON.stringify({ ...requestBody, text: requestBody.text.substring(0, 50) + '...' })}`);
      
      const response = await fetch(`https://api.telegram.org/bot${this.telegramBotToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody),
      });

      const data = await response.json();
      
      console.log(`üì§ [sendTelegramMessage] Telegram API –æ—Ç–≤–µ—Ç –¥–ª—è chatId ${chatId}:`, JSON.stringify(data, null, 2));
      
      if (data.ok) {
        console.log(`‚úÖ [sendTelegramMessage] Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ –≤ —á–∞—Ç ${chatId}`);
        return { success: true, message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' };
      } else {
        console.error('‚ùå [sendTelegramMessage] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è:', JSON.stringify(data));
        // –î–µ—Ç–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        let errorMessage = data.description || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏';
        if (data.error_code === 403) {
          errorMessage = '–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å —á–µ—Ä–µ–∑ Telegram Login Widget.';
        } else if (data.error_code === 400) {
          errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π chatId –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è —á–µ—Ä–µ–∑ Telegram Login Widget';
        } else if (data.error_code === 401) {
          errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞';
        }
        return { success: false, message: errorMessage };
      }
    } catch (error) {
      console.error('‚ùå [sendTelegramMessage] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      return { success: false, message: `–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}` };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —Å–æ–æ–±—â–µ–Ω–∏—è (–∞–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   */
  async sendSmsMessage(phone: string, message: string): Promise<{ success: boolean; message: string }> {
    try {
      await this.sendVerificationCode(phone, message.split(': ')[1] || '123456');
      return { success: true, message: 'SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' };
    } catch (error) {
      return { success: false, message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS' };
    }
  }
}