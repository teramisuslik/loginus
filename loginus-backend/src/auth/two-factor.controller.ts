import {
  Controller,
  Post,
  Body,
  UseGuards,
  Get,
  Param,
  ParseUUIDPipe,
  Delete,
} from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth } from '@nestjs/swagger';
import { TwoFactorService } from './two-factor.service';
import { SendCodeDto } from './dto/send-code.dto';
import { VerifyCodeDto } from './dto/verify-code.dto';
import { JwtAuthGuard } from './guards/jwt-auth.guard';
import { PermissionsGuard } from './guards/permissions.guard';
import { RequirePermissions } from './decorators/permissions.decorator';
import { CurrentUser } from './decorators/current-user.decorator';
import { Public } from './decorators/public.decorator';

@ApiTags('two-factor')
@Controller('two-factor')
export class TwoFactorController {
  constructor(private readonly twoFactorService: TwoFactorService) {}

  @Post('send-code')
  @Public()
  @ApiOperation({ summary: '–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ email –∏–ª–∏ SMS' })
  @ApiResponse({ status: 200, description: '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ' })
  @ApiResponse({ status: 400, description: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' })
  @ApiResponse({ status: 429, description: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–æ–≤' })
  async sendCode(@Body() dto: SendCodeDto) {
    return this.twoFactorService.sendCode(dto);
  }

  @Post('verify-code')
  @Public()
  @ApiOperation({ summary: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' })
  @ApiResponse({ status: 200, description: '–ö–æ–¥ –ø—Ä–æ–≤–µ—Ä–µ–Ω —É—Å–ø–µ—à–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã' })
  @ApiResponse({ status: 401, description: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥' })
  @ApiResponse({ status: 429, description: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫' })
  async verifyCode(@Body() dto: VerifyCodeDto) {
    return this.twoFactorService.verifyCode(dto);
  }

  @Get('my-codes')
  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth()
  @ApiOperation({ summary: '–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' })
  @ApiResponse({ status: 200, description: '–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤' })
  async getMyActiveCodes(@CurrentUser() user: any) {
    return this.twoFactorService.getUserActiveCodes(user.userId);
  }

  @Delete('my-codes')
  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth()
  @ApiOperation({ summary: '–û—Ç–∑—ã–≤ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' })
  @ApiResponse({ status: 200, description: '–í—Å–µ –∫–æ–¥—ã –æ—Ç–æ–∑–≤–∞–Ω—ã' })
  async revokeMyCodes(@CurrentUser() user: any) {
    await this.twoFactorService.revokeUserCodes(user.userId);
    return { message: '–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã –æ—Ç–æ–∑–≤–∞–Ω—ã' };
  }

  @Get('user/:userId/codes')
  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth()
  @ApiOperation({ summary: '–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)' })
  @ApiResponse({ status: 200, description: '–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' })
  async getUserActiveCodes(@Param('userId', ParseUUIDPipe) userId: string) {
    return this.twoFactorService.getUserActiveCodes(userId);
  }

  @Delete('user/:userId/codes')
  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth()
  @ApiOperation({ summary: '–û—Ç–∑—ã–≤ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)' })
  @ApiResponse({ status: 200, description: '–í—Å–µ –∫–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–æ–∑–≤–∞–Ω—ã' })
  async revokeUserCodes(@Param('userId', ParseUUIDPipe) userId: string) {
    await this.twoFactorService.revokeUserCodes(userId);
    return { message: '–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–æ–∑–≤–∞–Ω—ã' };
  }

  @Post('test-sms')
  @Public()
  @ApiOperation({ summary: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö SMS —Å–µ—Ä–≤–∏—Å–æ–≤ (SmsAero, Telegram, Fallback)' })
  @ApiResponse({ status: 200, description: '–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏' })
  async testSmsServices(@Body() dto: SendCodeDto) {
    const { contact } = dto;
    const testCode = '123456';
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º SmsService —á–µ—Ä–µ–∑ TwoFactorService
    const smsService = this.twoFactorService['smsService'];
    
    if (smsService && smsService.testAllServices) {
      await smsService.testAllServices(contact, testCode);
    } else {
      console.log('üì± SmsService –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
    
    return { 
      message: '–¢–µ—Å—Ç –≤—Å–µ—Ö SMS —Å–µ—Ä–≤–∏—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.',
      contact,
      testCode 
    };
  }
}
