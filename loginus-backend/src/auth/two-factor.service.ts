import { Injectable, BadRequestException, UnauthorizedException, HttpException, HttpStatus } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { ConfigService } from '@nestjs/config';
import { JwtService } from '@nestjs/jwt';
import { User } from '../users/entities/user.entity';
import { TwoFactorCode, TwoFactorType, TwoFactorStatus } from './entities/two-factor-code.entity';
import { RefreshToken } from './entities/refresh-token.entity';
import { UsersService } from '../users/users.service';
import { EmailService } from './email.service';
import { SmsService } from './sms.service';
import * as crypto from 'crypto';

export interface SendCodeDto {
  type: TwoFactorType;
  contact: string; // email –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  ipAddress?: string;
  userAgent?: string;
}

export interface VerifyCodeDto {
  code: string;
  contact: string;
  type: TwoFactorType;
  ipAddress?: string;
  userAgent?: string;
}

@Injectable()
export class TwoFactorService {
  constructor(
    @InjectRepository(TwoFactorCode)
    private twoFactorCodeRepo: Repository<TwoFactorCode>,
    @InjectRepository(RefreshToken)
    private refreshTokenRepo: Repository<RefreshToken>,
    private configService: ConfigService,
    private jwtService: JwtService,
    private usersService: UsersService,
    private emailService: EmailService,
    private smsService: SmsService,
  ) {
    console.log('üîß TwoFactorService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å SmsService');
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ email –∏–ª–∏ SMS
   */
  async sendCode(dto: SendCodeDto): Promise<{ message: string; expiresIn: number }> {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    this.validateContact(dto.contact, dto.type);

    // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç—É
    const user = await this.findUserByContact(dto.contact, dto.type);
    if (!user) {
      throw new BadRequestException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
    await this.checkRateLimit(user.id, dto.type);

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–æ–¥—ã
    await this.deactivatePreviousCodes(user.id, dto.type);

    // –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥
    const code = this.generateCode();
    const expiresAt = new Date();
    expiresAt.setMinutes(expiresAt.getMinutes() + 10); // 10 –º–∏–Ω—É—Ç

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–¥
    const twoFactorCode = this.twoFactorCodeRepo.create({
      userId: user.id,
      type: dto.type,
      code,
      contact: dto.contact,
      ipAddress: dto.ipAddress,
      userAgent: dto.userAgent,
      expiresAt,
      status: TwoFactorStatus.PENDING,
    });

    await this.twoFactorCodeRepo.save(twoFactorCode);

    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å email/SMS —Å–µ—Ä–≤–∏—Å–∞–º–∏)
    await this.deliverCode(dto.contact, code, dto.type);

    return {
      message: `–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${this.maskContact(dto.contact, dto.type)}`,
      expiresIn: 600, // 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
   */
  async verifyCode(dto: VerifyCodeDto): Promise<{ user: User; accessToken: string; refreshToken: string }> {
    // –ù–∞–π—Ç–∏ –∫–æ–¥
    const twoFactorCode = await this.twoFactorCodeRepo.findOne({
      where: {
        code: dto.code,
        contact: dto.contact,
        type: dto.type,
        status: TwoFactorStatus.PENDING,
      },
      relations: ['user', 'user.userRoleAssignments', 'user.userRoleAssignments.role', 'user.userRoleAssignments.role.permissions'],
    });

    if (!twoFactorCode) {
      throw new UnauthorizedException('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥');
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    if (twoFactorCode.expiresAt < new Date()) {
      twoFactorCode.status = TwoFactorStatus.EXPIRED;
      await this.twoFactorCodeRepo.save(twoFactorCode);
      throw new UnauthorizedException('–ö–æ–¥ –∏—Å—Ç–µ–∫');
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    if (twoFactorCode.attempts >= twoFactorCode.maxAttempts) {
      twoFactorCode.status = TwoFactorStatus.EXPIRED;
      await this.twoFactorCodeRepo.save(twoFactorCode);
      throw new HttpException('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫', HttpStatus.TOO_MANY_REQUESTS);
    }

    // –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
    twoFactorCode.attempts += 1;
    await this.twoFactorCodeRepo.save(twoFactorCode);

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥
    if (twoFactorCode.code !== dto.code) {
      throw new UnauthorizedException('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥');
    }

    // –ö–æ–¥ –≤–µ—Ä–Ω—ã–π - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ
    twoFactorCode.status = TwoFactorStatus.VERIFIED;
    twoFactorCode.verifiedAt = new Date();
    await this.twoFactorCodeRepo.save(twoFactorCode);

    // –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –∏–∑ AuthService)
    const accessToken = await this.generateAccessToken(twoFactorCode.user);
    const refreshToken = await this.generateRefreshToken(twoFactorCode.user);

    return {
      user: twoFactorCode.user,
      accessToken,
      refreshToken,
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–æ–≤
   */
  private async checkRateLimit(userId: string, type: TwoFactorType): Promise<void> {
    const oneHourAgo = new Date();
    oneHourAgo.setHours(oneHourAgo.getHours() - 1);

    const recentCodes = await this.twoFactorCodeRepo
      .createQueryBuilder('code')
      .where('code.userId = :userId', { userId })
      .andWhere('code.type = :type', { type })
      .andWhere('code.createdAt >= :oneHourAgo', { oneHourAgo })
      .getCount();

    const maxCodesPerHour = this.configService.get<number>('TWO_FACTOR_MAX_CODES_PER_HOUR', 5);
    if (recentCodes >= maxCodesPerHour) {
      throw new HttpException('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', HttpStatus.TOO_MANY_REQUESTS);
    }
  }

  /**
   * –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–æ–¥–æ–≤
   */
  private async deactivatePreviousCodes(userId: string, type: TwoFactorType): Promise<void> {
    await this.twoFactorCodeRepo.update(
      {
        userId,
        type,
        status: TwoFactorStatus.PENDING,
      },
      {
        status: TwoFactorStatus.EXPIRED,
      },
    );
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 6-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞
   */
  private generateCode(): string {
    return Math.floor(100000 + Math.random() * 900000).toString();
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
   */
  private validateContact(contact: string, type: TwoFactorType): void {
    if (type === TwoFactorType.EMAIL) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(contact)) {
        throw new BadRequestException('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email');
      }
    } else if (type === TwoFactorType.SMS) {
      const phoneRegex = /^\+?[1-9]\d{1,14}$/;
      if (!phoneRegex.test(contact.replace(/\s/g, ''))) {
        throw new BadRequestException('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
      }
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç—É
   */
  private async findUserByContact(contact: string, type: TwoFactorType): Promise<User | null> {
    if (type === TwoFactorType.EMAIL) {
      return this.usersService.findByEmail(contact);
    } else if (type === TwoFactorType.SMS) {
      // –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      return this.usersService.findByPhone(contact);
    }
    return null;
  }

  /**
   * –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   */
  private maskContact(contact: string, type: TwoFactorType): string {
    if (type === TwoFactorType.EMAIL) {
      const [local, domain] = contact.split('@');
      return `${local.substring(0, 2)}***@${domain}`;
    } else if (type === TwoFactorType.SMS) {
      return contact.replace(/(\d{3})\d{3}(\d{3})/, '$1***$2');
    }
    return contact;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ (—Å —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π email –∏ SMS)
   */
  private async deliverCode(contact: string, code: string, type: TwoFactorType): Promise<void> {
    if (type === TwoFactorType.EMAIL) {
      await this.emailService.sendVerificationCode(contact, code);
    } else if (type === TwoFactorType.SMS) {
      await this.smsService.sendVerificationCode(contact, code);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Access Token
   */
  private async generateAccessToken(user: User): Promise<string> {
    const roles = user.userRoleAssignments?.map(assignment => assignment.role?.name).filter(Boolean) || [];
    const permissions = user.userRoleAssignments?.flatMap(assignment => 
      assignment.role?.permissions?.map(p => p.name) || []
    ) || [];

    const payload = {
      sub: user.id,
      email: user.email,
      organizationId: user.organizations?.[0]?.id || null,
      teamId: user.teams?.[0]?.id || null,
      roles: roles,
      permissions: permissions,
    };

    return this.jwtService.sign(payload);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Refresh Token
   */
  private async generateRefreshToken(user: User): Promise<string> {
    const token = crypto.randomUUID();
    const expiresAt = new Date();
    expiresAt.setDate(expiresAt.getDate() + 7); // +7 –¥–Ω–µ–π

    await this.refreshTokenRepo.save({
      token,
      userId: user.id,
      expiresAt,
      isRevoked: false,
    });

    return token;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserActiveCodes(userId: string): Promise<TwoFactorCode[]> {
    return this.twoFactorCodeRepo
      .createQueryBuilder('code')
      .where('code.userId = :userId', { userId })
      .andWhere('code.status = :status', { status: TwoFactorStatus.PENDING })
      .andWhere('code.expiresAt > :now', { now: new Date() })
      .orderBy('code.createdAt', 'DESC')
      .getMany();
  }

  /**
   * –û—Ç–∑—ã–≤ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async revokeUserCodes(userId: string): Promise<void> {
    await this.twoFactorCodeRepo.update(
      {
        userId,
        status: TwoFactorStatus.PENDING,
      },
      {
        status: TwoFactorStatus.EXPIRED,
      },
    );
  }
}
