import { Controller, Post, Get, Body, UseGuards, Logger } from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth } from '@nestjs/swagger';
import { NfaService } from '../services/nfa.service';
import { JwtAuthGuard } from '../guards/jwt-auth.guard';
import { CurrentUser } from '../decorators/current-user.decorator';
import { Public } from '../decorators/public.decorator';

@ApiTags('nfa')
@Controller('auth/nfa')
export class NfaController {
  constructor(private readonly nfaService: NfaService) {}

  @Post('send-codes')
  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth()
  @ApiOperation({ summary: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥—ã –¥–ª—è –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ nFA' })
  @ApiResponse({ status: 200, description: '–ö–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã' })
  async sendCodes(@CurrentUser() user: any) {
    const userId = user.id || user.userId;
    if (!userId) {
      throw new Error('User ID not found in token');
    }
    return this.nfaService.sendNfaCodes(userId);
  }

  @Post('send-codes/public')
  @Public()
  @ApiOperation({ summary: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥—ã nFA –ø–æ userId (–ø—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ª–æ–≥–∏–Ω–∞)' })
  @ApiResponse({ status: 200, description: '–ö–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã' })
  async sendCodesPublic(@Body() body: { userId: string }) {
    const logger = new Logger(NfaController.name);
    logger.log(`üì® [sendCodesPublic] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É nFA –∫–æ–¥–æ–≤ –¥–ª—è userId: ${body?.userId}`);
    
    if (!body.userId) {
      logger.error(`‚ùå [sendCodesPublic] User ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞`);
      throw new Error('User ID is required');
    }
    
    logger.log(`‚úÖ [sendCodesPublic] –í—ã–∑—ã–≤–∞–µ–º sendNfaCodes –¥–ª—è userId: ${body.userId}`);
    const result = await this.nfaService.sendNfaCodes(body.userId);
    logger.log(`‚úÖ [sendCodesPublic] –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: ${JSON.stringify(result)}`);
    return result;
  }

  @Post('verify-method')
  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth()
  @ApiOperation({ summary: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ nFA' })
  @ApiResponse({ status: 200, description: '–ö–æ–¥ –ø—Ä–æ–≤–µ—Ä–µ–Ω' })
  async verifyMethod(
    @CurrentUser() user: any,
    @Body() body: { method: string; code: string },
  ) {
    const userId = user.id || user.userId;
    if (!userId) {
      throw new Error('User ID not found in token');
    }
    return this.nfaService.verifyMethodCode(userId, body.method, body.code);
  }

  @Post('verify-method/public')
  @Public()
  @ApiOperation({ summary: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ nFA –ø–æ userId (–ø—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ª–æ–≥–∏–Ω–∞)' })
  @ApiResponse({ status: 200, description: '–ö–æ–¥ –ø—Ä–æ–≤–µ—Ä–µ–Ω' })
  async verifyMethodPublic(@Body() body: { userId: string; method: string; code: string }) {
    if (!body.userId || !body.method || !body.code) {
      throw new Error('userId, method and code are required');
    }
    return this.nfaService.verifyMethodCode(body.userId, body.method, body.code);
  }

  @Get('status')
  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth()
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ nFA' })
  @ApiResponse({ status: 200, description: '–°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω' })
  async getStatus(@CurrentUser() user: any) {
    const userId = user.id || user.userId;
    if (!userId) {
      throw new Error('User ID not found in token');
    }
    return this.nfaService.getVerificationStatus(userId);
  }

  @Post('configure')
  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth()
  @ApiOperation({ summary: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å nFA - –≤—ã–±—Ä–∞—Ç—å –º–µ—Ç–æ–¥—ã –∑–∞—â–∏—Ç—ã' })
  @ApiResponse({ status: 200, description: 'nFA –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞' })
  async configure(
    @CurrentUser() user: any,
    @Body() body: { methods: string[]; requiredMethods?: number },
  ) {
    const userId = user.id || user.userId;
    if (!userId) {
      throw new Error('User ID not found in token');
    }
    return this.nfaService.configureNfa(userId, body.methods, body.requiredMethods);
  }

  @Get('is-complete')
  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth()
  @ApiOperation({ summary: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ nFA –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è' })
  @ApiResponse({ status: 200, description: '–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏' })
  async isComplete(@CurrentUser() user: any) {
    const userId = user.id || user.userId;
    if (!userId) {
      throw new Error('User ID not found in token');
    }
    const isComplete = await this.nfaService.isNfaComplete(userId);
    return {
      complete: isComplete,
      message: isComplete ? '–í—Å–µ –º–µ—Ç–æ–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã' : '–û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤',
    };
  }
}

