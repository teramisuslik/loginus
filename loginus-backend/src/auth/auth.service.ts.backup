import { Injectable, UnauthorizedException, ConflictException, BadRequestException } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { JwtService } from '@nestjs/jwt';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, IsNull, MoreThan } from 'typeorm';
import * as bcrypt from 'bcrypt';
import * as crypto from 'crypto';
import { User } from '../users/entities/user.entity';
import { RefreshToken } from './entities/refresh-token.entity';
import { TwoFactorCode, TwoFactorStatus, TwoFactorType } from './entities/two-factor-code.entity';
import { Role } from '../rbac/entities/role.entity';
import { UserRoleAssignment } from '../users/entities/user-role-assignment.entity';
import { UsersService } from '../users/users.service';
import { RbacService } from '../rbac/rbac.service';
import { LoginDto } from './dto/login.dto';
import { RegisterDto } from './dto/register.dto';
import { AuthResponseDto } from './dto/auth-response.dto';
import { SmartAuthDto, SmartAuthResponseDto } from './dto/smart-auth.dto';
import { BindPhoneDto, VerifyPhoneDto, BindPhoneResponseDto } from './dto/bind-phone.dto';
import { SendEmailVerificationDto, VerifyEmailDto, EmailVerificationResponseDto } from './dto/email-verification.dto';
import { EmailVerificationToken } from './entities/email-verification-token.entity';
import { EmailService } from './email.service';
import { JwtPayload } from './interfaces/jwt-payload.interface';
import { ReferralsService } from './micro-modules/referrals/referrals.service';

@Injectable()
export class AuthService {
  constructor(
    private usersService: UsersService,
    private jwtService: JwtService,
    private rbacService: RbacService,
    private referralsService: ReferralsService,
    private configService: ConfigService,
    @InjectRepository(RefreshToken)
    private refreshTokensRepo: Repository<RefreshToken>,
    @InjectRepository(TwoFactorCode)
    private twoFactorCodesRepo: Repository<TwoFactorCode>,
    @InjectRepository(Role)
    private rolesRepo: Repository<Role>,
    @InjectRepository(User)
    private usersRepo: Repository<User>,
    @InjectRepository(EmailVerificationToken)
    private emailVerificationTokensRepo: Repository<EmailVerificationToken>,
    @InjectRepository(UserRoleAssignment)
    private userRoleAssignmentRepo: Repository<UserRoleAssignment>,
    private emailService: EmailService,
  ) {}

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è super_admin, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - viewer
   */
  async register(dto: RegisterDto): Promise<AuthResponseDto> {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ email
    const exists = await this.usersService.findByEmail(dto.email);
    if (exists) {
      throw new ConflictException('Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è');
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ
    const userCount = await this.usersService.getUserCount();
    const isFirstUser = userCount === 0;

    // 3. –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    const salt = await bcrypt.genSalt(12);
    const passwordHash = await bcrypt.hash(dto.password, salt);

    // 4. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await this.usersService.create({
      email: dto.email,
      passwordHash,
      firstName: dto.firstName,
      lastName: dto.lastName,
      organizationId: dto.organizationId,
      teamId: dto.teamId,
    });

    // 5. –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ - –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è viewer
    // –†–æ–ª–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–≤—ã—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–º –∏–ª–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º
    try {
      const viewerRole = await this.rolesRepo.findOne({ where: { name: 'viewer' } });
      if (viewerRole) {
        // –ü—Ä—è–º–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ —á–µ—Ä–µ–∑ TypeORM (–æ–±—Ö–æ–¥–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏)
        await this.usersRepo
          .createQueryBuilder()
          .relation(User, 'roles')
          .of(user.id)
          .add(viewerRole.id);
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ viewer');
      } else {
        console.log('‚ö†Ô∏è –†–æ–ª—å viewer –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –±–µ–∑ —Ä–æ–ª–∏');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏ viewer:', error.message);
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—è–º–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
    const userWithRoles = await this.usersService.findByEmail(user.email, {
      relations: [" userRoleAssignments, SerRoleAssignments.role, SerRoleAssignments.role.permissions, organizations, 	eams],
    });

    if (!userWithRoles) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞
    const accessToken = await this.generateAccessToken(userWithRoles as User);
    const refreshToken = await this.generateRefreshToken(userWithRoles as User);

    return {
      accessToken,
      refreshToken,
      user: this.sanitizeUser(userWithRoles as User),
    };
  }

  /**
   * –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
   */
  async login(dto: LoginDto): Promise<AuthResponseDto | { requires2FA: true; message: string; userId: string }> {
    // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è credentials
    const user = await this.validateUser(dto.email, dto.password);

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ 2FA
    if (user.twoFactorEnabled) {
      return {
        requires2FA: true,
        message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è',
        userId: user.id,
      };
    }

    // 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    const accessToken = await this.generateAccessToken(user);
    const refreshToken = await this.generateRefreshToken(user);

    // 4. –í–æ–∑–≤—Ä–∞—Ç –¥–∞–Ω–Ω—ã—Ö
    return {
      accessToken,
      refreshToken,
      user: this.sanitizeUser(user),
    };
  }

  /**
   * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Ö–æ–¥–∞ —Å 2FA
   */
  async complete2FALogin(userId: string, code: string): Promise<AuthResponseDto> {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await this.usersService.findById(userId);

    if (!user) {
      throw new UnauthorizedException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (!user.twoFactorEnabled) {
      throw new UnauthorizedException('2FA –Ω–µ –≤–∫–ª—é—á–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–ª–∏ –∏ –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userWithRoles = await this.usersService.findById(userId);
    if (!userWithRoles) {
      throw new UnauthorizedException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º 2FA –∫–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    const twoFactorCode = await this.twoFactorCodesRepo.findOne({
      where: {
        contact: user.email,
        code: code,
        expiresAt: MoreThan(new Date()),
        status: TwoFactorStatus.PENDING,
      },
    });

    if (!twoFactorCode) {
      throw new BadRequestException('–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç—ë–∫—à–∏–π 2FA –∫–æ–¥');
    }

    // –ü–æ–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    await this.twoFactorCodesRepo.update(twoFactorCode.id, { 
      status: TwoFactorStatus.USED,
      verifiedAt: new Date()
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
    const accessToken = await this.generateAccessToken(userWithRoles);
    const refreshToken = await this.generateRefreshToken(userWithRoles);

    return {
      accessToken,
      refreshToken,
      user: this.sanitizeUser(userWithRoles),
    };
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—è
   */
  async validateUser(email: string, password: string): Promise<User> {
    const user = await this.usersService.findByEmail(email, {
      select: ['id', 'email', 'passwordHash', 'isActive', 'emailVerified', 'twoFactorEnabled'],
      relations: ['organizations', 'teams'],
    });

    if (!user) {
      throw new UnauthorizedException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    console.log('üîç User roles:', user.roles?.length || 0);
    console.log('üîç User permissions:', user.roles?.flatMap(r => r.permissions)?.length || 0);

    if (!user.isActive) {
      throw new UnauthorizedException('–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
    }

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
    if (!user.passwordHash) {
      throw new UnauthorizedException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –ø–∞—Ä–æ–ª—è');
    }
    
    console.log('üîê Password comparison:');
    console.log('  Input password:', password);
    console.log('  Stored hash:', user.passwordHash);
    
    const isPasswordValid = await bcrypt.compare(password, user.passwordHash);
    console.log('  Is valid:', isPasswordValid);
    
    if (!isPasswordValid) {
      throw new UnauthorizedException('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
    }

    return user;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Access Token (JWT)
   */
  async generateAccessToken(user: User): Promise<string> {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–ª–∏ –∏ –ø—Ä–∞–≤–∞ —á–µ—Ä–µ–∑ UserRoleAssignment
    const roleAssignments = await this.userRoleAssignmentRepo.find({
      where: { userId: user.id },
      relations: ['role', 'role.permissions'],
    });

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ –∏ –ø—Ä–∞–≤–∞
    const roles = [...new Set(roleAssignments.map(ra => ra.role.name))];
    const permissions = [
      ...new Set(
        roleAssignments.flatMap(ra => ra.role.permissions.map(p => p.name))
      ),
    ];

    const payload: JwtPayload = {
      sub: user.id,
      email: user.email,
      organizationId: user.organizations?.[0]?.id || null, // –ü–µ—Ä–≤–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
      teamId: user.teams?.[0]?.id || null, // –ü–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
      roles,
      permissions,
    };

    return this.jwtService.sign(payload, {
      expiresIn: '15m',
    });
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Refresh Token (UUID + —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î)
   */
  async generateRefreshToken(user: User): Promise<string> {
    const token = crypto.randomUUID();
    const expiresAt = new Date();
    expiresAt.setDate(expiresAt.getDate() + 7); // +7 –¥–Ω–µ–π

    await this.refreshTokensRepo.save({
      token,
      userId: user.id,
      expiresAt,
      isRevoked: false,
    });

    return token;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Access Token —á–µ—Ä–µ–∑ Refresh Token
   */
  async refreshAccessToken(refreshToken: string): Promise<string> {
    const tokenRecord = await this.refreshTokensRepo.findOne({
      where: { token: refreshToken },
      relations: ['user', 'user.roles', 'user.roles.permissions'],
    });

    if (!tokenRecord) {
      throw new UnauthorizedException('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π refresh token');
    }

    if (tokenRecord.isRevoked) {
      throw new UnauthorizedException('Refresh token –æ—Ç–æ–∑–≤–∞–Ω');
    }

    if (tokenRecord.expiresAt < new Date()) {
      throw new UnauthorizedException('Refresh token –∏—Å—Ç—ë–∫');
    }

    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∫–ª—é—á–µ–Ω 2FA, —Ç—Ä–µ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if (tokenRecord.user.twoFactorEnabled) {
      throw new UnauthorizedException('–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å 2FA');
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ Access Token
    return this.generateAccessToken(tokenRecord.user);
  }

  /**
   * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–æ—Ç–∑—ã–≤ Refresh Token)
   */
  async logout(refreshToken: string): Promise<void> {
    await this.refreshTokensRepo.update(
      { token: refreshToken },
      { isRevoked: true }
    );
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getCurrentUser(userId: string): Promise<any> {
    const user = await this.usersService.findById(userId, {
      relations: ['organizations', 'teams'] as any,
    } as any);

    if (!user) {
      throw new UnauthorizedException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–ª–∏ –∏ –ø—Ä–∞–≤–∞ —á–µ—Ä–µ–∑ UserRoleAssignment
    const roleAssignments = await this.userRoleAssignmentRepo.find({
      where: { userId },
      relations: ['role', 'role.permissions'],
    });

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ –∏ –ø—Ä–∞–≤–∞
    const roles = [...new Set(roleAssignments.map(ra => ra.role.name))];
    const permissions = [
      ...new Set(
        roleAssignments.flatMap(ra => ra.role.permissions.map(p => p.name))
      ),
    ];

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—è–º–∏ –∏ –ø—Ä–∞–≤–∞–º–∏
    return {
      id: user.id,
      email: user.email,
      firstName: user.firstName,
      lastName: user.lastName,
      avatarUrl: user.avatarUrl,
      phone: user.phone,
      organizationId: user.organizations?.[0]?.id || null,
      teamId: user.teams?.[0]?.id || null,
      isActive: user.isActive,
      emailVerified: user.emailVerified,
      twoFactorEnabled: user.twoFactorEnabled,
      twoFactorMethods: user.twoFactorMethods,
      phoneVerified: user.phoneVerified,
      roles,
      permissions,
      organizations: user.organizations,
      teams: user.teams,
      createdAt: user.createdAt,
      updatedAt: user.updatedAt,
    };
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö permissions –∏–∑ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private extractPermissions(roles: any[]): string[] {
    const permissions = new Set<string>();
    
    roles.forEach(role => {
      if (role.permissions) {
        role.permissions.forEach(perm => {
          permissions.add(perm.name);
        });
      }
    });

    return Array.from(permissions);
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ User
   */
  private sanitizeUser(user: User): Partial<User> {
    const { passwordHash, ...safeUser } = user;
    return safeUser;
  }

  /**
   * –£–º–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async smartAuth(dto: SmartAuthDto): Promise<SmartAuthResponseDto> {
    try {
      // 1. –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
      const existingUser = await this.usersService.findByEmail(dto.email, {
        select: ['id', 'email', 'passwordHash', 'isActive', 'emailVerified', 'firstName', 'lastName'],
        relations: [" userRoleAssignments, SerRoleAssignments.role, SerRoleAssignments.role.permissions, organizations, 	eams],
      });

      if (existingUser) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å
        if (!existingUser.passwordHash) {
          return {
            success: false,
            message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –ø–∞—Ä–æ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è.',
          };
        }
        
        const isPasswordValid = await bcrypt.compare(dto.password, existingUser.passwordHash);
        
        if (!isPasswordValid) {
          return {
            success: false,
            message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å',
          };
        }

        if (!existingUser.isActive) {
          return {
            success: false,
            message: '–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω',
          };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω—ã –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const missingFields: string[] = [];
        if (!existingUser.firstName) missingFields.push('firstName');
        if (!existingUser.lastName) missingFields.push('lastName');

        if (missingFields.length > 0) {
          return {
            success: true,
            message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ –Ω—É–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
            needsAdditionalInfo: true,
            missingFields,
            user: this.sanitizeUser(existingUser),
          };
        }

        // –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        const accessToken = await this.generateAccessToken(existingUser);
        const refreshToken = await this.generateRefreshToken(existingUser);

        return {
          success: true,
          message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
          accessToken,
          refreshToken,
          user: this.sanitizeUser(existingUser),
        };
      } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const salt = await bcrypt.genSalt(12);
        const passwordHash = await bcrypt.hash(dto.password, salt);

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const userData = {
          email: dto.email,
          passwordHash,
          firstName: dto.firstName && dto.firstName.trim() ? dto.firstName.trim() : undefined,
          lastName: dto.lastName && dto.lastName.trim() ? dto.lastName.trim() : undefined,
          isActive: true,
          emailVerified: false,
        };

        const savedUser: User = await this.usersRepo.save(userData);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
        if (dto.referralCode) {
          try {
            console.log(`üîó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${dto.referralCode}`);
            const referralResult = await this.referralsService.attachReferralToUser(
              savedUser.id,
              dto.referralCode
            );
            
            if (referralResult.success) {
              console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${savedUser.email} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ä–µ—Ñ–µ—Ä–∞–ª—É ${referralResult.referrerId}`);
            } else {
              console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${dto.referralCode}`);
            }
          } catch (error) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞:', error.message);
          }
        }

        // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å viewer
        try {
          const viewerRole = await this.rolesRepo.findOne({ where: { name: 'viewer' } });
          if (viewerRole) {
            await this.usersRepo
              .createQueryBuilder()
              .relation(User, 'roles')
              .of(savedUser.id)
              .add(viewerRole.id);
            console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ viewer');
          }
        } catch (error) {
          console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏ viewer:', error.message);
        }

        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—è–º–∏
        const userWithRoles = await this.usersService.findByEmail(dto.email, {
          relations: [" userRoleAssignments, SerRoleAssignments.role, SerRoleAssignments.role.permissions, organizations, 	eams],
        });

        if (!userWithRoles) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—è–º–∏');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω—ã –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const missingFields: string[] = [];
        if (!dto.firstName) missingFields.push('firstName');
        if (!dto.lastName) missingFields.push('lastName');

        if (missingFields.length > 0) {
          return {
            success: true,
            message: '–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω—É–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
            needsAdditionalInfo: true,
            missingFields,
            user: this.sanitizeUser(userWithRoles),
          };
        }

        // –ü–æ–ª–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        const accessToken = await this.generateAccessToken(userWithRoles);
        const refreshToken = await this.generateRefreshToken(userWithRoles);

        return {
          success: true,
          message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
          accessToken,
          refreshToken,
          user: this.sanitizeUser(userWithRoles),
        };
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ smartAuth:', error);
      return {
        success: false,
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
      };
    }
  }

  /**
   * –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   */
  async completeUserInfo(userId: string, firstName: string, lastName: string, referralCode?: string): Promise<SmartAuthResponseDto> {
    try {
      await this.usersRepo.update(userId, { firstName, lastName });
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
      if (referralCode) {
        try {
          console.log(`üîó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤ completeUserInfo: ${referralCode}`);
          const referralResult = await this.referralsService.attachReferralToUser(
            userId,
            referralCode
          );
          
          if (referralResult.success) {
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ä–µ—Ñ–µ—Ä–∞–ª—É ${referralResult.referrerId}`);
          } else {
            console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${referralCode}`);
          }
        } catch (error) {
          console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –≤ completeUserInfo:', error.message);
        }
      }
      
      const updatedUser = await this.usersService.findById(userId);

      if (!updatedUser) {
        return {
          success: false,
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        };
      }

      const accessToken = await this.generateAccessToken(updatedUser);
      const refreshToken = await this.generateRefreshToken(updatedUser);

      return {
        success: true,
        message: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
        accessToken,
        refreshToken,
        user: this.sanitizeUser(updatedUser),
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ completeUserInfo:', error);
      return {
        success: false,
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
      };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –∫–æ–¥–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   */
  async sendPhoneVerificationCode(dto: BindPhoneDto, userId: string): Promise<BindPhoneResponseDto> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const existingUser = await this.usersService.findByPhone(dto.phone);
      if (existingUser && existingUser.id !== userId) {
        return {
          success: false,
          message: '–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É',
        };
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      const verificationCode = Math.floor(100000 + Math.random() * 900000).toString();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const twoFactorCode = this.twoFactorCodesRepo.create({
        userId,
        code: verificationCode,
        type: TwoFactorType.SMS,
        expiresAt: new Date(Date.now() + 5 * 60 * 1000), // 5 –º–∏–Ω—É—Ç
        status: TwoFactorStatus.PENDING,
      });
      
      await this.twoFactorCodesRepo.save(twoFactorCode);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ SMS —Å–µ—Ä–≤–∏—Å–∞)
      console.log(`üì± SMS –∫–æ–¥ –¥–ª—è ${dto.phone}: ${verificationCode}`);
      
      // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥
      return {
        success: true,
        message: 'SMS —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
        verificationCode: verificationCode, // –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS –∫–æ–¥–∞:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS –∫–æ–¥–∞',
      };
    }
  }

  /**
   * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   */
  async verifyPhoneCode(dto: VerifyPhoneDto, userId: string): Promise<BindPhoneResponseDto> {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      const verificationCode = await this.twoFactorCodesRepo.findOne({
        where: {
          userId,
          code: dto.code,
          type: TwoFactorType.SMS,
          status: TwoFactorStatus.PENDING,
        },
      });

      if (!verificationCode) {
        return {
          success: false,
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∫–æ–¥
      if (verificationCode.expiresAt < new Date()) {
        return {
          success: false,
          message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫',
        };
      }

      // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await this.usersRepo.update(userId, {
        phone: dto.phone,
        phoneVerified: true,
      });

      // –ü–æ–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
      await this.twoFactorCodesRepo.update(verificationCode.id, {
        status: TwoFactorStatus.USED,
      });

      return {
        success: true,
        message: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É',
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
      };
    }
  }

  /**
   * –û—Ç–≤—è–∑–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   */
  async unbindPhone(userId: string): Promise<{ success: boolean; message: string }> {
    try {
      await this.usersRepo.update(userId, {
        phone: null,
        phoneVerified: false,
      });

      return {
        success: true,
        message: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞',
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–≤—è–∑–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –æ—Ç–≤—è–∑–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
      };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º email
   */
  async sendEmailVerification(dto: SendEmailVerificationDto): Promise<EmailVerificationResponseDto> {
    try {
      const user = await this.usersService.findByEmail(dto.email);
      if (!user) {
        return {
          success: false,
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω',
        };
      }

      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ emailVerified:', user.emailVerified);
      if (user.emailVerified) {
        console.log('‚úÖ Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º');
        return {
          success: true,
          message: 'Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
        };
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      const token = crypto.randomBytes(32).toString('hex');
      const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 —á–∞—Å–∞

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –ë–î
      const verificationToken = this.emailVerificationTokensRepo.create({
        token,
        userId: user.id,
        email: user.email,
        expiresAt,
        isUsed: false,
        status: 'pending',
      });

      await this.emailVerificationTokensRepo.save(verificationToken);

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      const frontendUrl = this.configService.get<string>('FRONTEND_URL') || 'http://localhost:3000';
      const verificationLink = `${frontendUrl}/?verify-email=true&token=${token}`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ
      try {
        await this.emailService.sendEmailVerification(dto.email, verificationLink);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞:', error);
        // Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –≤ –ª–æ–≥–∞—Ö
        console.log(`üìß Fallback - —Å—Å—ã–ª–∫–∞ –¥–ª—è ${dto.email}:`);
        console.log(`üîó –°—Å—ã–ª–∫–∞: ${verificationLink}`);
      }

      return {
        success: true,
        message: '–ü–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à email',
        verificationToken: token, // –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
      };
    }
  }

  /**
   * –í—Ö–æ–¥ –ø–æ –∫–æ–¥—É —Å –ø–æ—á—Ç—ã (2FA)
   */
  async verifyEmail2FACode(email: string, code: string): Promise<any> {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º 2FA –∫–æ–¥ –¥–ª—è email:', email);
      console.log('üî¢ –ö–æ–¥:', code);

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await this.usersService.findByEmail(email);
      if (!user) {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        throw new UnauthorizedException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –ù–∞—Ö–æ–¥–∏–º –∫–æ–¥ –≤ –ë–î
      const twoFactorCode = await this.twoFactorCodesRepo.findOne({
        where: {
          contact: email,
          code: code,
          type: 'email' as any,
          status: 'pending' as any
        }
      });

      if (!twoFactorCode) {
        console.log('‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π');
        throw new UnauthorizedException('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç—ë–∫ –ª–∏ –∫–æ–¥ (5 –º–∏–Ω—É—Ç)
      const now = new Date();
      const codeAge = now.getTime() - twoFactorCode.createdAt.getTime();
      const fiveMinutes = 5 * 60 * 1000;

      if (codeAge > fiveMinutes) {
        console.log('‚ùå –ö–æ–¥ –∏—Å—Ç—ë–∫');
        throw new UnauthorizedException('–ö–æ–¥ –∏—Å—Ç—ë–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥');
      }

      // –ü–æ–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
      await this.twoFactorCodesRepo.update(twoFactorCode.id, {
        status: 'used' as any
      });

      console.log('‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã');

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
      const accessToken = await this.generateAccessToken(user);
      const refreshToken = await this.generateRefreshToken(user);

      return {
        accessToken,
        refreshToken,
        user: this.sanitizeUser(user)
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ 2FA –∫–æ–¥–∞:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email –ø–æ —Ç–æ–∫–µ–Ω—É
   */
  async verifyEmailToken(token: string): Promise<EmailVerificationResponseDto> {
    try {
      console.log('üîç –ò—â–µ–º —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:', token);
      
      // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–∫–µ–Ω –≤ –ë–î
      const verificationToken = await this.emailVerificationTokensRepo.findOne({
        where: { token, isUsed: false },
        relations: ['user'],
      });

      if (!verificationToken) {
        console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω');
        return {
          success: false,
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç—ë–∫—à–∏–π —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç—ë–∫ –ª–∏ —Ç–æ–∫–µ–Ω
      if (verificationToken.expiresAt < new Date()) {
        console.log('‚ùå –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫');
        return {
          success: false,
          message: '–¢–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç—ë–∫',
        };
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.usersService.update(verificationToken.user.id, {
        emailVerified: true,
      });

      // –ü–æ–º–µ—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
      verificationToken.isUsed = true;
      verificationToken.status = 'verified' as any;
      await this.emailVerificationTokensRepo.save(verificationToken);

      console.log('‚úÖ Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', verificationToken.user.email);

      return {
        success: true,
        message: 'Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email',
      };
    }
  }

  /**
   * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email –ø–æ —Ç–æ–∫–µ–Ω—É
   */
  async verifyEmail(dto: VerifyEmailDto): Promise<EmailVerificationResponseDto> {
    try {
      const verificationToken = await this.emailVerificationTokensRepo.findOne({
        where: { token: dto.token },
        relations: ['user'],
      });

      if (!verificationToken) {
        return {
          success: false,
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
        };
      }

      if (verificationToken.isUsed) {
        return {
          success: false,
          message: '–¢–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω',
        };
      }

      if (verificationToken.expiresAt < new Date()) {
        return {
          success: false,
          message: '–¢–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫',
        };
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.usersRepo.update(verificationToken.userId, {
        emailVerified: true,
      });

      // –ü–æ–º–µ—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
      await this.emailVerificationTokensRepo.update(verificationToken.id, {
        isUsed: true,
        status: 'verified',
      });

      // –ü–æ–≤—ã—à–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å viewer –Ω–∞ editor)
      // –ò—â–µ–º —Ä–æ–ª—å editor –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–µ
      console.log('üîç –ò—â–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ä–æ–ª—å editor...');
      const editorRole = await this.rolesRepo.findOne({
        where: { 
          name: 'editor',
          organizationId: IsNull(),
          teamId: IsNull()
        },
      });

      console.log('üîç –ù–∞–π–¥–µ–Ω–Ω–∞—è —Ä–æ–ª—å editor:', editorRole);

      if (editorRole) {
        console.log('üîç –ó–∞–º–µ–Ω—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ editor:', verificationToken.userId);
        await this.rbacService.replaceUserRole(
          verificationToken.userId,
          editorRole.id,
          'system', // –°–∏—Å—Ç–µ–º–∞ –ø–æ–≤—ã—à–∞–µ—Ç —Ä–æ–ª—å
        );
        console.log('‚úÖ –†–æ–ª—å editor —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ (–∑–∞–º–µ–Ω–µ–Ω–∞)');
      } else {
        console.log('‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ä–æ–ª—å editor –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ä–æ–ª–∏');
      }

      return {
        success: true,
        message: 'Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –í–∞—à–∞ —Ä–æ–ª—å –ø–æ–≤—ã—à–µ–Ω–∞ –¥–æ editor.',
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email',
      };
    }
  }
}