import { Injectable, Logger, BadRequestException } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { AuthMethodType } from '../enums/auth-method-type.enum';
import { PhoneVerificationResult, MessengerMetadata } from '../interfaces/multi-auth.interface';

@Injectable()
export class PhoneAuthService {
  private readonly logger = new Logger(PhoneAuthService.name);
  private storedCodes = new Map<string, { code: string; expiresAt: Date }>(); // –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–¥–æ–≤ –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –º–æ–∫-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

  constructor(private configService: ConfigService) {}

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –∫–æ–¥–∞ —á–µ—Ä–µ–∑ WhatsApp
   */
  async sendWhatsAppCode(
    phoneNumber: string,
    code: string,
    purpose: string = 'verification',
  ): Promise<PhoneVerificationResult> {
    try {
      const whatsappApiUrl = this.configService.get<string>('WHATSAPP_API_URL');
      const whatsappToken = this.configService.get<string>('WHATSAPP_TOKEN');
      
      if (!whatsappApiUrl || !whatsappToken) {
        this.logger.warn('‚ö†Ô∏è WhatsApp API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock —Ä–µ–∂–∏–º');
        return this.sendCodeMock(phoneNumber, code, purpose, 'whatsapp');
      }

      // –†–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å WhatsApp Business API
      const message = this.formatWhatsAppMessage(code, purpose);
      
      const response = await fetch(`${whatsappApiUrl}/messages`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${whatsappToken}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          to: phoneNumber,
          type: 'text',
          text: {
            body: message,
          },
        }),
      });

      if (!response.ok) {
        throw new Error(`WhatsApp API error: ${response.statusText}`);
      }

      const result = await response.json();
      
      this.logger.log(`WhatsApp –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${phoneNumber}: ${code}`);
      
      return {
        success: true,
        code,
        expiresAt: new Date(Date.now() + 10 * 60 * 1000), // 10 –º–∏–Ω—É—Ç
      };

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WhatsApp –∫–æ–¥–∞: ${error.message}`);
      return {
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ —á–µ—Ä–µ–∑ WhatsApp',
      };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram Bot
   */
  async sendTelegramCode(
    phoneNumber: string,
    code: string,
    purpose: string = 'verification',
  ): Promise<PhoneVerificationResult> {
    try {
      const telegramBotToken = this.configService.get<string>('TELEGRAM_BOT_TOKEN');
      const telegramChatId = this.configService.get<string>('TELEGRAM_CHAT_ID');
      
      if (!telegramBotToken || !telegramChatId) {
        this.logger.warn('‚ö†Ô∏è Telegram Bot –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∫–æ–¥ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –ª–æ–≥–∞—Ö');
        return this.sendCodeMock(phoneNumber, code, purpose, 'telegram');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ Telegram —á–∞—Ç
      const message = `üîê –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è ${phoneNumber}: ${code}\n\n‚è∞ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç\n\n‚ÑπÔ∏è Purpose: ${purpose}`;
      
      const response = await fetch(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: telegramChatId,
          text: message,
          parse_mode: 'HTML',
        }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        this.logger.error(`Telegram API error: ${JSON.stringify(errorData)}`);
        throw new Error(`Telegram API error: ${response.statusText}`);
      }

      const result = await response.json();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      this.storedCodes.set(phoneNumber, {
        code,
        expiresAt: new Date(Date.now() + 10 * 60 * 1000),
      });
      
      this.logger.log(`‚úÖ Telegram –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä ${phoneNumber}: ${code}`);
      this.logger.log(`üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram —á–∞—Ç (chat_id: ${telegramChatId})`);
      
      return {
        success: true,
        code,
        expiresAt: new Date(Date.now() + 10 * 60 * 1000),
      };

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram –∫–æ–¥–∞: ${error.message}`);
      // Fallback –Ω–∞ mock –µ—Å–ª–∏ Telegram –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
      return this.sendCodeMock(phoneNumber, code, purpose, 'telegram');
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —á–µ—Ä–µ–∑ SmsAero
   */
  private async sendSmsViaSmsaero(
    phoneNumber: string,
    code: string,
    purpose: string,
  ): Promise<PhoneVerificationResult> {
    const email = this.configService.get<string>('SMSAERO_EMAIL') || '';
    const apiKey = this.configService.get<string>('SMSAERO_API_KEY') || '';
    const from = this.configService.get<string>('SMSAERO_FROM') || 'Loginus';
    
    const formattedPhone = this.formatPhoneForSms(phoneNumber);
    const message = `–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${code}. –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç.`;
    
    const crypto = require('crypto');
    const passwordHash = crypto.createHash('md5').update(apiKey).digest('hex');
    
    const params = new URLSearchParams();
    params.append('user', email);
    params.append('password', passwordHash);
    params.append('to', formattedPhone);
    params.append('text', message);
    params.append('from', from);
    params.append('answer', 'json');
    
    const response = await fetch(`https://gate.smsaero.ru/send/?${params.toString()}`, {
      method: 'GET',
    });

    const result = await response.json();
    
    this.logger.log(`üì± SmsAero –æ—Ç–≤–µ—Ç: ${JSON.stringify(result)}`);
    
    if (!result.success) {
      throw new Error(`SmsAero error: ${result.message || 'Unknown error'}`);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    this.storedCodes.set(phoneNumber, {
      code,
      expiresAt: new Date(Date.now() + 10 * 60 * 1000),
    });
    
    this.logger.log(`‚úÖ SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${phoneNumber}: ${code}`);
    
    return {
      success: true,
      code,
      expiresAt: new Date(Date.now() + 10 * 60 * 1000),
    };
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è SMS (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)
   */
  private formatPhoneForSms(phone: string): string {
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    const digits = phone.replace(/\D/g, '');
    return digits;
  }

  /**
   * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä
   */
  async sendCode(
    phoneNumber: string,
    code: string,
    messenger: 'whatsapp' | 'telegram',
    purpose: string = 'verification',
  ): Promise<PhoneVerificationResult> {
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const normalizedPhone = this.normalizePhoneNumber(phoneNumber);
    
    if (!this.isValidPhoneNumber(normalizedPhone)) {
      return {
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
      };
    }

    switch (messenger) {
      case 'whatsapp':
        return this.sendWhatsAppCode(normalizedPhone, code, purpose);
      case 'telegram':
        return this.sendTelegramCode(normalizedPhone, code, purpose);
      default:
        return {
          success: false,
          error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä',
        };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
   */
  async verifyCode(
    phoneNumber: string,
    messengerType: 'WHATSAPP' | 'TELEGRAM',
    code: string,
    purpose: 'login' | 'registration' | 'verification',
  ): Promise<PhoneVerificationResult> {
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const normalizedPhone = this.normalizePhoneNumber(phoneNumber);
    
    if (!this.isValidPhoneNumber(normalizedPhone)) {
      return {
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –ø–∞–º—è—Ç–∏
    const stored = this.storedCodes.get(normalizedPhone);
    
    if (!stored) {
      this.logger.warn(`[MOCK] –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ${normalizedPhone}`);
      return {
        success: false,
        error: '–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫',
      };
    }

    if (stored.expiresAt < new Date()) {
      this.logger.warn(`[MOCK] –ö–æ–¥ –∏—Å—Ç–µ–∫ –¥–ª—è ${normalizedPhone}`);
      this.storedCodes.delete(normalizedPhone);
      return {
        success: false,
        error: '–ö–æ–¥ –∏—Å—Ç–µ–∫',
      };
    }

    if (stored.code !== code) {
      this.logger.warn(`[MOCK] –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–ª—è ${normalizedPhone}`);
      return {
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥',
      };
    }

    this.logger.log(`[MOCK] ‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω –¥–ª—è ${normalizedPhone}`);
    this.storedCodes.delete(normalizedPhone);
    
    return {
      success: true,
      code,
      expiresAt: stored.expiresAt,
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞–º
   */
  async getUserMessengerPreferences(userId: string): Promise<{
    whatsapp: boolean;
    telegram: boolean;
    preferred: 'whatsapp' | 'telegram' | null;
  }> {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    return {
      whatsapp: true,
      telegram: true,
      preferred: 'whatsapp',
    };
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞–º
   */
  async updateMessengerPreferences(
    userId: string,
    preferences: {
      whatsapp: boolean;
      telegram: boolean;
      preferred: 'whatsapp' | 'telegram' | null;
    },
  ): Promise<void> {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –≤ –ë–î
    this.logger.log(`–û–±–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, preferences);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   */
  async checkMessengerAvailability(
    phoneNumber: string,
    messenger: 'whatsapp' | 'telegram',
  ): Promise<boolean> {
    const normalizedPhone = this.normalizePhoneNumber(phoneNumber);
    
    try {
      switch (messenger) {
        case 'whatsapp':
          return await this.checkWhatsAppAvailability(normalizedPhone);
        case 'telegram':
          return await this.checkTelegramAvailability(normalizedPhone);
        default:
          return false;
      }
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ${messenger}: ${error.message}`);
      return false;
    }
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  private async checkWhatsAppAvailability(phoneNumber: string): Promise<boolean> {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ WhatsApp Business API
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    this.logger.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ WhatsApp –¥–ª—è ${phoneNumber}`);
    return true;
  }

  private async checkTelegramAvailability(phoneNumber: string): Promise<boolean> {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Telegram API
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    this.logger.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram –¥–ª—è ${phoneNumber}`);
    return true;
  }

  private normalizePhoneNumber(phoneNumber: string): string {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
    let normalized = phoneNumber.replace(/[^\d+]/g, '');
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ +7
    if (normalized.startsWith('8')) {
      normalized = '+7' + normalized.substring(1);
    }
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7, –¥–æ–±–∞–≤–ª—è–µ–º +
    if (normalized.startsWith('7') && !normalized.startsWith('+7')) {
      normalized = '+' + normalized;
    }
    
    return normalized;
  }

  private isValidPhoneNumber(phoneNumber: string): boolean {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const phoneRegex = /^\+[1-9]\d{1,14}$/;
    return phoneRegex.test(phoneNumber);
  }

  private formatWhatsAppMessage(code: string, purpose: string): string {
    const messages = {
      verification: `üîê –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${code}\n\n–≠—Ç–æ—Ç –∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.`,
      registration: `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${code}\n\n–≠—Ç–æ—Ç –∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.`,
      login: `üîë –ö–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞: ${code}\n\n–≠—Ç–æ—Ç –∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.`,
      password_reset: `üîÑ –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è\n\n–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${code}\n\n–≠—Ç–æ—Ç –∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.`,
    };

    return messages[purpose] || messages.verification;
  }

  private formatTelegramMessage(phoneNumber: string, code: string, purpose: string): string {
    const messages = {
      verification: `üîê <b>–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</b>\n\n–ù–æ–º–µ—Ä: ${phoneNumber}\n–ö–æ–¥: <code>${code}</code>\n\n‚è∞ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç`,
      registration: `üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n–ù–æ–º–µ—Ä: ${phoneNumber}\n–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: <code>${code}</code>\n\n‚è∞ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç`,
      login: `üîë <b>–ö–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞</b>\n\n–ù–æ–º–µ—Ä: ${phoneNumber}\n–ö–æ–¥: <code>${code}</code>\n\n‚è∞ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç`,
      password_reset: `üîÑ <b>–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è</b>\n\n–ù–æ–º–µ—Ä: ${phoneNumber}\n–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: <code>${code}</code>\n\n‚è∞ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç`,
    };

    return messages[purpose] || messages.verification;
  }

  /**
   * Mock –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –µ—Å–ª–∏ API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
   */
  private async sendCodeMock(
    phoneNumber: string,
    code: string,
    purpose: string,
    messenger: 'whatsapp' | 'telegram',
  ): Promise<PhoneVerificationResult> {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –ø–∞–º—è—Ç–∏
    this.storedCodes.set(phoneNumber, {
      code,
      expiresAt: new Date(Date.now() + 10 * 60 * 1000),
    });
    
    this.logger.log(`[MOCK] ${messenger.toUpperCase()} –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${phoneNumber}: ${code} (${purpose})`);
    this.logger.log(`üí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ ${messenger.toUpperCase()}_API_URL –∏ ${messenger.toUpperCase()}_TOKEN –≤ .env`);
    
    return {
      success: true,
      code,
      expiresAt: new Date(Date.now() + 10 * 60 * 1000),
    };
  }
}
