import { Injectable, Logger, Inject, forwardRef } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, Not, IsNull } from 'typeorm';
import { User } from '../../users/entities/user.entity';
import { AuthMethodType } from '../enums/auth-method-type.enum';
import { EmailTwoFactorService } from '../micro-modules/two-factor/email/email-2fa.service';
import { TelegramTwoFactorService } from '../micro-modules/two-factor/telegram/telegram-2fa.service';
import { GitHubTwoFactorService } from '../micro-modules/two-factor/github/github-2fa.service';
import { TwoFactorCode, TwoFactorType } from '../entities/two-factor-code.entity';

export interface NfaVerificationResult {
  success: boolean;
  verifiedMethods: string[];
  pendingMethods: string[];
  message?: string;
}

@Injectable()
export class NfaService {
  private readonly logger = new Logger(NfaService.name);
  // –ó–∞—â–∏—Ç–∞ –æ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private readonly sendingCodes = new Map<string, Promise<{ success: boolean; sentMethods: string[]; message: string }>>();

  constructor(
    @InjectRepository(User)
    private usersRepo: Repository<User>,
    @InjectRepository(TwoFactorCode)
    private twoFactorCodeRepo: Repository<TwoFactorCode>,
    @Inject(forwardRef(() => EmailTwoFactorService))
    private emailTwoFactorService: EmailTwoFactorService,
    @Inject(forwardRef(() => TelegramTwoFactorService))
    private telegramTwoFactorService: TelegramTwoFactorService,
    @Inject(forwardRef(() => GitHubTwoFactorService))
    private githubTwoFactorService: GitHubTwoFactorService,
  ) {}

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–æ–≤ –¥–ª—è –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ nFA
   */
  async sendNfaCodes(userId: string): Promise<{ success: boolean; sentMethods: string[]; message: string }> {
    this.logger.log(`üöÄ [sendNfaCodes] –í–´–ó–í–ê–ù–ê –§–£–ù–ö–¶–ò–Ø sendNfaCodes –¥–ª—è userId: ${userId}`);
    
    // –í–ê–ñ–ù–û: –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è nFA
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–¥—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø—Ä–∏—à–ª–∏
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–Ω–µ —Å—Ç–∞—Ä—à–µ 30 —Å–µ–∫—É–Ω–¥)
    const existingPromise = this.sendingCodes.get(userId);
    if (existingPromise) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ promise (–Ω–æ –æ–Ω –µ—â–µ –≤ –º–∞–ø–µ)
      // –î–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
      this.logger.warn(`‚ö†Ô∏è [sendNfaCodes] –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π promise –¥–ª—è userId ${userId}`);
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å promise (–Ω–æ –Ω–µ –∂–¥–µ–º –µ–≥–æ)
        // –ï—Å–ª–∏ promise —É–∂–µ resolved/rejected, –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã–ª —É–¥–∞–ª–∏—Ç—å—Å—è –∏–∑ –º–∞–ø—ã
        // –ù–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        this.logger.log(`‚úÖ [sendNfaCodes] –†–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è userId ${userId}`);
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ
      }
    }
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π promise –µ—Å–ª–∏ –µ—Å—Ç—å (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –æ–Ω –∑–∞–≤–∏—Å)
    this.sendingCodes.delete(userId);
    
    // –°–æ–∑–¥–∞–µ–º promise –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–æ–≤
    const sendPromise = this._sendNfaCodesInternal(userId);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º promise –≤ –º–∞–ø–µ
    this.sendingCodes.set(userId, sendPromise);
    
    // –û—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π
    sendPromise
      .then(() => {
        this.logger.log(`‚úÖ [sendNfaCodes] Promise –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è userId ${userId}, —É–¥–∞–ª—è–µ–º –∏–∑ –º–∞–ø—ã`);
        this.sendingCodes.delete(userId);
      })
      .catch((error) => {
        this.logger.error(`‚ùå [sendNfaCodes] Promise –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π –¥–ª—è userId ${userId}: ${error.message}, —É–¥–∞–ª—è–µ–º –∏–∑ –º–∞–ø—ã`);
        this.sendingCodes.delete(userId);
      })
      .finally(() => {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –æ—á–∏—Å—Ç–∫–∏
        setTimeout(() => {
          if (this.sendingCodes.has(userId)) {
            this.logger.warn(`‚ö†Ô∏è [sendNfaCodes] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –º–∞–ø—ã –¥–ª—è userId ${userId}`);
            this.sendingCodes.delete(userId);
          }
        }, 60000); // –ß–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —É–¥–∞–ª—è–µ–º
      });
    
    return sendPromise;
  }
  
  /**
   * –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–æ–≤
   */
  private async _sendNfaCodesInternal(userId: string): Promise<{ success: boolean; sentMethods: string[]; message: string }> {
    this.logger.log(`üîç [sendNfaCodes] _sendNfaCodesInternal –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è userId: ${userId}`);
    try {
      const user = await this.usersRepo.findOne({ where: { id: userId } });
      
      if (!user) {
        this.logger.error(`‚ùå [sendNfaCodes] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: ${userId}`);
        return {
          success: false,
          sentMethods: [],
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        };
      }

      this.logger.log(`üë§ [sendNfaCodes] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${user.email}, mfaSettings: ${JSON.stringify(user.mfaSettings)}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ nFA
      if (!user.mfaSettings?.enabled) {
        this.logger.warn(`‚ö†Ô∏è [sendNfaCodes] nFA –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        return {
          success: false,
          sentMethods: [],
          message: 'nFA –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞',
        };
      }

      const selectedMethods = user.mfaSettings.methods || [];
      this.logger.log(`üìã [sendNfaCodes] –í—ã–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã: ${JSON.stringify(selectedMethods)}`);
      
      if (selectedMethods.length === 0) {
        this.logger.warn(`‚ö†Ô∏è [sendNfaCodes] –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–ª—è nFA`);
        return {
          success: false,
          sentMethods: [],
          message: '–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–ª—è nFA',
        };
      }

      const sentMethods: string[] = [];

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥—ã –¥–ª—è –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
      for (const method of selectedMethods) {
        try {
          switch (method) {
            case AuthMethodType.EMAIL:
                      this.logger.log(`üìß [sendNfaCodes] Sending EMAIL code for user ${userId}`);
                      if (user.email) {
                        const emailResult = await this.emailTwoFactorService.sendEmailCode(userId, user.email);
                        this.logger.log(`üìß [sendNfaCodes] EMAIL result: ${JSON.stringify(emailResult)}`);
              if (emailResult.success) {
                sentMethods.push('EMAIL');
                        }
                      } else {
                        this.logger.warn(`‚ö†Ô∏è User ${userId} has no email, skipping EMAIL code`);
              }
              break;

            case AuthMethodType.PHONE_TELEGRAM:
              this.logger.log(`üí¨ [sendNfaCodes] Sending TELEGRAM code for user ${userId}`);
              const telegramResult = await this.telegramTwoFactorService.sendTelegramCode(userId);
              this.logger.log(`üí¨ [sendNfaCodes] TELEGRAM result: ${JSON.stringify(telegramResult)}`);
              if (telegramResult.success) {
                sentMethods.push('PHONE_TELEGRAM');
              }
              break;

            case AuthMethodType.GITHUB:
              const githubResult = await this.githubTwoFactorService.sendGitHubCode(userId);
              if (githubResult.success) {
                sentMethods.push('GITHUB');
              }
              break;

            default:
              this.logger.warn(`–ú–µ—Ç–æ–¥ ${method} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è nFA`);
          }
        } catch (error) {
          this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –¥–ª—è –º–µ—Ç–æ–¥–∞ ${method}:`, error);
        }
      }

      if (sentMethods.length === 0) {
        return {
          success: false,
          sentMethods: [],
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥—ã –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –º–µ—Ç–æ–¥—É',
        };
      }

      return {
        success: true,
        sentMethods,
        message: `–ö–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ –º–µ—Ç–æ–¥–∞–º: ${sentMethods.join(', ')}`,
      };
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ nFA –∫–æ–¥–æ–≤:', error);
      return {
        success: false,
        sentMethods: [],
        message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–æ–≤',
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
   */
  async verifyMethodCode(
    userId: string,
    method: string,
    code: string,
  ): Promise<{ success: boolean; message: string }> {
    this.logger.log(`üîç [verifyMethodCode] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –¥–ª—è userId: ${userId}, method: ${method}, code: ${code}`);
    this.logger.log(`üîç [verifyMethodCode] AuthMethodType.PHONE_TELEGRAM = ${AuthMethodType.PHONE_TELEGRAM}`);
    this.logger.log(`üîç [verifyMethodCode] method === AuthMethodType.PHONE_TELEGRAM: ${method === AuthMethodType.PHONE_TELEGRAM}`);
    
    try {
      switch (method) {
        case AuthMethodType.EMAIL:
          this.logger.log(`üìß [verifyMethodCode] –ü—Ä–æ–≤–µ—Ä–∫–∞ EMAIL –∫–æ–¥–∞`);
          return await this.emailTwoFactorService.verifyEmailCode(userId, code);

        case AuthMethodType.PHONE_TELEGRAM:
          this.logger.log(`üí¨ [verifyMethodCode] –ü—Ä–æ–≤–µ—Ä–∫–∞ PHONE_TELEGRAM –∫–æ–¥–∞, –≤—ã–∑—ã–≤–∞–µ–º verifyTelegramCode`);
          return await this.telegramTwoFactorService.verifyTelegramCode(userId, code);

        case AuthMethodType.GITHUB:
          this.logger.log(`üêô [verifyMethodCode] –ü—Ä–æ–≤–µ—Ä–∫–∞ GITHUB –∫–æ–¥–∞`);
          return await this.githubTwoFactorService.verifyGitHubCode(userId, code);

        default:
          this.logger.warn(`‚ö†Ô∏è [verifyMethodCode] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥: ${method}`);
          return {
            success: false,
            message: `–ú–µ—Ç–æ–¥ ${method} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`,
          };
      }
    } catch (error) {
      this.logger.error(`‚ùå [verifyMethodCode] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –¥–ª—è –º–µ—Ç–æ–¥–∞ ${method}:`, error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞',
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ nFA
   */
  async getVerificationStatus(userId: string): Promise<NfaVerificationResult> {
    try {
      const user = await this.usersRepo.findOne({ where: { id: userId } });
      
      if (!user || !user.mfaSettings?.enabled) {
        return {
          success: false,
          verifiedMethods: [],
          pendingMethods: [],
          message: 'nFA –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞',
        };
      }

      const selectedMethods = user.mfaSettings.methods || [];
      const verifiedMethods: string[] = [];
      const pendingMethods: string[] = [];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –º–µ—Ç–æ–¥ - –∏—â–µ–º pending –∫–æ–¥—ã
      for (const method of selectedMethods) {
        const typeMap: Record<string, TwoFactorType> = {
          [AuthMethodType.EMAIL]: TwoFactorType.EMAIL,
          [AuthMethodType.PHONE_TELEGRAM]: TwoFactorType.TELEGRAM,
          [AuthMethodType.GITHUB]: TwoFactorType.GITHUB,
        };

        const twoFactorType = typeMap[method];
        if (!twoFactorType) {
          pendingMethods.push(method);
          continue;
        }

        // –ò—â–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–¥—ã (verified) –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞
        // –í–∞–∂–Ω–æ: –∏—â–µ–º –∫–æ–¥ —Å verifiedAt != null –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ verifiedAt DESC, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π
        const verifiedCode = await this.twoFactorCodeRepo.findOne({
          where: {
            userId,
            type: twoFactorType,
            status: 'used' as any,
            verifiedAt: Not(IsNull()) as any, // –¢–æ–ª—å–∫–æ –∫–æ–¥—ã —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º verifiedAt
          },
          order: { verifiedAt: 'DESC' },
        });

        if (verifiedCode) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–¥ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –Ω–µ–¥–∞–≤–Ω–æ (–≤ —Ç–µ—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ - –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç, —Ç–∞–∫ –∫–∞–∫ –∫–æ–¥—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã 10 –º–∏–Ω—É—Ç)
          const tenMinutesAgo = new Date(Date.now() - 10 * 60 * 1000);
          if (verifiedCode.verifiedAt && verifiedCode.verifiedAt > tenMinutesAgo) {
            verifiedMethods.push(method);
            this.logger.log(`‚úÖ –ú–µ—Ç–æ–¥ ${method} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω (verifiedAt: ${verifiedCode.verifiedAt})`);
          } else {
            pendingMethods.push(method);
            this.logger.log(`‚è≥ –ú–µ—Ç–æ–¥ ${method} –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –Ω–µ–¥–∞–≤–Ω–æ (verifiedAt: ${verifiedCode.verifiedAt || 'null'}, tenMinutesAgo: ${tenMinutesAgo})`);
          }
        } else {
          pendingMethods.push(method);
          this.logger.log(`‚è≥ –ú–µ—Ç–æ–¥ ${method} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–¥–∞—Ö`);
        }
      }

      const allVerified = pendingMethods.length === 0;

      return {
        success: allVerified,
        verifiedMethods,
        pendingMethods,
        message: allVerified
          ? '–í—Å–µ –º–µ—Ç–æ–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã'
          : `–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å: ${pendingMethods.join(', ')}`,
      };
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      return {
        success: false,
        verifiedMethods: [],
        pendingMethods: [],
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞',
      };
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ nFA - –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–æ–≤ –∑–∞—â–∏—Ç—ã
   */
  async configureNfa(
    userId: string,
    methods: string[],
    requiredMethods?: number,
  ): Promise<{ success: boolean; message: string }> {
    try {
      const user = await this.usersRepo.findOne({ where: { id: userId } });
      
      if (!user) {
        return {
          success: false,
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∞–∫–∫–∞—É–Ω—Ç—É
      const availableMethods: AuthMethodType[] = user.availableAuthMethods || [];
      const invalidMethods = (methods as AuthMethodType[]).filter(m => !availableMethods.includes(m));
      
      if (invalidMethods.length > 0) {
        return {
          success: false,
          message: `–°–ª–µ–¥—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∞–∫–∫–∞—É–Ω—Ç—É: ${invalidMethods.join(', ')}`,
        };
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ nFA
      if (!user.mfaSettings) {
        user.mfaSettings = {
          enabled: true,
          methods: [],
          backupCodes: [],
          backupCodesUsed: [],
          requiredMethods: 1,
        };
      }

      user.mfaSettings.enabled = methods.length > 0;
      user.mfaSettings.methods = methods;
      user.mfaSettings.requiredMethods = requiredMethods || methods.length;

      const savedUser = await this.usersRepo.save(user);

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      this.logger.log(`‚úÖ nFA –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: –º–µ—Ç–æ–¥—ã ${methods.join(', ')}`);
      this.logger.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: enabled=${savedUser.mfaSettings?.enabled}, methods=${JSON.stringify(savedUser.mfaSettings?.methods)}, enabled=${savedUser.mfaSettings?.enabled}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
      const verifyUser = await this.usersRepo.findOne({ where: { id: userId } });
      this.logger.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑ –ë–î: enabled=${verifyUser?.mfaSettings?.enabled}, methods=${JSON.stringify(verifyUser?.mfaSettings?.methods)}`);

      return {
        success: true,
        message: 'nFA —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞',
      };
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ nFA:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ nFA',
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è nFA –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–≤—Å–µ –º–µ—Ç–æ–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã)
   */
  async isNfaComplete(userId: string): Promise<boolean> {
    const status = await this.getVerificationStatus(userId);
    return status.success && status.pendingMethods.length === 0;
  }
}

