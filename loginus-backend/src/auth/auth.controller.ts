import { Controller, Post, Get, Body, UseGuards, UnauthorizedException } from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth } from '@nestjs/swagger';
import { AuthService } from './auth.service';
import { LoginDto } from './dto/login.dto';
import { RegisterDto } from './dto/register.dto';
import { RefreshTokenDto } from './dto/refresh-token.dto';
import { SmartAuthDto, SmartAuthResponseDto } from './dto/smart-auth.dto';
import { BindPhoneDto, VerifyPhoneDto, BindPhoneResponseDto } from './dto/bind-phone.dto';
import { SendEmailVerificationDto, VerifyEmailDto, EmailVerificationResponseDto } from './dto/email-verification.dto';
import { Public } from './decorators/public.decorator';
import { CurrentUser } from './decorators/current-user.decorator';
import { RequirePermissions } from './decorators/permissions.decorator';
import { JwtAuthGuard } from './guards/jwt-auth.guard';
import { PermissionsGuard } from './guards/permissions.guard';

@ApiTags('auth')
@Controller('auth')
export class AuthController {
  constructor(private authService: AuthService) {}

  @Post('register')
  @Public()
  @ApiOperation({ summary: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–¥–º–∏–Ω–æ–º)' })
  @ApiResponse({ status: 201, description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω' })
  @ApiResponse({ status: 409, description: 'Email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' })
  async register(@Body() dto: RegisterDto) {
    return this.authService.register(dto);
  }

  @Post('login')
  @Public()
  @ApiOperation({ summary: '–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É' })
  @ApiResponse({ status: 200, description: '–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' })
  @ApiResponse({ status: 401, description: '–ù–µ–≤–µ—Ä–Ω—ã–µ credentials' })
  @ApiResponse({ status: 202, description: '–¢—Ä–µ–±—É–µ—Ç—Å—è 2FA' })
  async login(@Body() dto: LoginDto) {
    return this.authService.login(dto);
  }

  @Post('2fa/complete')
  @Public()
  @ApiOperation({ summary: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Ö–æ–¥–∞ —Å 2FA' })
  @ApiResponse({ status: 200, description: '2FA —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω' })
  @ApiResponse({ status: 400, description: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ 2FA' })
  async complete2FALogin(@Body() dto: { userId: string; code: string }) {
    return this.authService.complete2FALogin(dto.userId, dto.code);
  }

  @Post('nfa/complete')
  @Public()
  @ApiOperation({ summary: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Ö–æ–¥–∞ —Å nFA (–ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤)' })
  @ApiResponse({ status: 200, description: 'nFA —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞, —Ç–æ–∫–µ–Ω—ã –≤—ã–¥–∞–Ω—ã' })
  @ApiResponse({ status: 400, description: '–ù–µ –≤—Å–µ –º–µ—Ç–æ–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã' })
  async completeNFALogin(@Body() dto: { userId: string }) {
    return this.authService.completeNFALogin(dto.userId);
  }

  @Post('refresh')
  @Public()
  @ApiOperation({ summary: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access token' })
  async refresh(@Body() dto: RefreshTokenDto) {
    const accessToken = await this.authService.refreshAccessToken(dto.refreshToken);
    return { accessToken };
  }

  @Post('logout')
  @Public()
  @ApiOperation({ summary: '–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã' })
  async logout(@Body() dto: RefreshTokenDto) {
    await this.authService.logout(dto.refreshToken);
    return { message: 'Logged out successfully' };
  }

  @Get('me')
  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth()
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' })
  async getMe(@CurrentUser() user: any) {
    console.log('üîç [getMe] Called with user object:', user);
    console.log('üîç [getMe] user.userId:', user?.userId);
    console.log('üîç [getMe] user.id:', user?.id);
    console.log('üîç [getMe] user.sub:', user?.sub);
    
    const userId = user?.userId || user?.id || user?.sub;
    if (!userId) {
      console.error('‚ùå [getMe] User ID not found in token');
      throw new UnauthorizedException('User ID not found in token');
    }
    
    console.log('‚úÖ [getMe] User ID extracted:', userId);
    
    try {
      const result = await this.authService.getCurrentUser(userId);
      console.log('‚úÖ [getMe] getCurrentUser returned data, result keys:', Object.keys(result || {}));
      console.log('‚úÖ [getMe] Returning result to client');
      return result;
    } catch (error) {
      console.error('‚ùå [getMe] Error in getCurrentUser:', error);
      console.error('‚ùå [getMe] Error message:', error?.message);
      throw error;
    }
  }

  @Post('smart-auth')
  @Public()
  @ApiOperation({ 
    summary: '–£–º–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', 
    description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ—Ç –µ–≥–æ. –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏—Ö.' 
  })
  @ApiResponse({ status: 200, description: '–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', type: SmartAuthResponseDto })
  @ApiResponse({ status: 400, description: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' })
  async smartAuth(@Body() dto: SmartAuthDto) {
    return this.authService.smartAuth(dto);
  }

  @Post('complete-info')
  @Public()
  @ApiOperation({ 
    summary: '–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ', 
    description: '–î–æ–ø–æ–ª–Ω—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–∏–º—è, —Ñ–∞–º–∏–ª–∏—è)' 
  })
  @ApiResponse({ status: 200, description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', type: SmartAuthResponseDto })
  @ApiResponse({ status: 400, description: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' })
  async completeUserInfo(@Body() dto: { userId: string; firstName: string; lastName: string; referralCode?: string }) {
    return this.authService.completeUserInfo(dto.userId, dto.firstName, dto.lastName, dto.referralCode);
  }

  @Post('bind-phone/send-code')
  @ApiBearerAuth()
  @ApiOperation({ 
    summary: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å SMS –∫–æ–¥ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 
    description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç SMS —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' 
  })
  @ApiResponse({ status: 200, description: 'SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', type: BindPhoneResponseDto })
  @ApiResponse({ status: 400, description: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞' })
  @ApiResponse({ status: 409, description: '–ù–æ–º–µ—Ä —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É' })
  async sendPhoneVerificationCode(@Body() dto: BindPhoneDto, @CurrentUser() user: any) {
    return this.authService.sendPhoneVerificationCode(dto, user.userId);
  }

  @Post('bind-phone/verify')
  @ApiBearerAuth()
  @ApiOperation({ 
    summary: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 
    description: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø—Ä–∏–≤—è–∑–∫—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é SMS –∫–æ–¥–∞' 
  })
  @ApiResponse({ status: 200, description: '–¢–µ–ª–µ—Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω', type: BindPhoneResponseDto })
  @ApiResponse({ status: 400, description: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' })
  async verifyPhoneCode(@Body() dto: VerifyPhoneDto, @CurrentUser() user: any) {
    return this.authService.verifyPhoneCode(dto, user.userId);
  }

  @Post('bind-phone/unbind')
  @ApiBearerAuth()
  @ApiOperation({ 
    summary: '–û—Ç–≤—è–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 
    description: '–û—Ç–≤—è–∑—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
  })
  @ApiResponse({ status: 200, description: '–¢–µ–ª–µ—Ñ–æ–Ω –æ—Ç–≤—è–∑–∞–Ω —É—Å–ø–µ—à–Ω–æ' })
  async unbindPhone(@CurrentUser() user: any) {
    return this.authService.unbindPhone(user.userId);
  }

  @Post('email-verification/send')
  @Public()
  @ApiOperation({ 
    summary: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email', 
    description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∏—Å—å–º–æ —Å —Å—Å—ã–ª–∫–æ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email –∞–¥—Ä–µ—Å–∞' 
  })
  @ApiResponse({ status: 200, description: '–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', type: EmailVerificationResponseDto })
  @ApiResponse({ status: 404, description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' })
  @ApiResponse({ status: 400, description: 'Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' })
  async sendEmailVerification(@Body() dto: SendEmailVerificationDto) {
    return this.authService.sendEmailVerification(dto);
  }

  @Post('email-verification/verify')
  @Public()
  @ApiOperation({ 
    summary: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email –ø–æ —Ç–æ–∫–µ–Ω—É', 
    description: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç email –∞–¥—Ä–µ—Å –ø–æ —Ç–æ–∫–µ–Ω—É –∏–∑ –ø–∏—Å—å–º–∞ –∏ –ø–æ–≤—ã—à–∞–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
  })
  @ApiResponse({ status: 200, description: 'Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω', type: EmailVerificationResponseDto })
  @ApiResponse({ status: 400, description: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω' })
  async verifyEmail(@Body() dto: VerifyEmailDto) {
    return this.authService.verifyEmail(dto);
  }

  @Post('telegram-login')
  @Public()
  @ApiOperation({ summary: '–û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram Login Widget' })
  @ApiResponse({ status: 200, description: '–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram' })
  @ApiResponse({ status: 401, description: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram' })
  async handleTelegramLogin(@Body() telegramUser: any) {
    return this.authService.handleTelegramLogin(telegramUser);
  }
}
