import { Injectable, NotFoundException, ForbiddenException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, In, IsNull } from 'typeorm';
import { User } from './entities/user.entity';
import { Invitation } from '../auth/micro-modules/invitations/entities/invitation.entity';
import { Team } from '../teams/entities/team.entity';
import { TeamMembership } from '../teams/entities/team-membership.entity';
import { OrganizationMembership } from '../organizations/entities/organization-membership.entity';
import { Organization } from '../organizations/entities/organization.entity';
import { Role } from '../rbac/entities/role.entity';
import { OrganizationRole } from '../organizations/entities/organization-role.entity';
import { TeamRole } from '../teams/entities/team-role.entity';
import { UserRoleAssignment } from './entities/user-role-assignment.entity';
import { RoleHierarchyService } from '../rbac/role-hierarchy.service';

@Injectable()
export class UsersService {
  constructor(
    @InjectRepository(User)
    private usersRepo: Repository<User>,
    @InjectRepository(Invitation)
    private invitationsRepo: Repository<Invitation>,
    @InjectRepository(Team)
    private teamsRepo: Repository<Team>,
    @InjectRepository(TeamMembership)
    private teamMembershipRepo: Repository<TeamMembership>,
    @InjectRepository(OrganizationMembership)
    private orgMembershipRepo: Repository<OrganizationMembership>,
    @InjectRepository(Organization)
    private organizationsRepo: Repository<Organization>,
    @InjectRepository(Role)
    private rolesRepo: Repository<Role>,
    @InjectRepository(OrganizationRole)
    private orgRoleRepo: Repository<OrganizationRole>,
    @InjectRepository(TeamRole)
    private teamRoleRepo: Repository<TeamRole>,
    @InjectRepository(UserRoleAssignment)
    private userRoleAssignmentRepo: Repository<UserRoleAssignment>,
    private roleHierarchyService: RoleHierarchyService,
  ) {}

  async findById(id: string, options?: { select?: string[]; relations?: string[] }): Promise<User | null> {
    return this.usersRepo.findOne({
      where: { id },
      select: options?.select as any,
      relations: options?.relations || [
        'organizations', 
        'teams', 
        'userRoleAssignments', 
        'userRoleAssignments.role', 
        'userRoleAssignments.role.permissions',
        'userRoleAssignments.organizationRole',
        'userRoleAssignments.teamRole'
      ],
    });
  }

  async findByEmail(email: string, options?: { select?: string[]; relations?: string[] }): Promise<User | null> {
    return this.usersRepo.findOne({
      where: { email },
      select: options?.select as any,
      relations: options?.relations as any,
    });
  }

  async findByPhone(phone: string, options?: { select?: string[]; relations?: string[] }): Promise<User | null> {
    return this.usersRepo.findOne({
      where: { phone },
      select: options?.select as any,
      relations: options?.relations as any,
    });
  }

  async create(userData: Partial<User>): Promise<User> {
    const user = this.usersRepo.create(userData);
    return this.usersRepo.save(user);
  }

  async findAll(page: number = 1, limit: number = 10): Promise<{ users: User[]; total: number }> {
    const [users, total] = await this.usersRepo.findAndCount({
      relations: ['userRoleAssignments', 'userRoleAssignments.role', 'organizations', 'teams'],
      skip: (page - 1) * limit,
      take: limit,
      order: { createdAt: 'DESC' },
    });

    return { users, total };
  }

  async update(id: string, userData: Partial<User>): Promise<User> {
    const user = await this.findById(id);
    if (!user) {
      throw new NotFoundException('User not found');
    }

    Object.assign(user, userData);
    return this.usersRepo.save(user);
  }

  async delete(id: string): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const user = await this.findById(id);
    if (!user) {
      throw new NotFoundException('User not found');
    }

    console.log(`üóëÔ∏è Deleting user ${id} (${user.email}) and all related data...`);

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
      await this.usersRepo.manager.transaction(async (transactionalEntityManager) => {
        // –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const safeDelete = async (operation: () => Promise<any>, name: string) => {
          try {
            await operation();
            console.log(`‚úÖ ${name}`);
            return true;
          } catch (error: any) {
            console.error(`‚ùå Error in ${name}:`, error.message);
            // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –æ –ø—Ä–µ—Ä–≤–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
            if (error.message?.includes('transaction is aborted')) {
              throw error;
            }
            // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            console.warn(`‚ö†Ô∏è ${name} failed, continuing...`);
            return false;
          }
        };

        // 1. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (–≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≥–ª–∞—à–∞—é—â–∏–º –∏–ª–∏ –ø—Ä–∏–Ω—è–≤—à–∏–º)
        await safeDelete(
          () => transactionalEntityManager.delete(Invitation, [{ invitedById: id }, { acceptedById: id }]),
          'Deleted invitations'
        );

        // 2. –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—è–º–∏
        await safeDelete(
          () => transactionalEntityManager.query('DELETE FROM user_role_assignments WHERE "userId" = $1', [id]),
          'Deleted user role assignments'
        );

        // 3. –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞)
        await safeDelete(
          () => transactionalEntityManager.query('DELETE FROM user_teams WHERE "userId" = $1', [id]),
          'Deleted user team assignments'
        );

        // 4. –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏ (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞)
        await safeDelete(
          () => transactionalEntityManager.query('DELETE FROM user_organizations WHERE "userId" = $1', [id]),
          'Deleted user organization assignments'
        );

        // 5. –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)
        await safeDelete(
          () => transactionalEntityManager.delete(TeamMembership, { userId: id }),
          'Deleted team memberships'
        );

        // 6. –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏ (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)
        await safeDelete(
          () => transactionalEntityManager.delete(OrganizationMembership, { userId: id }),
          'Deleted organization memberships'
        );

        // 7. –£–¥–∞–ª—è–µ–º refresh tokens
        await safeDelete(
          () => transactionalEntityManager.query('DELETE FROM refresh_tokens WHERE "userId" = $1', [id]),
          'Deleted refresh tokens'
        );

        // 8. –£–¥–∞–ª—è–µ–º two-factor codes
        await safeDelete(
          () => transactionalEntityManager.query('DELETE FROM two_factor_codes WHERE "userId" = $1', [id]),
          'Deleted two-factor codes'
        );

        // 9. –£–¥–∞–ª—è–µ–º email verification tokens
        await safeDelete(
          () => transactionalEntityManager.query('DELETE FROM email_verification_tokens WHERE "userId" = $1', [id]),
          'Deleted email verification tokens'
        );

        // 10. –£–¥–∞–ª—è–µ–º password reset tokens
        await safeDelete(
          () => transactionalEntityManager.query('DELETE FROM password_reset_tokens WHERE "userId" = $1', [id]),
          'Deleted password reset tokens'
        );

        // 14. –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–í –ö–û–ù–¶–ï –æ—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!)
        const result = await transactionalEntityManager.delete(User, id);
        if (result.affected === 0) {
          throw new NotFoundException('User not found after deleting related data');
        }
        console.log('‚úÖ User deleted successfully');
      });

      // –û–ø–µ—Ä–∞—Ü–∏–∏ –≤–Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ - –æ–Ω–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã –∏ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫–∏
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∏—Ö –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        // 11. –£–¥–∞–ª—è–µ–º notifications (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        await this.usersRepo.manager.query('DELETE FROM notifications WHERE "userId" = $1', [id]);
        console.log('‚úÖ Deleted notifications');
      } catch (error) {
        console.warn('‚ö†Ô∏è Could not delete notifications (table may not exist):', error.message);
      }

      try {
        // 12. –£–¥–∞–ª—è–µ–º referrals (–≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è referrer –∏–ª–∏ referred)
        await this.usersRepo.manager.query('DELETE FROM referrals WHERE "referrerId" = $1 OR "referredUserId" = $1 OR "referredId" = $1', [id]);
        console.log('‚úÖ Deleted referrals');
      } catch (error) {
        console.warn('‚ö†Ô∏è Could not delete referrals (table may not exist):', error.message);
      }

      // 13. –ù–ï —É–¥–∞–ª—è–µ–º audit_logs –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –æ–Ω–∏ –Ω—É–∂–Ω—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
      console.log('‚ÑπÔ∏è Skipping audit_logs deletion (keeping history)');
    } catch (error) {
      console.error(`‚ùå Error deleting user ${id}:`, error);
      if (error instanceof NotFoundException) {
        throw error;
      }
      throw new Error(`Failed to delete user: ${error.message}`);
    }
  }

  async assignRole(userId: string, roleId: string): Promise<void> {
    const user = await this.findById(userId);
    if (!user) {
      throw new NotFoundException('User not found');
    }

    // TODO: Implement role assignment logic
    // This will be implemented in RBAC service
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ
   */
  async getUserCount(): Promise<number> {
    return this.usersRepo.count();
  }

  async getUserTeams(userId: string): Promise<Team[]> {
    const user = await this.findById(userId);
    if (!user) {
      throw new NotFoundException('User not found');
    }
    return user.teams || [];
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getTeamMembers(userId: string): Promise<User[]> {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –µ–≥–æ –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏
    const currentUser = await this.usersRepo
      .createQueryBuilder('user')
      .leftJoinAndSelect('user.teams', 'teams')
      .leftJoinAndSelect('user.organizations', 'organizations')
      .leftJoinAndSelect('user.userRoleAssignments', 'userRoleAssignments')
      .leftJoinAndSelect('userRoleAssignments.role', 'role')
      .leftJoinAndSelect('user.teamMemberships', 'teamMemberships')
      .leftJoinAndSelect('teamMemberships.role', 'teamRole')
      .leftJoinAndSelect('teamMemberships.team', 'teamMembershipsTeam')
      .leftJoinAndSelect('user.organizationMemberships', 'organizationMemberships')
      .leftJoinAndSelect('organizationMemberships.role', 'orgRole')
      .where('user.id = :userId', { userId })
      .getOne();

    if (!currentUser) {
      return [];
    }

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ ID –∫–æ–º–∞–Ω–¥ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π, –∫ –∫–æ—Ç–æ—Ä—ã–º –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const accessibleTeamIds = new Set<string>();
    const accessibleOrgIds = new Set<string>();

    // –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —á–ª–µ–Ω–æ–º
    if (currentUser.organizations) {
      currentUser.organizations.forEach(org => accessibleOrgIds.add(org.id));
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —á–ª–µ–Ω–æ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —ç—Ç–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    if (accessibleOrgIds.size > 0) {
      const teamsInOrgs = await this.teamsRepo
        .createQueryBuilder('team')
        .where('team.organizationId IN (:...orgIds)', { orgIds: Array.from(accessibleOrgIds) })
        .getMany();
      
      teamsInOrgs.forEach(team => accessibleTeamIds.add(team.id));
    }

    // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —á–ª–µ–Ω–æ–º
    if (currentUser.teams) {
      currentUser.teams.forEach(team => accessibleTeamIds.add(team.id));
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º organizationMemberships
    if (currentUser.organizationMemberships) {
      currentUser.organizationMemberships.forEach(membership => {
        accessibleOrgIds.add(membership.organizationId);
      });
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º teamMemberships
    if (currentUser.teamMemberships) {
      currentUser.teamMemberships.forEach(membership => {
        accessibleTeamIds.add(membership.teamId);
      });
    }

    // –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è accessibleOrgIds, –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —ç—Ç–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
    if (accessibleOrgIds.size > 0) {
      const teamsInOrgs = await this.teamsRepo
        .createQueryBuilder('team')
        .where('team.organizationId IN (:...orgIds)', { orgIds: Array.from(accessibleOrgIds) })
        .getMany();
      
      teamsInOrgs.forEach(team => accessibleTeamIds.add(team.id));
    }

    // –°—É–ø–µ—Ä–∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üîç Checking for super admin role...');
    console.log('üîç currentUser.userRoleAssignments:', currentUser.userRoleAssignments?.length || 0);
    console.log('üîç userRoleAssignments details:', currentUser.userRoleAssignments?.map(a => ({
      roleName: a.role?.name,
      organizationId: a.organizationId,
      teamId: a.teamId
    })));
    
    const isSuperAdmin = currentUser.userRoleAssignments?.some(
      assignment => assignment.role?.name === 'super_admin' && !assignment.organizationId && !assignment.teamId
    );
    
    console.log('üîç isSuperAdmin:', isSuperAdmin);

    if (accessibleTeamIds.size === 0 && accessibleOrgIds.size === 0 && !isSuperAdmin) {
      return [];
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
    let query = this.usersRepo
      .createQueryBuilder('user')
      .leftJoinAndSelect('user.teams', 'team')
      .leftJoinAndSelect('user.organizations', 'organization')
      .leftJoinAndSelect('organization.teams', 'orgTeams')
      .leftJoinAndSelect('user.userRoleAssignments', 'userRoleAssignments')
      .leftJoinAndSelect('userRoleAssignments.role', 'role')
      .leftJoinAndSelect('role.permissions', 'permissions')
      .leftJoinAndSelect('user.teamMemberships', 'teamMemberships')
      .leftJoinAndSelect('teamMemberships.role', 'teamRole')
      .leftJoinAndSelect('teamMemberships.team', 'teamMembershipsTeam')
      .leftJoinAndSelect('user.organizationMemberships', 'organizationMemberships')
      .leftJoinAndSelect('organizationMemberships.role', 'orgRole')
      .where('user.isActive = :isActive', { isActive: true }); // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
      // –£–±–∏—Ä–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤

    // –°—Ç—Ä–æ–∏–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö –ò–õ–ò –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è—Ö
    const conditions: string[] = [];
    const parameters: any = {};

    if (isSuperAdmin) {
      // –°—É–ø–µ—Ä–∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      console.log('üîç Super admin detected - showing all users');
      query = query.andWhere('1=1');
    } else {
      console.log('üîç Not super admin - using restricted access');
      if (accessibleTeamIds.size > 0) {
        conditions.push('team.id IN (:...teamIds)');
        parameters.teamIds = Array.from(accessibleTeamIds);
      }

      if (accessibleOrgIds.size > 0) {
        conditions.push('organization.id IN (:...orgIds)');
        parameters.orgIds = Array.from(accessibleOrgIds);
        // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ organizationMemberships
        conditions.push('organizationMemberships.organizationId IN (:...orgIds)');
      }

      if (conditions.length > 0) {
        query = query.andWhere(`(${conditions.join(' OR ')})`, parameters);
      }
    }

    const teamMembers = await query.getMany();
    console.log('üîç teamMembers from query:', teamMembers.length, teamMembers.map(u => u.email));

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è –≤ —Ä–æ–ª—è—Ö –∏ —á–ª–µ–Ω—Å—Ç–≤–µ
    const allTeamIds = new Set<string>();
    console.log('üîç accessibleTeamIds:', Array.from(accessibleTeamIds));
    teamMembers.forEach(user => {
      console.log(`üîç Processing user ${user.email} for team IDs`);
      if (user.userRoleAssignments) {
        user.userRoleAssignments.forEach(assignment => {
          console.log(`üîç Assignment teamId: ${assignment.teamId}, accessible: ${assignment.teamId ? accessibleTeamIds.has(assignment.teamId) : false}`);
          if (assignment.teamId && accessibleTeamIds.has(assignment.teamId)) {
            allTeamIds.add(assignment.teamId);
            console.log(`üîç Added teamId ${assignment.teamId} to allTeamIds`);
          }
        });
      }
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ teamMemberships
      if (user.teamMemberships) {
        user.teamMemberships.forEach(membership => {
          console.log(`üîç Membership teamId: ${membership.teamId}, accessible: ${accessibleTeamIds.has(membership.teamId)}`);
          if (accessibleTeamIds.has(membership.teamId)) {
            allTeamIds.add(membership.teamId);
            console.log(`üîç Added membership teamId ${membership.teamId} to allTeamIds`);
          }
        });
      }
    });
    console.log('üîç Final allTeamIds:', Array.from(allTeamIds));

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
    const teamsMap = new Map<string, string>();
    if (allTeamIds.size > 0) {
      console.log('üîç Loading teams for IDs:', Array.from(allTeamIds));
      const teams = await this.teamsRepo
        .createQueryBuilder('team')
        .where('team.id IN (:...teamIds)', { teamIds: Array.from(allTeamIds) })
      .getMany();

      console.log('üîç Found teams:', teams.map(t => ({ id: t.id, name: t.name })));
      teams.forEach(team => {
        teamsMap.set(team.id, team.name);
      });
      console.log('üîç teamsMap contents:', Array.from(teamsMap.entries()));
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–æ–ª–∏ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üîç About to process teamMembers:', teamMembers.length, teamMembers.map(u => u.email));
    const usersWithRolesByContext = teamMembers.map(user => {
          console.log(`üîç Processing user ${user.email}:`, {
            userRoleAssignments: user.userRoleAssignments?.length || 0,
            teamMemberships: user.teamMemberships?.length || 0,
            organizationMemberships: user.organizationMemberships?.length || 0,
            teamMembershipsData: user.teamMemberships,
            organizationMembershipsData: user.organizationMemberships,
            accessibleOrgIds: Array.from(accessibleOrgIds),
            accessibleTeamIds: Array.from(accessibleTeamIds),
            isSuperAdmin: isSuperAdmin
          });
      
      const rolesByContext: {
        organizations: any[];
        teams: any[];
      } = {
        organizations: [],
        teams: []
      };

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–æ–ª–∏ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º –∏ –∫–æ–º–∞–Ω–¥–∞–º
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º/–∫–æ–º–∞–Ω–¥–∞–º, –∫ –∫–æ—Ç–æ—Ä—ã–º –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (user.userRoleAssignments) {
        user.userRoleAssignments.forEach(assignment => {
          const roleInfo = {
            role: assignment.role?.name || 'viewer',
            roleId: assignment.role?.id,
            organizationId: assignment.organizationId,
            teamId: assignment.teamId
          };

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ (–≥–¥–µ organizationId –∏ teamId —Ä–∞–≤–Ω—ã null)
          if (!assignment.organizationId && !assignment.teamId) {
            // –≠—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ä–æ–ª—å - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            (user as any).globalRole = assignment.role?.name || 'viewer';
          }

          if (assignment.organizationId && accessibleOrgIds.has(assignment.organizationId)) {
            // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            const org = user.organizations?.find(o => o.id === assignment.organizationId);
            rolesByContext.organizations.push({
              ...roleInfo,
              organization: org?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è'
            });
          }

          if (assignment.teamId && accessibleTeamIds.has(assignment.teamId)) {
            // –ò—â–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö (user.teams) –∏–ª–∏ –≤ —á–ª–µ–Ω—Å—Ç–≤–µ (teamMemberships)
            let teamName = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞';
            const team = user.teams?.find(t => t.id === assignment.teamId);
            if (team) {
              teamName = team.name;
            } else {
              // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ teamMemberships
              const membership = user.teamMemberships?.find(m => m.teamId === assignment.teamId);
              if (membership && membership.team) {
                teamName = membership.team.name;
              }
            }
            rolesByContext.teams.push({
              ...roleInfo,
              team: teamName
            });
          }
        });
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª–∏ –∏–∑ –Ω–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º —á–ª–µ–Ω—Å—Ç–≤–∞ (team_memberships, organization_memberships)
      if (user.teamMemberships) {
        user.teamMemberships.forEach(membership => {
          if (accessibleTeamIds.has(membership.teamId)) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º membership.team.name, —Ç–∞–∫ –∫–∞–∫ –º—ã –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ leftJoinAndSelect
            const teamName = membership.team?.name || teamsMap.get(membership.teamId) || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞';
            rolesByContext.teams.push({
              role: membership.role?.name || 'member',
              roleId: membership.role?.id,
              teamId: membership.teamId,
              team: teamName
            });
          }
        });
      }

      if (user.organizationMemberships) {
        user.organizationMemberships.forEach(membership => {
          if (accessibleOrgIds.has(membership.organizationId)) {
            const org = user.organizations?.find(o => o.id === membership.organizationId);
            const orgName = org?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
            rolesByContext.organizations.push({
              role: membership.role?.name || 'member',
              roleId: membership.role?.id,
              organizationId: membership.organizationId,
              organization: orgName
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (—á–ª–µ–Ω—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º)
            // –ò—â–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ teamsMap, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∫–∞–∫ orgTeams
            if (org) {
              // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ teamsMap
              const orgTeams = Array.from(teamsMap.entries())
                .filter(([teamId, teamName]) => {
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                  return accessibleTeamIds.has(teamId);
                });
              
              orgTeams.forEach(([teamId, teamName]) => {
                rolesByContext.teams.push({
                  role: membership.role?.name || 'member', // –†–æ–ª—å –≤ –∫–æ–º–∞–Ω–¥–µ = —Ä–æ–ª—å –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                  roleId: membership.role?.id,
                  teamId: teamId,
                  team: teamName
                });
              });
            }
          }
        });
      }

      // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
      const filteredTeams = user.teams?.filter(team => accessibleTeamIds.has(team.id)) || [];
      
      const result = {
        ...user,
        teams: filteredTeams, // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ
        rolesByContext,
        globalRole: (user as any).globalRole || null
      };
      
      console.log(`üîç Final result for user ${user.email}:`, {
        rolesByContext,
        teams: filteredTeams
      });
      
      return result;
    });

    console.log('üîç Final usersWithRolesByContext:', JSON.stringify(usersWithRolesByContext, null, 2));
    console.log('üîçüîçüîç RETURNING usersWithRolesByContext with length:', usersWithRolesByContext.length);
    console.log('üîçüîçüîç FINAL RESULT:', usersWithRolesByContext.map(u => ({ email: u.email, globalRole: (u as any).globalRole, rolesByContext: (u as any).rolesByContext })));
    console.log('üîçüîçüîç ABOUT TO RETURN - checking if rolesByContext and globalRole are set');
    console.log('üîçüîçüîç FINAL CHECK - rolesByContext and globalRole for each user:');
    usersWithRolesByContext.forEach((user, index) => {
      console.log(`üîç User ${index}: ${user.email}, globalRole: ${(user as any).globalRole}, rolesByContext: ${JSON.stringify((user as any).rolesByContext)}`);
    });
    console.log('üîçüîçüîç FINAL RETURN - about to return usersWithRolesByContext');
    return usersWithRolesByContext;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async updateUserTeam(userId: string, teamId: string, currentUserId: string, roleId?: string): Promise<User> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const user = await this.findById(userId);
    if (!user) {
      throw new NotFoundException('User not found');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –∏–∑–º–µ–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—É
    // (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ç–æ–π –∂–µ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º)
    const currentUser = await this.findById(currentUserId);
    if (!currentUser) {
      throw new NotFoundException('Current user not found');
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º ID —Å—Ç–∞—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const oldTeamAssignment = await this.usersRepo
      .createQueryBuilder()
      .select('team_id')
      .from('user_teams', 'ut')
      .where('ut.user_id = :userId', { userId })
      .getRawOne();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑—å –≤ —Ç–∞–±–ª–∏—Ü–µ user_teams
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏
    await this.usersRepo
      .createQueryBuilder()
      .delete()
      .from('user_teams')
      .where('user_id = :userId', { userId })
      .execute();

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–≤—è–∑—å
    if (teamId) {
      await this.usersRepo
        .createQueryBuilder()
        .insert()
        .into('user_teams')
        .values({
          user_id: userId,
          team_id: teamId
        })
        .execute();

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ team_memberships
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ–ª—å –∏–∑ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –±–∞–∑–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
      const team = await this.teamsRepo.findOne({
        where: { id: teamId },
        relations: ['roles']
      });
      
      let defaultRoleId: string | null = null;
      
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ä–æ–ª—å –∏–∑ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
      if (roleId) {
        defaultRoleId = roleId;
      } else if (team && team.roles && team.roles.length > 0) {
        // –ò—â–µ–º —Ä–æ–ª—å "member" –∏–ª–∏ "editor" –≤ –∫–æ–º–∞–Ω–¥–µ
        const memberRole = team.roles.find(role => role.name === 'member' || role.name === 'editor');
        if (memberRole) {
          defaultRoleId = memberRole.id;
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ä–æ–ª–∏, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
          defaultRoleId = team.roles[0].id;
        }
      }
      
      if (defaultRoleId) {
        const teamMembership = this.teamMembershipRepo.create({
          userId: userId,
          teamId: teamId,
          roleId: defaultRoleId,
          joinedAt: new Date(),
        });
        await this.teamMembershipRepo.save(teamMembership);
        console.log(`‚úÖ Created team membership for user ${userId} in team ${teamId} with role ${defaultRoleId}`);
      } else {
        console.log(`‚ö†Ô∏è No roles found for team ${teamId}, skipping team membership creation`);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–æ–ª–∏ –∫–æ–º–∞–Ω–¥—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
      // –£–¥–∞–ª—è–µ–º —Ä–æ–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã
      if (oldTeamAssignment?.team_id) {
        await this.usersRepo
          .createQueryBuilder()
          .delete()
          .from('user_role_assignments')
          .where('userId = :userId', { userId })
          .andWhere('teamId = :oldTeamId', { oldTeamId: oldTeamAssignment.team_id })
          .execute();
      }

      // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥—ã
      const teamWithOrg = await this.teamsRepo.findOne({
        where: { id: teamId },
        relations: ['organization']
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Ä–æ–ª—å viewer –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
      const viewerRole = await this.usersRepo
        .createQueryBuilder()
        .select('role.id')
        .from('roles', 'role')
        .where('role.name = :name', { name: 'viewer' })
        .andWhere('role.isSystem = :isSystem', { isSystem: true })
        .getRawOne();

      if (viewerRole) {
        await this.usersRepo
          .createQueryBuilder()
          .insert()
          .into('user_role_assignments')
          .values({
            userId,
            roleId: viewerRole.id,
            organizationId: teamWithOrg?.organization?.id || null,
            teamId,
            assignedBy: currentUserId,
            createdAt: new Date(),
            updatedAt: new Date()
          })
          .execute();
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await this.findById(userId);
    if (!updatedUser) {
      throw new NotFoundException('Updated user not found');
    }
    return updatedUser;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async updateUserOrganization(userId: string, organizationId: string, currentUserId: string): Promise<User> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const user = await this.findById(userId);
    if (!user) {
      throw new NotFoundException('User not found');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
    const currentUser = await this.findById(currentUserId);
    if (!currentUser) {
      throw new NotFoundException('Current user not found');
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º ID —Å—Ç–∞—Ä–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const oldOrgAssignment = await this.usersRepo
      .createQueryBuilder()
      .select('organization_id')
      .from('user_organizations', 'uo')
      .where('uo.user_id = :userId', { userId })
      .getRawOne();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑—å –≤ —Ç–∞–±–ª–∏—Ü–µ user_organizations
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏
    await this.usersRepo
      .createQueryBuilder()
      .delete()
      .from('user_organizations')
      .where('user_id = :userId', { userId })
      .execute();

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–≤—è–∑—å
    if (organizationId) {
      await this.usersRepo
        .createQueryBuilder()
        .insert()
        .into('user_organizations')
        .values({
          user_id: userId,
          organization_id: organizationId
        })
        .execute();

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–æ–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è –Ω–æ–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
      // –£–¥–∞–ª—è–µ–º —Ä–æ–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ä–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
      if (oldOrgAssignment?.organization_id) {
        await this.usersRepo
          .createQueryBuilder()
          .delete()
          .from('user_role_assignments')
          .where('userId = :userId', { userId })
          .andWhere('organizationId = :oldOrgId', { oldOrgId: oldOrgAssignment.organization_id })
          .andWhere('teamId IS NULL')
          .execute();
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Ä–æ–ª—å viewer –¥–ª—è –Ω–æ–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
      const viewerRole = await this.usersRepo
        .createQueryBuilder()
        .select('role.id')
        .from('roles', 'role')
        .where('role.name = :name', { name: 'viewer' })
        .andWhere('role.isSystem = :isSystem', { isSystem: true })
        .getRawOne();

      if (viewerRole) {
        await this.usersRepo
          .createQueryBuilder()
          .insert()
          .into('user_role_assignments')
          .values({
            userId,
            roleId: viewerRole.id,
            organizationId,
            teamId: null,
            assignedBy: currentUserId,
            createdAt: new Date(),
            updatedAt: new Date()
          })
          .execute();
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await this.findById(userId);
    if (!updatedUser) {
      throw new NotFoundException('Updated user not found');
    }
    return updatedUser;
  }

  /**
   * –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async changeUserRole(
    userId: string,
    roleId: string,
    assignedBy: string,
    organizationId?: string,
    teamId?: string
  ): Promise<User> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const user = await this.findById(userId);
    if (!user) {
      throw new NotFoundException('User not found');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –∏–∑–º–µ–Ω—è—Ç—å —Ä–æ–ª–∏
    const currentUser = await this.findById(assignedBy);
    if (!currentUser) {
      throw new NotFoundException('Current user not found');
    }

    // ‚úÖ –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í: —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ü–µ–ª–µ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    const context = { organizationId, teamId };
    const permissionCheck = await this.canManageUser(assignedBy, userId, context);
    if (!permissionCheck.canManage) {
      throw new ForbiddenException(
        `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. ` +
        `–í–∞—à–∞ —Ä–æ–ª—å: ${permissionCheck.managerRole} (—É—Ä–æ–≤–µ–Ω—å ${permissionCheck.managerLevel}), ` +
        `—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${permissionCheck.targetRole} (—É—Ä–æ–≤–µ–Ω—å ${permissionCheck.targetLevel})`
      );
    }
    console.log(`‚úÖ Permission check passed for changeUserRole: ${permissionCheck.managerRole} (${permissionCheck.managerLevel}) >= ${permissionCheck.targetRole} (${permissionCheck.targetLevel})`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏/–∫–æ–º–∞–Ω–¥–µ
    if (organizationId) {
      const currentUserOrgMembership = await this.orgMembershipRepo.findOne({
        where: { userId: assignedBy, organizationId }
      });
      
      if (!currentUserOrgMembership) {
        throw new ForbiddenException('You do not have access to this organization');
      }
    }

    if (teamId) {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ –∏ –µ—ë –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
      const team = await this.teamsRepo.findOne({
        where: { id: teamId },
        relations: ['organization']
      });
      
      if (!team) {
        throw new NotFoundException('Team not found');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ —á–µ—Ä–µ–∑:
      // 1. –ü—Ä—è–º–æ–µ —á–ª–µ–Ω—Å—Ç–≤–æ –≤ –∫–æ–º–∞–Ω–¥–µ
      // 2. –ß–ª–µ–Ω—Å—Ç–≤–æ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –∫ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–æ–º–∞–Ω–¥–∞
      const currentUserTeamMembership = await this.teamMembershipRepo.findOne({
        where: { userId: assignedBy, teamId }
      });
      
      const currentUserOrgMembership = team.organizationId ? await this.orgMembershipRepo.findOne({
        where: { userId: assignedBy, organizationId: team.organizationId }
      }) : null;
      
      const hasAccessToTeam = currentUserTeamMembership !== null || currentUserOrgMembership !== null;
      
      if (!hasAccessToTeam) {
        throw new ForbiddenException('You do not have access to this team');
      }

      // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è —Ä–æ–ª—å, —Å–æ—Å—Ç–æ–∏—Ç –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ
      const userTeamMembership = await this.teamMembershipRepo.findOne({
        where: { userId, teamId }
      });
      
      if (!userTeamMembership) {
        throw new ForbiddenException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–ª–µ–Ω–æ–º —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–∞–Ω–¥—É.');
      }
    }

    if (organizationId) {
      // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è —Ä–æ–ª—å, —Å–æ—Å—Ç–æ–∏—Ç –≤ —ç—Ç–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
      const userOrgMembership = await this.orgMembershipRepo.findOne({
        where: { userId, organizationId }
      });
      
      if (!userOrgMembership) {
        throw new ForbiddenException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–ª–µ–Ω–æ–º —ç—Ç–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é.');
      }
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞–±–æ—Ç–∞–µ–º —Å–æ –°–¢–ê–†–û–ô —Å–∏—Å—Ç–µ–º–æ–π (organization_memberships, team_memberships)
    // –≤–º–µ—Å—Ç–æ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã (user_role_assignments)
    
    if (organizationId) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –≤ organization_memberships
      const orgMembership = await this.orgMembershipRepo.findOne({
        where: { userId, organizationId }
      });
      
      if (orgMembership) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        orgMembership.roleId = roleId;
        orgMembership.updatedAt = new Date();
        await this.orgMembershipRepo.save(orgMembership);
        console.log(`‚úÖ Updated organization membership role for user ${userId}, role ${roleId}, org ${organizationId}`);
      } else {
        throw new NotFoundException('Organization membership not found');
      }
    } else if (teamId) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –≤ team_memberships
      const teamMembership = await this.teamMembershipRepo.findOne({
        where: { userId, teamId }
      });
      
      if (teamMembership) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        teamMembership.roleId = roleId;
        teamMembership.updatedAt = new Date();
        await this.teamMembershipRepo.save(teamMembership);
        console.log(`‚úÖ Updated team membership role for user ${userId}, role ${roleId}, team ${teamId}`);
      } else {
        throw new NotFoundException('Team membership not found');
      }
    } else {
      // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ä–æ–ª—å - —Ä–∞–±–æ—Ç–∞–µ–º —Å user_role_assignments
      let existingAssignment = await this.userRoleAssignmentRepo
        .createQueryBuilder('ura')
        .where('ura.userId = :userId', { userId })
        .andWhere('ura.organizationId IS NULL')
        .andWhere('ura.teamId IS NULL')
        .getOne();

      if (existingAssignment) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        existingAssignment.roleId = roleId;
        existingAssignment.assignedBy = assignedBy;
        existingAssignment.updatedAt = new Date();
        await this.userRoleAssignmentRepo.save(existingAssignment);
        console.log(`‚úÖ Updated global role assignment for user ${userId}, role ${roleId}`);
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ä–æ–ª–∏
        const newAssignment = this.userRoleAssignmentRepo.create({
          userId,
          roleId,
          organizationId: null,
          teamId: null,
          assignedBy,
          createdAt: new Date(),
          updatedAt: new Date()
        });
        await this.userRoleAssignmentRepo.save(newAssignment);
        console.log(`‚úÖ Created new global role assignment for user ${userId}, role ${roleId}`);
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await this.findById(userId);
    if (!updatedUser) {
      throw new NotFoundException('Updated user not found');
    }
    return updatedUser;
  }

  /**
   * –ü–µ—Ä–µ–Ω–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
   */
  async transferUserBetweenTeams(
    userId: string,
    fromTeamId: string | null,
    toTeamId: string | null,
    currentUserId: string,
    roleId: string
  ): Promise<User> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const user = await this.findById(userId);
    if (!user) {
      throw new NotFoundException('User not found');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥
    const currentUser = await this.findById(currentUserId);
    if (!currentUser) {
      throw new NotFoundException('Current user not found');
    }

    // ‚úÖ –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í: —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ü–µ–ª–µ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    const context = { teamId: (fromTeamId || toTeamId) || undefined };
    const permissionCheck = await this.canManageUser(currentUserId, userId, context);
    if (!permissionCheck.canManage) {
      throw new ForbiddenException(
        `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. ` +
        `–í–∞—à–∞ —Ä–æ–ª—å: ${permissionCheck.managerRole} (—É—Ä–æ–≤–µ–Ω—å ${permissionCheck.managerLevel}), ` +
        `—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${permissionCheck.targetRole} (—É—Ä–æ–≤–µ–Ω—å ${permissionCheck.targetLevel})`
      );
    }
    console.log(`‚úÖ Permission check passed for transferUserBetweenTeams: ${permissionCheck.managerRole} (${permissionCheck.managerLevel}) >= ${permissionCheck.targetRole} (${permissionCheck.targetLevel})`);

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    let fromTeam: Team | null = null;
    let toTeam: Team | null = null;

    if (fromTeamId) {
      fromTeam = await this.teamsRepo.findOne({
        where: { id: fromTeamId },
        relations: ['organization']
      });
    }

    if (toTeamId) {
      toTeam = await this.teamsRepo.findOne({
        where: { id: toTeamId },
        relations: ['organization']
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
    if (fromTeamId && fromTeam) {
      const hasAccessToFromTeam = currentUser.organizations?.some(org => 
        org.id === fromTeam!.organizationId
      ) || currentUser.teams?.some(team => team.id === fromTeamId);
      
      if (!hasAccessToFromTeam) {
        throw new ForbiddenException('You do not have access to the source team');
      }

      // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥—è—Ç, —Å–æ—Å—Ç–æ–∏—Ç –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
      const userIsInFromTeam = user.teams?.some(team => team.id === fromTeamId);
      if (!userIsInFromTeam) {
        throw new ForbiddenException('User is not a member of the source team');
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ü–µ–ª–µ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ
    if (toTeamId && toTeam) {
      const hasAccessToToTeam = currentUser.organizations?.some(org => 
        org.id === toTeam!.organizationId
      ) || currentUser.teams?.some(team => team.id === toTeamId);
      
      if (!hasAccessToToTeam) {
        throw new ForbiddenException('You do not have access to the target team');
      }
    }

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
    if (fromTeamId) {
      await this.usersRepo
        .createQueryBuilder()
        .delete()
        .from('user_role_assignments')
        .where('userId = :userId', { userId })
        .andWhere('teamId = :fromTeamId', { fromTeamId })
        .execute();
    }

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–≤—è–∑—å —Å –∫–æ–º–∞–Ω–¥–æ–π
    if (fromTeamId) {
      await this.usersRepo
        .createQueryBuilder()
        .delete()
        .from('user_teams')
        .where('user_id = :userId', { userId })
        .andWhere('team_id = :fromTeamId', { fromTeamId })
        .execute();
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–≤—è–∑—å —Å –∫–æ–º–∞–Ω–¥–æ–π
    if (toTeamId) {
      await this.usersRepo
        .createQueryBuilder()
        .insert()
        .into('user_teams')
        .values({
          user_id: userId,
          team_id: toTeamId
        })
        .execute();
    }

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤—É—é —Ä–æ–ª—å –≤ —Ü–µ–ª–µ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ
    if (roleId && toTeamId && toTeam) {
      // –ü–æ–ª—É—á–∞–µ–º organizationId —Ü–µ–ª–µ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
      const targetTeamOrgId = toTeam.organizationId || null;
      
      await this.usersRepo
        .createQueryBuilder()
        .insert()
        .into('user_role_assignments')
        .values({
          userId,
          roleId,
          organizationId: targetTeamOrgId,
          teamId: toTeamId,
          assignedBy: currentUserId,
          createdAt: new Date(),
          updatedAt: new Date()
        })
        .execute();
    } else if (toTeamId && toTeam) {
      // –ï—Å–ª–∏ —Ä–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (viewer)
      const targetTeamOrgId = toTeam.organizationId || null;
      const viewerRole = await this.rolesRepo.findOne({
        where: { name: 'viewer' }
      });
      
      if (viewerRole) {
        await this.usersRepo
          .createQueryBuilder()
          .insert()
          .into('user_role_assignments')
          .values({
            userId,
            roleId: viewerRole.id,
            organizationId: targetTeamOrgId,
            teamId: toTeamId,
            assignedBy: currentUserId,
            createdAt: new Date(),
            updatedAt: new Date()
          })
          .execute();
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await this.findById(userId);
    if (!updatedUser) {
      throw new NotFoundException('Updated user not found');
    }
    return updatedUser;
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ (–ù–ï –ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
   */
  async removeUserFromContext(
    userId: string,
    currentUserId: string
  ): Promise<void> {
    console.log(`üöÄ REMOVE USER FROM CONTEXT: userId=${userId}, currentUserId=${currentUserId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const user = await this.findById(userId);
    if (!user) {
      throw new NotFoundException('User not found');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
    const currentUser = await this.findById(currentUserId, {
      relations: ['organizations', 'teams']
    });
    if (!currentUser) {
      throw new NotFoundException('Current user not found');
    }

    // ‚úÖ –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã/–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
    // –ú—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∞–≤–∞ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    console.log(`‚ö†Ô∏è Skipping global permission check - will check for each team/org separately`);
    
    console.log(`üîç Current user loaded: ${JSON.stringify({
      id: currentUser.id,
      email: currentUser.email,
      organizations: currentUser.organizations?.length || 0,
      teams: currentUser.teams?.length || 0
    })}`);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –∫–æ–º–∞–Ω–¥—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const accessibleOrgIds = currentUser.organizations?.map(org => org.id) || [];
    const accessibleTeamIds = currentUser.teams?.map(team => team.id) || [];
    
    console.log(`üîç Current user accessible orgs (old system): ${accessibleOrgIds.length}`);
    console.log(`üîç Current user accessible teams (old system): ${accessibleTeamIds.length}`);
    
    // –ï—Å–ª–∏ –≤ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    if (accessibleOrgIds.length === 0) {
      const orgMemberships = await this.orgMembershipRepo.find({
        where: { userId: currentUserId },
        relations: ['organization']
      });
      accessibleOrgIds.push(...orgMemberships.map(membership => membership.organizationId));
      console.log(`üîç Current user accessible orgs (new system): ${accessibleOrgIds.length}`);
    }
    
    if (accessibleTeamIds.length === 0) {
      const teamMemberships = await this.teamMembershipRepo.find({
        where: { userId: currentUserId },
        relations: ['team']
      });
      accessibleTeamIds.push(...teamMemberships.map(membership => membership.teamId));
      console.log(`üîç Current user accessible teams (new system): ${accessibleTeamIds.length}`);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º
    if (accessibleOrgIds.length > 0) {
      const teamsInOrgs = await this.teamsRepo.find({
        where: { organizationId: In(accessibleOrgIds) }
      });
      accessibleTeamIds.push(...teamsInOrgs.map(team => team.id));
      console.log(`üîç Teams in accessible orgs: ${teamsInOrgs.length}`);
    }
    
    console.log(`üîç Total accessible team IDs: ${accessibleTeamIds.length}`);
    console.log(`üîç Accessible team IDs: ${JSON.stringify(accessibleTeamIds)}`);

    // ‚úÖ –£–¥–∞–ª—è–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞—Ö (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞) —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ä–æ–ª–∏ –∫–æ–º–∞–Ω–¥
    if (accessibleTeamIds.length > 0) {
      for (const teamId of accessibleTeamIds) {
        try {
          const permissionCheck = await this.canManageUser(currentUserId, userId, { teamId });
          if (permissionCheck.canManage) {
            await this.usersRepo
              .createQueryBuilder()
              .delete()
              .from('user_role_assignments')
              .where('userId = :userId', { userId })
              .andWhere('teamId = :teamId', { teamId })
              .execute();
            console.log(`‚úÖ Removed user ${userId} role assignments from team ${teamId} (old system)`);
          }
        } catch (error) {
          console.error(`‚ùå Error removing role assignments from team ${teamId}:`, error.message);
        }
      }
    }

    // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Ä–æ–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
    if (accessibleOrgIds.length > 0) {
      for (const organizationId of accessibleOrgIds) {
        try {
          const permissionCheck = await this.canManageUser(currentUserId, userId, { organizationId });
          if (permissionCheck.canManage) {
            await this.usersRepo
              .createQueryBuilder()
              .delete()
              .from('user_role_assignments')
              .where('userId = :userId', { userId })
              .andWhere('organizationId = :organizationId', { organizationId })
              .execute();
            console.log(`‚úÖ Removed user ${userId} role assignments from organization ${organizationId} (old system)`);
          }
        } catch (error) {
          console.error(`‚ùå Error removing role assignments from organization ${organizationId}:`, error.message);
        }
      }
    }

    // ‚úÖ –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞) —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤
    if (accessibleTeamIds.length > 0) {
      for (const teamId of accessibleTeamIds) {
        try {
          const permissionCheck = await this.canManageUser(currentUserId, userId, { teamId });
          if (permissionCheck.canManage) {
            await this.usersRepo
              .createQueryBuilder()
              .delete()
              .from('user_teams')
              .where('user_id = :userId', { userId })
              .andWhere('team_id = :teamId', { teamId })
              .execute();
            console.log(`‚úÖ Removed user ${userId} from team ${teamId} (old system user_teams)`);
          }
        } catch (error) {
          console.error(`‚ùå Error removing from user_teams for team ${teamId}:`, error.message);
        }
      }
    }

    // ‚úÖ –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏ (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞) —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤
    if (accessibleOrgIds.length > 0) {
      for (const organizationId of accessibleOrgIds) {
        try {
          const permissionCheck = await this.canManageUser(currentUserId, userId, { organizationId });
          if (permissionCheck.canManage) {
            await this.usersRepo
              .createQueryBuilder()
              .delete()
              .from('user_organizations')
              .where('user_id = :userId', { userId })
              .andWhere('organization_id = :organizationId', { organizationId })
              .execute();
            console.log(`‚úÖ Removed user ${userId} from organization ${organizationId} (old system user_organizations)`);
          }
        } catch (error) {
          console.error(`‚ùå Error removing from user_organizations for organization ${organizationId}:`, error.message);
        }
      }
    }

    // ‚úÖ –£–¥–∞–ª—è–µ–º –∏–∑ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã (team_memberships) —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–ª—è –ö–ê–ñ–î–û–ô –∫–æ–º–∞–Ω–¥—ã
    if (accessibleTeamIds.length > 0) {
      for (const teamId of accessibleTeamIds) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≠–¢–û–ô –∫–æ–º–∞–Ω–¥—ã
          const permissionCheck = await this.canManageUser(currentUserId, userId, { teamId });
          if (permissionCheck.canManage) {
            await this.teamMembershipRepo.delete({
              userId,
              teamId
            });
            console.log(`‚úÖ Removed user ${userId} from team ${teamId} (permission check passed)`);
          } else {
            console.log(`‚ö†Ô∏è Skipping team ${teamId} - insufficient permissions (${permissionCheck.managerRole} level ${permissionCheck.managerLevel} < ${permissionCheck.targetRole} level ${permissionCheck.targetLevel})`);
          }
        } catch (error) {
          console.error(`‚ùå Error removing user from team ${teamId}:`, error.message);
        }
      }
    }

    // ‚úÖ –£–¥–∞–ª—è–µ–º –∏–∑ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã (organization_memberships) —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–ª—è –ö–ê–ñ–î–û–ô –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    if (accessibleOrgIds.length > 0) {
      for (const organizationId of accessibleOrgIds) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≠–¢–û–ô –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
          const permissionCheck = await this.canManageUser(currentUserId, userId, { organizationId });
          if (permissionCheck.canManage) {
            await this.orgMembershipRepo.delete({
              userId,
              organizationId
            });
            console.log(`‚úÖ Removed user ${userId} from organization ${organizationId} (permission check passed)`);
          } else {
            console.log(`‚ö†Ô∏è Skipping organization ${organizationId} - insufficient permissions (${permissionCheck.managerRole} level ${permissionCheck.managerLevel} < ${permissionCheck.targetRole} level ${permissionCheck.targetLevel})`);
          }
        } catch (error) {
          console.error(`‚ùå Error removing user from organization ${organizationId}:`, error.message);
        }
      }
    }

    console.log(`‚úÖ Removed user ${userId} from context (both old and new systems, with permission checks)`);
  }


  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * (—Ç–æ–ª—å–∫–æ —Ç–µ, –∫—Ç–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º/–∫–æ–º–∞–Ω–¥–∞–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
   */
  async getUsersInContext(currentUserId: string): Promise<User[]> {
    console.log(`üîçüîçüîç getUsersInContext CALLED for user: ${currentUserId}`);
    console.log(`üîç Getting users in context for user: ${currentUserId}`);
    console.log(`üîç Starting getUsersInContext for user: ${currentUserId}`);
    console.log('üîçüîçüîç DEBUG: Function started successfully');
    console.log('üîçüîçüîç DEBUG: About to call findById');
    console.log('üîçüîçüîç DEBUG: This should appear in logs');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –µ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏ –∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
    const currentUser = await this.findById(currentUserId, {
      relations: ['organizations', 'teams', 'userRoleAssignments', 'userRoleAssignments.role', 'organizationMemberships', 'teamMemberships']
    });
    
    if (!currentUser) {
      throw new NotFoundException('Current user not found');
    }
    
    console.log('üîçüîçüîç DEBUG: currentUser found, continuing...');
    console.log('üîçüîçüîç DEBUG: About to process organizationMemberships and teamMemberships');
    console.log('üîçüîçüîç DEBUG: currentUser.userRoleAssignments:', currentUser.userRoleAssignments?.length || 0);

    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã
    const accessibleOrgIds = currentUser.organizations?.map(org => org.id) || [];
    const accessibleTeamIds = currentUser.teams?.map(team => team.id) || [];
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    const orgMemberships = await this.orgMembershipRepo.find({
      where: { userId: currentUserId },
      relations: ['organization']
    });
    const newSystemOrgIds = orgMemberships.map(membership => membership.organizationId);
    
    const teamMemberships = await this.teamMembershipRepo.find({
      where: { userId: currentUserId },
      relations: ['team']
    });
    const newSystemTeamIds = teamMemberships.map(membership => membership.teamId);
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º ID –∏–∑ –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º
    const allOrgIds = [...new Set([...accessibleOrgIds, ...newSystemOrgIds])];
    const allTeamIds = [...new Set([...accessibleTeamIds, ...newSystemTeamIds])];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º
    if (allOrgIds.length > 0) {
      const teamsInOrgs = await this.teamsRepo.find({
        where: { organizationId: In(allOrgIds) }
      });
      allTeamIds.push(...teamsInOrgs.map(team => team.id));
    }
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –∫ –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if (allTeamIds.length > 0) {
      const teamsWithOrgs = await this.teamsRepo.find({
        where: { id: In(allTeamIds) },
        relations: ['organization']
      });
      const orgsFromTeams = teamsWithOrgs
        .map(team => team.organizationId)
        .filter(orgId => orgId !== null);
      allOrgIds.push(...orgsFromTeams);
      
      // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      const uniqueOrgIds = [...new Set(allOrgIds)];
      allOrgIds.length = 0;
      allOrgIds.push(...uniqueOrgIds);
      
      console.log(`üîç Added organizations from teams: ${orgsFromTeams.length}`);
    }
    
    // –°—É–ø–µ—Ä–∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üîç Checking for super admin role...');
    console.log('üîç currentUser.userRoleAssignments:', currentUser.userRoleAssignments?.length || 0);
    console.log('üîç userRoleAssignments details:', currentUser.userRoleAssignments?.map(a => ({
      roleName: a.role?.name,
      organizationId: a.organizationId,
      teamId: a.teamId
    })));
    
    const isSuperAdmin = currentUser.userRoleAssignments?.some(
      assignment => assignment.role?.name === 'super_admin' && !assignment.organizationId && !assignment.teamId
    );
    
    console.log('üîç isSuperAdmin:', isSuperAdmin);

    console.log(`üîç Accessible org IDs: ${allOrgIds.length}`);
    console.log(`üîç Accessible team IDs: ${allTeamIds.length}`);
    
    if (allOrgIds.length === 0 && allTeamIds.length === 0 && !isSuperAdmin) {
      console.log(`‚ö†Ô∏è No accessible organizations or teams found for user ${currentUserId}`);
      return [];
    }

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –∫ –¥–æ—Å—Ç—É–ø–Ω—ã–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º/–∫–æ–º–∞–Ω–¥–∞–º
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º UNION –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º
    let query = this.usersRepo
      .createQueryBuilder('user')
      .leftJoinAndSelect('user.organizations', 'org')
      .leftJoinAndSelect('user.teams', 'team')
      .leftJoinAndSelect('user.userRoleAssignments', 'roleAssignment')
      .leftJoinAndSelect('roleAssignment.role', 'role')
      .leftJoinAndSelect('roleAssignment.organizationRole', 'organizationRoleAssignment')
      .leftJoinAndSelect('roleAssignment.teamRole', 'teamRoleAssignment')
      .leftJoinAndSelect('role.permissions', 'permission')
      .leftJoinAndSelect('user.teamMemberships', 'teamMemberships')
      .leftJoinAndSelect('teamMemberships.role', 'teamRole')
      .leftJoinAndSelect('teamMemberships.team', 'teamMembershipsTeam')
      .leftJoinAndSelect('user.organizationMemberships', 'organizationMemberships')
      .leftJoinAndSelect('organizationMemberships.role', 'organizationRole');
    
    if (isSuperAdmin) {
      // –°—É–ø–µ—Ä–∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      console.log('üîç Super admin detected - showing all users');
      query = query.where('user.isActive = true');
    } else {
      console.log('üîç Not super admin - using restricted access');
      query = query.where(
        allOrgIds.length > 0 && allTeamIds.length > 0
          ? '(org.id IN (:...orgIds) OR team.id IN (:...teamIds) OR user.id IN (SELECT DISTINCT "userId" FROM organization_memberships WHERE "organizationId" IN (:...orgIds)) OR user.id IN (SELECT DISTINCT "userId" FROM team_memberships WHERE "teamId" IN (:...teamIds))) AND user.isActive = true'
          : allOrgIds.length > 0
          ? '(org.id IN (:...orgIds) OR user.id IN (SELECT DISTINCT "userId" FROM organization_memberships WHERE "organizationId" IN (:...orgIds))) AND user.isActive = true'
          : '(team.id IN (:...teamIds) OR user.id IN (SELECT DISTINCT "userId" FROM team_memberships WHERE "teamId" IN (:...teamIds))) AND user.isActive = true',
        {
          orgIds: allOrgIds,
          teamIds: allTeamIds
        }
      );
    }
    
    const users = await query.getMany();

    console.log(`‚úÖ Found ${users.length} users in context`);
    console.log('üîçüîçüîç DEBUG: About to process users array');
    console.log('üîçüîçüîç DEBUG: users array:', users.map(u => ({ email: u.email, id: u.id })));
    
    console.log('üîçüîçüîç DEBUG: About to load organizations, allOrgIds:', allOrgIds);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
    const organizationsMap = new Map<string, string>();
    if (allOrgIds.length > 0) {
      console.log('üîç Loading organizations for IDs:', allOrgIds);
      const organizations = await this.organizationsRepo
        .createQueryBuilder('org')
        .where('org.id IN (:...orgIds)', { orgIds: allOrgIds })
        .getMany();

      console.log('üîç Found organizations:', organizations.map(o => ({ id: o.id, name: o.name })));
      organizations.forEach(org => {
        organizationsMap.set(org.id, org.name);
      });
      console.log('üîç organizationsMap contents:', Array.from(organizationsMap.entries()));
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º rolesByContext –∏ globalRole
    console.log('üîçüîçüîç DEBUG: About to start users.map');
    const usersWithRolesByContext = users.map(user => {
      console.log(`üîçüîçüîç DEBUG: Processing user ${user.email} in map`);
      const rolesByContext: {
        organizations: any[];
        teams: any[];
      } = {
        organizations: [],
        teams: []
      };
      
      let globalRole: string | null = null;
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º userRoleAssignments
      console.log(`üîçüîçüîç DEBUG: Processing userRoleAssignments for ${user.email}:`, user.userRoleAssignments?.length || 0);
      if (user.userRoleAssignments) {
        user.userRoleAssignments.forEach(assignment => {
          console.log(`üîçüîçüîç DEBUG: Assignment for ${user.email}:`, {
            role: assignment.role?.name,
            organizationRole: assignment.organizationRole?.name,
            teamRole: assignment.teamRole?.name,
            organizationId: assignment.organizationId,
            teamId: assignment.teamId
          });
          
          // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ (–≥–¥–µ organizationId –∏ teamId —Ä–∞–≤–Ω—ã null)
          if (!assignment.organizationId && !assignment.teamId && assignment.role) {
            globalRole = assignment.role.name || 'viewer';
            console.log(`üîçüîçüîç DEBUG: Set globalRole for ${user.email}:`, globalRole);
          }
          
          // –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–æ–ª–∏ –∏–∑ userRoleAssignments
          if (assignment.organizationRole && assignment.organizationId) {
            const orgName = organizationsMap.get(assignment.organizationId) || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è';
            rolesByContext.organizations.push({
              role: assignment.organizationRole.name,
              roleId: assignment.organizationRole.id,
              organizationId: assignment.organizationId,
              organization: orgName
            });
            console.log(`üîçüîçüîç DEBUG: Added org role for ${user.email}:`, assignment.organizationRole.name, 'in', orgName);
          }
          
          // –ö–æ–º–∞–Ω–¥–Ω—ã–µ —Ä–æ–ª–∏ –∏–∑ userRoleAssignments
          if (assignment.teamRole && assignment.teamId) {
            // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            let teamName = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞';
            const team = user.teams?.find(t => t.id === assignment.teamId);
            if (team) {
              teamName = team.name;
            }
            
            rolesByContext.teams.push({
              role: assignment.teamRole.name,
              roleId: assignment.teamRole.id,
              teamId: assignment.teamId,
              team: teamName
            });
            console.log(`üîçüîçüîç DEBUG: Added team role for ${user.email}:`, assignment.teamRole.name, 'in', teamName);
          }
        });
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º organizationMemberships
      console.log(`üîçüîçüîç DEBUG: Processing organizationMemberships for ${user.email}:`, user.organizationMemberships?.length || 0);
      if (user.organizationMemberships) {
        user.organizationMemberships.forEach(membership => {
          console.log(`üîçüîçüîç DEBUG: OrganizationMembership for ${user.email}:`, {
            organizationId: membership.organizationId,
            role: membership.role?.name,
            userOrganizations: user.organizations?.length || 0
          });
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º organizationsMap –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
          const orgName = organizationsMap.get(membership.organizationId) || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è';
          console.log(`üîçüîçüîç DEBUG: OrgName for ${user.email}:`, orgName);
          rolesByContext.organizations.push({
            role: membership.role?.name || 'member',
            roleId: membership.role?.id,
            organizationId: membership.organizationId,
            organization: orgName
          });
        });
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º teamMemberships
      if (user.teamMemberships) {
        user.teamMemberships.forEach(membership => {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º membership.team.name, —Ç–∞–∫ –∫–∞–∫ –º—ã –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ leftJoinAndSelect
          const teamName = membership.team?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞';
          rolesByContext.teams.push({
            role: membership.role?.name || 'member',
            roleId: membership.role?.id,
            teamId: membership.teamId,
            team: teamName
          });
        });
      }
      
      return {
        ...user,
        rolesByContext,
        globalRole
      };
    });
    
    console.log('üîç Processed users with rolesByContext:', usersWithRolesByContext.length);
    return usersWithRolesByContext;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–ø—Ä–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
   */
  async canManageUser(
    managerId: string,
    targetUserId: string,
    context: { organizationId?: string; teamId?: string },
  ): Promise<{ canManage: boolean; managerRole: string; targetRole: string; managerLevel: number; targetLevel: number }> {
    console.log(`üîê canManageUser called: managerId=${managerId}, targetUserId=${targetUserId}, context=${JSON.stringify(context)}`);
    
    const canManage = await this.roleHierarchyService.canManageUser(managerId, targetUserId, context);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ
    const managerEffectiveRole = await this.roleHierarchyService.getUserEffectiveRole(managerId, context);
    const targetEffectiveRole = await this.roleHierarchyService.getUserEffectiveRole(targetUserId, context);
    
    console.log(`üîê Manager effective role: ${managerEffectiveRole.role} (scope: ${managerEffectiveRole.scope})`);
    console.log(`üîê Target effective role: ${targetEffectiveRole.role} (scope: ${targetEffectiveRole.scope})`);
    
    // –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–Ω–∏ —Ä–æ–ª–µ–π
    const ROLE_LEVELS: Record<string, number> = {
      super_admin: 100,
      admin: 80,
      manager: 60,
      editor: 40,
      viewer: 20,
    };
    
    const result = {
      canManage,
      managerRole: managerEffectiveRole.role,
      targetRole: targetEffectiveRole.role,
      managerLevel: ROLE_LEVELS[managerEffectiveRole.role] || 0,
      targetLevel: ROLE_LEVELS[targetEffectiveRole.role] || 0,
    };
    
    console.log(`üîê canManageUser result: ${JSON.stringify(result)}`);
    return result;
  }
}
