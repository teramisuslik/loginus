import { Injectable, ForbiddenException, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, Not } from 'typeorm';
import { User } from './entities/user.entity';
import { Role } from '../rbac/entities/role.entity';

export interface RolePromotionCondition {
  id: string;
  name: string;
  description: string;
  checkCondition: (user: User) => Promise<boolean>;
  targetRole: string;
  priority: number; // –ß–µ–º –≤—ã—à–µ, —Ç–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ
}

@Injectable()
export class UserRoleManagementService {
  constructor(
    @InjectRepository(User) private usersRepo: Repository<User>,
    @InjectRepository(Role) private rolesRepo: Repository<Role>,
  ) {}

  /**
   * –ü–æ–≤—ã—à–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤)
   */
  async promoteUserRole(
    userId: string,
    newRoleName: string,
    promotedBy: string,
  ): Promise<User> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–º–æ—É—Ç–µ—Ä - —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω
    const promoter = await this.usersRepo.findOne({
      where: { id: promotedBy },
      relations: ['roles'],
    });

    if (!promoter) {
      throw new NotFoundException('–ü—Ä–æ–º–æ—É—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const isSuperAdmin = promoter.userRoleAssignments?.some(assignment => 
      assignment.role && assignment.role.name === 'super_admin'
    ) || false;
    if (!isSuperAdmin) {
      throw new ForbiddenException('–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –ø–æ–≤—ã—à–∞—Ç—å —Ä–æ–ª–∏');
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–æ–≤—É—é —Ä–æ–ª—å
    const user = await this.usersRepo.findOne({
      where: { id: userId },
      relations: ['roles'],
    });

    if (!user) {
      throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const newRole = await this.rolesRepo.findOne({
      where: { name: newRoleName },
    });

    if (!newRole) {
      throw new NotFoundException('–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–æ–ª–∏ (–∫—Ä–æ–º–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å)
    const systemRoles = ['super_admin', 'admin', 'manager', 'editor', 'viewer'];
    const removableRoles = user.userRoleAssignments?.filter(assignment => 
      assignment.role && !systemRoles.includes(assignment.role.name)
    ) || [];
    
    for (const role of removableRoles) {
      await this.usersRepo
        .createQueryBuilder()
        .relation(User, 'roles')
        .of(userId)
        .remove(role.id);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ä–æ–ª—å
    await this.usersRepo
      .createQueryBuilder()
      .relation(User, 'roles')
      .of(userId)
      .add(newRole.id);

    console.log(`üéØ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.email} –ø–æ–≤—ã—à–µ–Ω–∞ –¥–æ ${newRoleName} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${promoter.email}`);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await this.usersRepo.findOne({
      where: { id: userId },
      relations: ['roles', 'roles.permissions'],
    });
    
    if (!updatedUser) {
      throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    return updatedUser;
  }

  /**
   * –ü–æ–Ω–∏–∂–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤)
   */
  async demoteUserRole(
    userId: string,
    roleName: string,
    demotedBy: string,
  ): Promise<User> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–º–æ—É—Ç–µ—Ä - —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω
    const demoter = await this.usersRepo.findOne({
      where: { id: demotedBy },
      relations: ['roles'],
    });

    if (!demoter) {
      throw new NotFoundException('–î–µ–º–æ—É—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const isSuperAdmin = demoter.userRoleAssignments?.some(assignment => 
      assignment.role && assignment.role.name === 'super_admin'
    ) || false;
    if (!isSuperAdmin) {
      throw new ForbiddenException('–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –ø–æ–Ω–∏–∂–∞—Ç—å —Ä–æ–ª–∏');
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–æ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    const user = await this.usersRepo.findOne({
      where: { id: userId },
      relations: ['roles'],
    });

    if (!user) {
      throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const roleToRemove = user.userRoleAssignments?.find(assignment => 
      assignment.role && assignment.role.name === roleName
    );
    if (!roleToRemove) {
      throw new NotFoundException('–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    // –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
    if (roleName === 'super_admin') {
      throw new ForbiddenException('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞');
    }

    // –£–¥–∞–ª—è–µ–º —Ä–æ–ª—å
    await this.usersRepo
      .createQueryBuilder()
      .relation(User, 'roles')
      .of(userId)
      .remove(roleToRemove.id);

    console.log(`üìâ –†–æ–ª—å ${roleName} —É–¥–∞–ª–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.email} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${demoter.email}`);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await this.usersRepo.findOne({
      where: { id: userId },
      relations: ['roles', 'roles.permissions'],
    });
    
    if (!updatedUser) {
      throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    return updatedUser;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–≤—ã—à–µ–Ω–∏—è —Ä–æ–ª–µ–π
   */
  async checkAndApplyRolePromotions(userId: string): Promise<User> {
    const user = await this.usersRepo.findOne({
      where: { id: userId },
      relations: ['roles', 'organization', 'team'],
    });

    if (!user) {
      throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Å–ª–æ–≤–∏—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ä–æ–ª–µ–π
    const conditions = this.getRolePromotionConditions();

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–µ—Ä–≤—ã–º)
    conditions.sort((a, b) => b.priority - a.priority);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —É—Å–ª–æ–≤–∏–µ
    for (const condition of conditions) {
      try {
        const shouldPromote = await condition.checkCondition(user);
        if (shouldPromote) {
          console.log(`üéØ –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —É—Å–ª–æ–≤–∏–µ –ø–æ–≤—ã—à–µ–Ω–∏—è —Ä–æ–ª–∏: ${condition.name}`);
          await this.promoteUserRole(userId, condition.targetRole, 'system');
          break; // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —É—Å–ª–æ–≤–∏–µ
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏—è ${condition.name}:`, error.message);
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await this.usersRepo.findOne({
      where: { id: userId },
      relations: ['roles', 'roles.permissions'],
    });
    
    if (!updatedUser) {
      throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    return updatedUser;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–≤—ã—à–µ–Ω–∏—è —Ä–æ–ª–µ–π
   * –ó–ê–ì–û–¢–û–í–ö–ò –¥–ª—è –±—É–¥—É—â–∏—Ö —É—Å–ª–æ–≤–∏–π
   */
  private getRolePromotionConditions(): RolePromotionCondition[] {
    return [
      {
        id: 'email_verified',
        name: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email',
        description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–≤–æ–π email –∞–¥—Ä–µ—Å',
        targetRole: 'editor',
        priority: 10,
        checkCondition: async (user: User) => {
          return user.emailVerified === true;
        },
      },
      {
        id: 'phone_verified',
        name: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
        description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
        targetRole: 'editor',
        priority: 15,
        checkCondition: async (user: User) => {
          return user.phoneVerified === true;
        },
      },
      {
        id: 'two_factor_enabled',
        name: '–í–∫–ª—é—á–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è',
        description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–∏–ª 2FA',
        targetRole: 'editor',
        priority: 20,
        checkCondition: async (user: User) => {
          return user.twoFactorEnabled === true;
        },
      },
      {
        id: 'team_member',
        name: '–ß–ª–µ–Ω –∫–æ–º–∞–Ω–¥—ã',
        description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É',
        targetRole: 'manager',
        priority: 30,
        checkCondition: async (user: User) => {
          return user.teams && user.teams.length > 0;
        },
      },
      {
        id: 'organization_admin',
        name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏',
        description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏',
        targetRole: 'admin',
        priority: 40,
        checkCondition: async (user: User) => {
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
          return false; // –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
        },
      },
      {
        id: 'high_activity',
        name: '–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—è–≤–∏–ª –≤—ã—Å–æ–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ',
        targetRole: 'editor',
        priority: 25,
        checkCondition: async (user: User) => {
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          // –ù–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π, –≤—Ä–µ–º—è –≤ —Å–∏—Å—Ç–µ–º–µ –∏ —Ç.–¥.
          return false; // –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
        },
      },
      {
        id: 'payment_verified',
        name: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞',
        description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–ª–∞—Ç–µ–∂ –∑–∞ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏',
        targetRole: 'editor',
        priority: 35,
        checkCondition: async (user: User) => {
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
          return false; // –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
        },
      },
    ];
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserRoleHistory(userId: string): Promise<any[]> {
    // –ó–ê–ì–û–¢–û–í–ö–ê: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–æ–ª–µ–π
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    return [];
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è
   */
  async getAvailableRolesForPromotion(userId: string): Promise<Role[]> {
    const user = await this.usersRepo.findOne({
      where: { id: userId },
      relations: ['roles'],
    });

    if (!user) {
      throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ (super_admin, admin, viewer), –∫—Ä–æ–º–µ —Ç–µ—Ö, —á—Ç–æ —É–∂–µ –µ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userRoleNames = user.userRoleAssignments?.map(assignment => 
      assignment.role?.name
    ).filter(Boolean) || [];
    const availableRoles = await this.rolesRepo.find({
      where: {
        isGlobal: true,
        name: Not(userRoleNames),
      } as any,
    });

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ä–æ–ª–∏ (super_admin, admin, viewer)
    return availableRoles.filter(role => 
      ['super_admin', 'admin', 'viewer'].includes(role.name)
    );
  }
}
