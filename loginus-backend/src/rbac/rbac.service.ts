import { Injectable, NotFoundException, ForbiddenException, ConflictException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, In } from 'typeorm';
import { User } from '../users/entities/user.entity';
import { Role } from './entities/role.entity';
import { Permission } from './entities/permission.entity';

@Injectable()
export class RbacService {
  constructor(
    @InjectRepository(User) private usersRepo: Repository<User>,
    @InjectRepository(Role) private rolesRepo: Repository<Role>,
    @InjectRepository(Permission) private permissionsRepo: Repository<Permission>,
  ) {}

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∞–≤–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async userHasPermission(userId: string, permissionName: string): Promise<boolean> {
    const user = await this.usersRepo.findOne({
      where: { id: userId },
      relations: ['roles', 'roles.permissions'],
    });

    if (!user) return false;

    return user.userRoleAssignments?.some(assignment =>
      assignment.role?.permissions?.some(perm => perm.name === permissionName)
    ) || false;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–æ–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async userHasRole(userId: string, roleName: string): Promise<boolean> {
    const user = await this.usersRepo.findOne({
      where: { id: userId },
      relations: ['userRoleAssignments', 'userRoleAssignments.role'],
    });

    return user?.userRoleAssignments?.some(assignment => 
      assignment.role && assignment.role.name === roleName
    ) ?? false;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫)
   */
  async getUserPermissions(userId: string): Promise<string[]> {
    const user = await this.usersRepo.findOne({
      where: { id: userId },
      relations: ['roles', 'roles.permissions'],
    });

    if (!user) return [];

    const permissions = new Set<string>();
    user.userRoleAssignments?.forEach(assignment => {
      assignment.role?.permissions?.forEach(perm => permissions.add(perm.name));
    });

    return Array.from(permissions);
  }

  /**
   * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async assignRoleToUser(
    userId: string,
    roleId: string,
    grantedBy: string,
    expiresAt?: Date,
  ): Promise<void> {
    const user = await this.usersRepo.findOne({
      where: { id: userId },
      relations: ['organization', 'team'],
    });
    
    const role = await this.rolesRepo.findOne({
      where: { id: roleId },
    });

    if (!user || !role) {
      throw new NotFoundException('User or Role not found');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ scope: —Ä–æ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ç–æ–π –∂–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    if (role.organizationId && !user.organizations?.some(org => org.id === role.organizationId)) {
      throw new ForbiddenException('Role not in same organization');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ scope: —Ä–æ–ª—å –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —á–ª–µ–Ω–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    if (role.teamId && !user.teams?.some(team => team.id === role.teamId)) {
      throw new ForbiddenException('Role not in same team');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const existingUserRole = await this.usersRepo
      .createQueryBuilder()
      .relation(User, 'roles')
      .of(userId)
      .loadMany();
    
    const isAlreadyAssigned = existingUserRole.some(userRole => userRole.id === roleId);
    if (isAlreadyAssigned) {
      // –†–æ–ª—å —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
      return;
    }

    // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    await this.usersRepo
      .createQueryBuilder()
      .relation(User, 'roles')
      .of(userId)
      .add(roleId);

    // TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å granted_by –∏ expires_at –≤ user_roles
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async removeRoleFromUser(userId: string, roleId: string): Promise<void> {
    await this.usersRepo
      .createQueryBuilder()
      .relation(User, 'roles')
      .of(userId)
      .remove(roleId);
  }

  /**
   * –ó–∞–º–µ–Ω–∞ –≤—Å–µ—Ö —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–æ–≤—É—é —Ä–æ–ª—å
   */
  async replaceUserRole(
    userId: string,
    newRoleId: string,
    grantedBy: string,
  ): Promise<void> {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ–∫—É—â–∏–º–∏ —Ä–æ–ª—è–º–∏
    const user = await this.usersRepo.findOne({
      where: { id: userId },
      relations: ['userRoleAssignments', 'userRoleAssignments.role'],
    });

    if (!user) {
      throw new NotFoundException('User not found');
    }

    console.log('üîç –¢–µ–∫—É—â–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.userRoleAssignments?.map(a => a.role?.name).filter(Boolean));

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ —Ä–æ–ª–∏ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å
    await this.usersRepo.query(
      'DELETE FROM user_roles WHERE "userId" = $1',
      [userId]
    );

    console.log('üîç –£–¥–∞–ª–∏–ª–∏ –≤—Å–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤—É—é —Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å
    await this.usersRepo.query(
      'INSERT INTO user_roles ("userId", "roleId") VALUES ($1, $2)',
      [userId, newRoleId]
    );

    console.log('üîç –ù–∞–∑–Ω–∞—á–∏–ª–∏ –Ω–æ–≤—É—é —Ä–æ–ª—å:', newRoleId);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–æ–ª–∏ (–Ω–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π)
   */
  async createRole(
    name: string,
    description: string,
    organizationId?: string,
    teamId?: string,
    permissionIds: string[] = [],
  ): Promise<Role> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    if (!/^[a-zA-Z0-9_]+$/.test(name)) {
      throw new ConflictException('–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–ª–∏
    const existingRole = await this.rolesRepo.findOne({
      where: { name }
    });

    if (existingRole) {
      throw new ConflictException('–†–æ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    const role = this.rolesRepo.create({
      name,
      description,
      organizationId,
      teamId,
      isSystem: false,
    });

    await this.rolesRepo.save(role);

    // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤
    if (permissionIds.length > 0) {
      await this.rolesRepo
        .createQueryBuilder()
        .relation(Role, 'permissions')
        .of(role.id)
        .add(permissionIds);
    }

    return role;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ —Ä–æ–ª–∏
   */
  async updateRolePermissions(
    roleId: string,
    permissionIds: string[],
  ): Promise<void> {
    const role = await this.rolesRepo.findOne({
      where: { id: roleId },
      relations: ['permissions'],
    });

    if (!role) {
      throw new NotFoundException('Role not found');
    }

    if (role.isSystem) {
      throw new ForbiddenException('Cannot modify system role');
    }

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∞
    const currentPermissionIds = role.permissions.map(p => p.id);
    if (currentPermissionIds.length > 0) {
      await this.rolesRepo
        .createQueryBuilder()
        .relation(Role, 'permissions')
        .of(roleId)
        .remove(currentPermissionIds);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
    if (permissionIds.length > 0) {
      await this.rolesRepo
        .createQueryBuilder()
        .relation(Role, 'permissions')
        .of(roleId)
        .add(permissionIds);
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ (—Ç–æ–ª—å–∫–æ –Ω–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ)
   */
  async deleteRole(roleId: string): Promise<void> {
    const role = await this.rolesRepo.findOne({ where: { id: roleId } });

    if (!role) {
      throw new NotFoundException('Role not found');
    }

    if (role.isSystem) {
      throw new ForbiddenException('Cannot delete system role');
    }

    await this.rolesRepo.delete(roleId);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π (—Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ)
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ permissions
   */
  async getAllRoles(): Promise<Role[]> {
    const roles = await this.rolesRepo.find({
      where: {
        isGlobal: true,
      },
      relations: ['permissions'],
      order: { name: 'ASC' },
    });
    return roles;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
   * –¢–æ–ª—å–∫–æ 3 —Ä–æ–ª–∏: super_admin, admin, viewer
   */
  async getAssignableRoles(): Promise<Partial<Role>[]> {
    return this.rolesRepo.find({
      where: {
        isGlobal: true,
        name: In(['super_admin', 'admin', 'viewer']),
      },
      select: ['id', 'name', 'description', 'isGlobal'],
      order: { name: 'ASC' },
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—Ç–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ, –±–µ–∑ permissions)
   */
  async getRolesForSettings(): Promise<Partial<Role>[]> {
    return this.rolesRepo.find({
      where: { isGlobal: true },
      select: ['id', 'name', 'description', 'isGlobal'],
      order: { name: 'ASC' },
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–æ–ª–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
   */
  async getOrganizationRoles(organizationId: string): Promise<Role[]> {
    return this.rolesRepo.find({
      where: [
        { organizationId },
        { isSystem: true },
      ],
      relations: ['permissions'],
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∞–≤
   */
  async getAllPermissions(): Promise<Permission[]> {
    return this.permissionsRepo.find({
      order: { resource: 'ASC', action: 'ASC' },
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ ID
   */
  async getRoleById(roleId: string): Promise<Role> {
    const role = await this.rolesRepo.findOne({
      where: { id: roleId },
      relations: ['permissions'],
    });

    if (!role) {
      throw new NotFoundException('–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    return role;
  }

  /**
   * –ü–æ–∏—Å–∫ —Ä–æ–ª–∏ –ø–æ –∏–º–µ–Ω–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏/–∫–æ–º–∞–Ω–¥—ã
   */
  async findRoleByName(
    roleName: string,
    organizationId?: string | null,
    teamId?: string | null,
  ): Promise<Role | null> {
    const whereConditions: any = { name: roleName };
    
    if (organizationId) {
      whereConditions.organizationId = organizationId;
    } else {
      whereConditions.organizationId = null;
    }
    
    if (teamId) {
      whereConditions.teamId = teamId;
    } else {
      whereConditions.teamId = null;
    }

    return this.rolesRepo.findOne({
      where: whereConditions,
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */
  async getDefaultRole(): Promise<Role | null> {
    return this.rolesRepo.findOne({
      where: { name: 'viewer' },
    });
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏
   */
  async getGlobalRoles(): Promise<Role[]> {
    return this.rolesRepo.find({
      where: { isGlobal: true },
      relations: ['permissions'],
      order: { name: 'ASC' },
    });
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª–∏ –∫–æ–º–∞–Ω–¥
   */
  async getTeamRoles(): Promise<Role[]> {
    return this.rolesRepo.find({
      where: { isGlobal: false },
      relations: ['permissions'],
      order: { name: 'ASC' },
    });
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª–∏ –ø–æ —Ç–∏–ø—É
   */
  async getRolesByType(isGlobal: boolean): Promise<Role[]> {
    return this.rolesRepo.find({
      where: { isGlobal },
      relations: ['permissions'],
      order: { name: 'ASC' },
    });
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∞–≤–∞
   */
  async createPermission(createPermissionDto: any): Promise<Permission> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–∞–≤–æ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
    const existingPermission = await this.permissionsRepo.findOne({
      where: { name: createPermissionDto.name }
    });

    if (existingPermission) {
      throw new ConflictException('–ü—Ä–∞–≤–æ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–∞–≤–æ —Å —Ç–∞–∫–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–µ–π resource + action
    const existingCombination = await this.permissionsRepo.findOne({
      where: { 
        resource: createPermissionDto.resource,
        action: createPermissionDto.action
      }
    });

    if (existingCombination) {
      throw new ConflictException(`–ü—Ä–∞–≤–æ —Å –∫–æ–º–±–∏–Ω–∞—Ü–∏–µ–π "${createPermissionDto.resource}.${createPermissionDto.action}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    }

    const permission = this.permissionsRepo.create({
      name: createPermissionDto.name,
      description: createPermissionDto.description,
      resource: createPermissionDto.resource,
      action: createPermissionDto.action,
    });

    return this.permissionsRepo.save(permission);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏
   */
  async updateRole(roleId: string, updateRoleDto: any): Promise<Role> {
    const role = await this.rolesRepo.findOne({
      where: { id: roleId }
    });

    if (!role) {
      throw new NotFoundException('–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    if (role.isSystem) {
      throw new ForbiddenException('–ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–æ–ª–∏');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
    if (updateRoleDto.name) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
      if (!/^[a-zA-Z0-9_]+$/.test(updateRoleDto.name)) {
        throw new ConflictException('–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–ª–∏ (–µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å)
      if (updateRoleDto.name !== role.name) {
        const existingRole = await this.rolesRepo.findOne({
          where: { name: updateRoleDto.name }
        });

        if (existingRole) {
          throw new ConflictException('–†–æ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }
      }

      role.name = updateRoleDto.name;
    }
    if (updateRoleDto.description !== undefined) {
      role.description = updateRoleDto.description;
    }

    return this.rolesRepo.save(role);
  }
}
