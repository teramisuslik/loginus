import { NestFactory } from '@nestjs/core';
import { ValidationPipe } from '@nestjs/common';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import { ConfigService } from '@nestjs/config';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  const configService = app.get(ConfigService);

  // Global prefix
  app.setGlobalPrefix('api');

  // CORS
  const frontendUrl = configService.get('FRONTEND_URL', 'http://localhost:3000');
  const isDevelopment = configService.get('NODE_ENV') !== 'production';
  
  app.enableCors({
    origin: (origin, callback) => {
      // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ origin (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–ª–∏ Postman)
      // –¢–∞–∫–∂–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º origin === "null" (–±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å null origin)
      if (!origin || origin === 'null') return callback(null, true);
      
      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ localhost –∏ 127.0.0.1
      if (isDevelopment) {
        if (origin.includes('localhost') || origin.includes('127.0.0.1') || origin.includes('0.0.0.0')) {
          return callback(null, true);
        }
      }
      
      const allowedOrigins = [
        frontendUrl,
        'http://localhost:3000',
        'http://localhost:3001',
        'http://localhost:3002',
        'http://localhost:5173', // Vite default
        'http://localhost:5174', // Vite alternative
        'http://localhost:8080',
        'http://localhost:8081',
        'http://127.0.0.1:3000',
        'http://127.0.0.1:3001',
        'http://127.0.0.1:3002',
        'http://127.0.0.1:5173',
        'http://127.0.0.1:8080',
        'http://127.0.0.1:8081',
        'https://loginus.ldmco.ru',
        'http://45.144.176.42:3000',
        'http://45.144.176.42:3002',
        'https://loginus.ldmco.ru',
        'http://loginus.ldmco.ru',
        'https://vselena.ldmco.ru',
        'http://vselena.ldmco.ru'
      ];
      
      if (allowedOrigins.includes(origin)) {
        return callback(null, true);
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∏ –Ω–µ development, –æ—Ç–∫–ª–æ–Ω—è–µ–º
      return callback(new Error(`Not allowed by CORS. Origin: ${origin}`));
    },
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'Accept'],
  });

  // Global validation pipe
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,
      transform: true,
      forbidNonWhitelisted: true,
      transformOptions: {
        enableImplicitConversion: true,
      },
    }),
  );

  // Swagger setup
  if (configService.get('app.swaggerEnabled') !== false) {
    const config = new DocumentBuilder()
      .setTitle('Loginus API')
      .setDescription('API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π')
      .setVersion('1.0')
      .addBearerAuth(
        {
          type: 'http',
          scheme: 'bearer',
          bearerFormat: 'JWT',
          name: 'Authorization',
          description: '–í–≤–µ–¥–∏—Ç–µ JWT —Ç–æ–∫–µ–Ω',
          in: 'header',
        },
        'JWT-auth',
      )
      .addTag('auth', '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
      .addTag('users', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏')
      .addTag('roles', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏')
      .addTag('permissions', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏')
      .addTag('organizations', '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏')
      .addTag('teams', '–ö–æ–º–∞–Ω–¥—ã')
      .build();

    const document = SwaggerModule.createDocument(app, config);
    SwaggerModule.setup('api/docs', app, document, {
      customSiteTitle: 'Loginus API Docs',
      customCss: '.swagger-ui .topbar { display: none }',
      swaggerOptions: {
        persistAuthorization: true,
      },
    });
  }

  const port = configService.get('app.port') || 3001;
  
  // –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è API –æ—Ç–≤–µ—Ç–æ–≤ –ü–ï–†–ï–î listen
  // –í–∞–∂–Ω–æ: –≤ NestJS –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –∏–ª–∏ global interceptor
  app.use((req: any, res: any, next: any) => {
    // –î–ª—è –≤—Å–µ—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (req.path && req.path.startsWith('/api/')) {
      res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate, proxy-revalidate');
      res.setHeader('Pragma', 'no-cache');
      res.setHeader('Expires', '0');
      res.setHeader('Surrogate-Control', 'no-store');
    }
    next();
  });
  await app.listen(port, '0.0.0.0');
  
  console.log(`üöÄ Application is running on: http://localhost:${port}`);
  console.log(`üìö Swagger docs: http://localhost:${port}/api/docs`);
}

bootstrap();