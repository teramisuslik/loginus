// –¢–µ—Å—Ç —Ä–æ–ª–∏-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
const axios = require('axios');

const API_BASE = 'http://localhost:3001/api';
const FRONTEND_BASE = 'http://localhost:3002';

async function testRoleRedirects() {
    console.log('üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π\n');
    
    try {
        // 1. –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –∫–∞–∫ super_admin
        console.log('1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –∫–∞–∫ super_admin...');
        const superAdminResponse = await axios.post(`${API_BASE}/auth/login`, {
            email: 'admin@vselena.ru',
            password: 'admin123'
        });
        
        const superAdminData = superAdminResponse.data;
        console.log(`‚úÖ Super Admin login successful`);
        console.log(`   –†–æ–ª–∏: ${superAdminData.user.roles?.length || 0}`);
        console.log(`   –ü—Ä–∞–≤–∞: ${superAdminData.user.permissions?.length || 0}`);
        console.log(`   –ü–µ—Ä–≤–∞—è —Ä–æ–ª—å: ${superAdminData.user.roles?.[0]?.name || 'none'}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ super_admin –∏–º–µ–µ—Ç —Ä–æ–ª—å super_admin
        const superAdminRole = superAdminData.user.roles?.[0]?.name;
        if (superAdminRole === 'super_admin') {
            console.log('‚úÖ Super Admin –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä–æ–ª—å');
        } else {
            console.log('‚ùå Super Admin –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–æ–ª–∏');
        }
        
        // 2. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        console.log('\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /auth/me...');
        const meResponse = await axios.get(`${API_BASE}/auth/me`, {
            headers: {
                'Authorization': `Bearer ${superAdminData.accessToken}`
            }
        });
        
        const meData = meResponse.data;
        console.log(`‚úÖ /auth/me successful`);
        console.log(`   –†–æ–ª–∏: ${meData.roles?.length || 0}`);
        console.log(`   –ü—Ä–∞–≤–∞: ${meData.permissions?.length || 0}`);
        
        // 3. –¢–µ—Å—Ç –º–∏–∫—Ä–æ–º–æ–¥—É–ª–µ–π
        console.log('\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ–º–æ–¥—É–ª–µ–π...');
        const modulesResponse = await axios.get(`${API_BASE}/micro-modules`);
        const modules = modulesResponse.data;
        console.log(`‚úÖ –ú–∏–∫—Ä–æ–º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${modules.length} –º–æ–¥—É–ª–µ–π`);
        
        modules.forEach(module => {
            console.log(`   üì¶ ${module.name} - ${module.isEnabled ? '–í–∫–ª—é—á–µ–Ω' : '–û—Ç–∫–ª—é—á–µ–Ω'}`);
        });
        
        // 4. –¢–µ—Å—Ç —Ä–æ–ª–∏-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ UI
        console.log('\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ UI...');
        const highestRole = getHighestRole(meData.roles || []);
        console.log(`   –í—ã—Å—à–∞—è —Ä–æ–ª—å: ${highestRole}`);
        
        if (highestRole === 'super_admin') {
            console.log('‚úÖ Super Admin –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ /test-micro-modules.html');
            console.log('‚úÖ Super Admin –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å –≤—Å–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã');
            console.log('‚úÖ Super Admin –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã');
        } else if (highestRole === 'admin') {
            console.log('‚úÖ Admin –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ /dashboard.html');
            console.log('‚úÖ Admin –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å –≤–∫–ª–∞–¥–∫–∏: –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –ö–æ–º–∞–Ω–¥–∞, –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏');
        } else if (highestRole === 'viewer') {
            console.log('‚úÖ Viewer –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ /dashboard.html');
            console.log('‚úÖ Viewer –ù–ï –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –≤–∫–ª–∞–¥–∫–∏');
        }
        
        // 5. –¢–µ—Å—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        console.log('\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...');
        const permissions = meData.permissions || [];
        console.log(`   –í—Å–µ–≥–æ –ø—Ä–∞–≤: ${permissions.length}`);
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–∞–≤–∞ –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º
        const groupedPermissions = {};
        permissions.forEach(perm => {
            const resource = perm.resource || 'unknown';
            if (!groupedPermissions[resource]) {
                groupedPermissions[resource] = [];
            }
            groupedPermissions[resource].push(perm.name);
        });
        
        Object.keys(groupedPermissions).forEach(resource => {
            console.log(`   üìÅ ${resource}: ${groupedPermissions[resource].length} –ø—Ä–∞–≤`);
        });
        
        console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
        if (error.response) {
            console.error('   –°—Ç–∞—Ç—É—Å:', error.response.status);
            console.error('   –î–∞–Ω–Ω—ã–µ:', error.response.data);
        }
    }
}

function getHighestRole(roles) {
    const rolePriority = {
        'super_admin': 5,
        'admin': 4,
        'manager': 3,
        'editor': 2,
        'viewer': 1
    };
    
    let highestRole = null;
    let highestPriority = 0;
    
    roles.forEach(role => {
        const priority = rolePriority[role.name] || 0;
        if (priority > highestPriority) {
            highestPriority = priority;
            highestRole = role.name;
        }
    });
    
    return highestRole || 'unknown';
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testRoleRedirects();
